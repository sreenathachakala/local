{"version":3,"file":"56.6b8f87ed8b344b739546.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./app/components/Form/Checkbox.tsx","webpack://quilt-navigator/./app/components/Form/TextField.tsx","webpack://quilt-navigator/./app/components/FileEditor/QuiltConfigEditor/WorkflowsToolbar.tsx","webpack://quilt-navigator/./app/components/FileEditor/QuiltConfigEditor/Workflows.tsx"],"sourcesContent":["import * as React from 'react'\nimport type * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nconst useCheckboxStyles = M.makeStyles({\n  root: {\n    marginBottom: -9,\n    marginTop: -9,\n  },\n})\n\ninterface CheckboxProps {\n  FormControlLabelProps?: M.FormControlLabelProps\n  FormControlProps?: M.FormControlProps\n  errors?: Record<string, React.ReactNode>\n  input?: RF.FieldInputProps<boolean>\n  label?: string\n  meta: RF.FieldMetaState<string | Symbol>\n}\n\nexport default function Checkbox({\n  FormControlLabelProps = {} as M.FormControlLabelProps,\n  FormControlProps = {} as M.FormControlProps,\n  errors = undefined, // eslint-disable-line @typescript-eslint/no-unused-vars\n  input = {} as RF.FieldInputProps<boolean>,\n  label = undefined,\n  meta,\n  ...rest\n}: CheckboxProps & M.CheckboxProps) {\n  const classes = useCheckboxStyles()\n  return (\n    <M.FormControl {...FormControlProps}>\n      <M.FormControlLabel\n        {...FormControlLabelProps}\n        control={\n          <M.Checkbox\n            classes={classes}\n            disabled={meta.submitting || meta.submitSucceeded}\n            {...input}\n            {...rest}\n          />\n        }\n        label={label}\n      />\n    </M.FormControl>\n  )\n}\n","import * as React from 'react'\nimport type * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nconst useFieldInputStyles = M.makeStyles({\n  root: {\n    // It hides M.CircularProgress (spinning square) overflow\n    overflow: 'hidden',\n  },\n})\n\ninterface FieldProps {\n  error?: string\n  helperText?: React.ReactNode\n  input: RF.FieldInputProps<string>\n  validating?: boolean\n}\n\nexport default function Field({\n  InputLabelProps,\n  error,\n  helperText,\n  input,\n  validating,\n  ...rest\n}: FieldProps & M.TextFieldProps) {\n  const inputClasses = useFieldInputStyles()\n  const props = {\n    InputLabelProps: { shrink: true, ...InputLabelProps },\n    InputProps: {\n      endAdornment: validating && <M.CircularProgress size={20} />,\n      classes: inputClasses,\n    },\n    error: !!error,\n    helperText: error || helperText,\n    ...input,\n    ...rest,\n  }\n  return <M.TextField {...props} />\n}\n","import * as FF from 'final-form'\nimport * as FP from 'fp-ts'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nimport Code from 'components/Code'\nimport * as Form from 'components/Form'\nimport type { ToolbarProps as ToolbarWrapperProps } from 'components/JsonEditor/Toolbar'\nimport * as JSONPointer from 'utils/JSONPointer'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport { useRoute } from 'utils/router'\nimport type { JsonRecord } from 'utils/types'\nimport * as validators from 'utils/validators'\nimport type { WorkflowYaml } from 'utils/workflows'\n\ninterface FieldProps {\n  bucket: string\n  errors: Record<string, React.ReactNode>\n  input: RF.FieldInputProps<string>\n  meta: RF.FieldMetaState<string>\n}\n\nfunction SchemaField({\n  bucket,\n  input,\n  meta,\n  errors,\n  helperText,\n  InputLabelProps,\n  ...rest\n}: FieldProps & M.TextFieldProps) {\n  const { urls } = NamedRoutes.use()\n  const href = React.useMemo(\n    () =>\n      input.value\n        ? urls.bucketFile(bucket, `.quilt/workflows/${input.value}.json`, { edit: true })\n        : null,\n    [urls, bucket, input.value],\n  )\n  const error = meta.submitFailed && (meta.error || meta.submitError)\n  const props = {\n    error: !!error,\n    helperText: error ? errors[error] || error : helperText,\n    disabled: meta.submitting || meta.submitSucceeded,\n    InputLabelProps: { shrink: true, ...InputLabelProps },\n    InputProps: {\n      endAdornment: href && (\n        <a href={href} target=\"_blank\">\n          <M.IconButton size=\"small\">\n            <M.Icon>open_in_new</M.Icon>\n          </M.IconButton>\n        </a>\n      ),\n    },\n    ...input,\n    ...rest,\n  }\n  return <M.TextField {...props} />\n}\n\nfunction validateSchemaName() {\n  return undefined\n}\n\nconst useButtonStyles = M.makeStyles({\n  root: {\n    padding: 0,\n  },\n})\n\ninterface ButtonProps {\n  onClick: () => void\n}\n\nfunction Button({ onClick }: ButtonProps) {\n  const classes = useButtonStyles()\n  return (\n    <M.IconButton className={classes.root} onClick={onClick} size=\"small\">\n      <M.Icon>add_circle_outline</M.Icon>\n    </M.IconButton>\n  )\n}\n\ninterface FormErrorProps {\n  error: Error\n}\n\nfunction FormError({ error }: FormErrorProps) {\n  return (\n    <M.Box flexGrow={1} display=\"flex\" alignItems=\"center\" pl={2}>\n      <M.Icon color=\"error\">error_outline</M.Icon>\n      <M.Box pl={1} />\n      <M.Typography variant=\"body2\" color=\"error\">\n        {error}\n      </M.Typography>\n    </M.Box>\n  )\n}\n\nconst FormControlProps = { margin: 'normal', size: 'small' }\n\nconst emptyObject = {}\n\ntype FormValues = WorkflowYaml\n\ninterface PopupProps {\n  bucket: string\n  open: boolean\n  onClose: () => void\n  onSubmit: (value: FormValues) => void\n}\n\nfunction Popup({ bucket, open, onClose, onSubmit }: PopupProps) {\n  return (\n    <M.Dialog onClose={onClose} open={open} fullWidth maxWidth=\"sm\">\n      <RF.Form onSubmit={onSubmit}>\n        {({\n          handleSubmit,\n          submitting,\n          submitFailed,\n          submitError,\n          error,\n          hasValidationErrors,\n        }) => (\n          <>\n            <M.DialogTitle>Add workflow</M.DialogTitle>\n            <M.DialogContent>\n              <RF.Field\n                component={Form.TextField}\n                errors={{\n                  required: 'Enter workflow name',\n                }}\n                disabled={submitting}\n                fullWidth\n                helperText={<Code>name</Code>}\n                label=\"Workflow name\"\n                margin=\"normal\"\n                name=\"name\"\n                placeholder=\"e.g. Workflow A\"\n                size=\"small\"\n                validate={validators.required as FF.FieldValidator<string>}\n              />\n              <RF.Field\n                component={Form.TextField}\n                disabled={submitting}\n                errors={emptyObject}\n                fullWidth\n                helperText={<Code>description</Code>}\n                label=\"Workflow description\"\n                margin=\"normal\"\n                name=\"description\"\n                placeholder=\"e.g. Highly useful workflow\"\n                size=\"small\"\n              />\n              <RF.Field\n                component={Form.TextField}\n                disabled={submitting}\n                errors={emptyObject}\n                fullWidth\n                helperText={<Code>package_handle</Code>}\n                label=\"Regular expression to validate package handle\"\n                margin=\"normal\"\n                name=\"handle_pattern\"\n                placeholder=\"e.g. ^foo/bar$\"\n                size=\"small\"\n              />\n              <RF.Field\n                bucket={bucket}\n                component={SchemaField}\n                disabled={submitting}\n                errors={emptyObject}\n                fullWidth\n                helperText={<Code>metadata_schema</Code>}\n                label=\"Metadata JSON Schema name\"\n                margin=\"normal\"\n                name=\"metadata_schema\"\n                placeholder=\"e.g. mySchema1\"\n                size=\"small\"\n                validate={validateSchemaName}\n              />\n              <RF.Field\n                bucket={bucket}\n                component={SchemaField}\n                disabled={submitting}\n                errors={emptyObject}\n                fullWidth\n                helperText={<Code>entries_schema</Code>}\n                label=\"Entries JSON Schema name\"\n                margin=\"normal\"\n                name=\"entries_schema\"\n                placeholder=\"e.g. mySchema1\"\n                size=\"small\"\n                validate={validateSchemaName}\n              />\n              <RF.Field\n                FormControlProps={FormControlProps}\n                component={Form.Checkbox}\n                label=\"Is message required\"\n                name=\"is_message_required\"\n                type=\"checkbox\"\n              />\n            </M.DialogContent>\n            <M.DialogActions>\n              {(!!error || !!submitError) && <FormError error={error || submitError} />}\n              <M.Button onClick={onClose} disabled={submitting}>\n                Cancel\n              </M.Button>\n              <M.Button\n                type=\"submit\"\n                onClick={handleSubmit}\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={submitting || (submitFailed && hasValidationErrors)}\n              >\n                Save\n              </M.Button>\n            </M.DialogActions>\n          </>\n        )}\n      </RF.Form>\n    </M.Dialog>\n  )\n}\n\ninterface ToolbarProps {\n  bucket: string\n  onChange: (value: WorkflowYaml) => void\n}\n\nfunction Toolbar({ bucket, onChange }: ToolbarProps) {\n  const [open, setOpen] = React.useState(false)\n  const handleSubmit = React.useCallback(\n    (value: FormValues) => {\n      onChange(value)\n      setOpen(false)\n    },\n    [onChange],\n  )\n\n  return (\n    <>\n      <Button onClick={() => setOpen(true)} />\n      <Popup\n        bucket={bucket}\n        open={open}\n        onClose={() => setOpen(false)}\n        onSubmit={handleSubmit}\n      />\n    </>\n  )\n}\n\nfunction addSchema(bucket: string, schemaName: string) {\n  return R.assocPath(['schemas', schemaName], {\n    url: `s3://${bucket}/.quilt/workflows/${encodeURIComponent(schemaName)}.json`,\n  })\n}\n\nfunction addMetadataSchema(\n  bucket: string,\n  { metadata_schema }: WorkflowYaml,\n): (j: JsonRecord) => JsonRecord {\n  return R.ifElse(\n    () => !!metadata_schema,\n    addSchema(bucket, metadata_schema as string),\n    R.identity,\n  )\n}\n\nfunction addEntriesSchema(\n  bucket: string,\n  { entries_schema }: WorkflowYaml,\n): (j: JsonRecord) => JsonRecord {\n  return R.ifElse(\n    () => !!entries_schema,\n    addSchema(bucket, entries_schema as string),\n    R.identity,\n  )\n}\n\nfunction createSlug(name: string): string {\n  return name.replace(/ /g, '_').replace(/[^A-Za-z0-9-_]/g, '')\n}\n\nfunction addWorkflow(workflow: WorkflowYaml): (j: JsonRecord) => JsonRecord {\n  return R.assocPath(['workflows', createSlug(workflow.name)], workflow)\n}\n\nexport default function ToolbarWrapper({ columnPath, onChange }: ToolbarWrapperProps) {\n  const { paths } = NamedRoutes.use()\n  const { match } = useRoute(paths.bucketFile, { exact: true })\n  const bucket = match?.params?.bucket\n\n  const handleChange = React.useCallback(\n    (workflow: WorkflowYaml) => {\n      if (!bucket) return\n      onChange((j: JsonRecord) =>\n        FP.function.pipe(\n          j,\n          addMetadataSchema(bucket, workflow),\n          addEntriesSchema(bucket, workflow),\n          addWorkflow(workflow),\n        ),\n      )\n    },\n    [bucket, onChange],\n  )\n\n  if (!bucket) return null\n\n  const pointer = JSONPointer.stringify(columnPath)\n  switch (pointer) {\n    case '/workflows':\n      return <Toolbar bucket={bucket} onChange={handleChange} />\n    default:\n      return null\n  }\n}\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nimport workflowsBaseSchema from 'schemas/workflows-config-1.1.0.json'\n\nimport * as JsonEditorToolbar from 'components/JsonEditor/Toolbar'\nimport { docs } from 'constants/urls'\nimport StyledLink from 'utils/StyledLink'\n\nimport { ConfigDetailsProps } from './Dummy'\nimport WorkflowsToolbar from './WorkflowsToolbar'\n\nconst toolbarOptions = {\n  Toolbar: WorkflowsToolbar,\n}\n\nfunction Header() {\n  return (\n    <M.Typography variant=\"body2\">\n      Configuration for data quality workflows. See{' '}\n      <StyledLink href={`${docs}/advanced/workflows`} target=\"_blank\">\n        the docs\n      </StyledLink>\n    </M.Typography>\n  )\n}\n\nexport default function Workflows({ children }: ConfigDetailsProps) {\n  return (\n    <JsonEditorToolbar.Provider value={toolbarOptions}>\n      {children({ header: <Header />, schema: workflowsBaseSchema })}\n    </JsonEditorToolbar.Provider>\n  )\n}\n"],"names":["useCheckboxStyles","root","marginBottom","marginTop","FormControlLabelProps","FormControlProps","errors","input","label","undefined","meta","rest","classes","control","disabled","submitting","submitSucceeded","useFieldInputStyles","overflow","Field","InputLabelProps","error","helperText","validating","inputClasses","props","shrink","InputProps","endAdornment","size","SchemaField","bucket","urls","NamedRoutes","href","value","bucketFile","edit","submitFailed","submitError","target","validateSchemaName","useButtonStyles","padding","onClick","className","FormError","flexGrow","display","alignItems","pl","color","variant","margin","emptyObject","Popup","open","onClose","onSubmit","fullWidth","maxWidth","handleSubmit","hasValidationErrors","component","required","Code","name","placeholder","validate","validators","type","onChange","setOpen","addSchema","schemaName","url","encodeURIComponent","toolbarOptions","Toolbar","columnPath","paths","match","exact","params","handleChange","workflow","j","metadata_schema","addMetadataSchema","entries_schema","addEntriesSchema","replace","addWorkflow","JSONPointer","Header","StyledLink","Workflows","children","header","schema"],"sourceRoot":""}