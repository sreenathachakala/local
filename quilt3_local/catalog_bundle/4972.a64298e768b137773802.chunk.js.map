{"version":3,"file":"4972.a64298e768b137773802.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./node_modules/brace/mode/r.js"],"sourcesContent":["ace.define(\"ace/mode/tex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar TexHighlightRules = function(textClass) {\n\n    if (!textClass)\n        textClass = \"text\";\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"%.*$\"\n            }, {\n                token : textClass, // non-command\n                regex : \"\\\\\\\\[$&%#\\\\{\\\\}]\"\n            }, {\n                token : \"keyword\", // command\n                regex : \"\\\\\\\\(?:documentclass|usepackage|newcounter|setcounter|addtocounter|value|arabic|stepcounter|newenvironment|renewenvironment|ref|vref|eqref|pageref|label|cite[a-zA-Z]*|tag|begin|end|bibitem)\\\\b\",\n               next : \"nospell\"\n            }, {\n                token : \"keyword\", // command\n                regex : \"\\\\\\\\(?:[a-zA-Z0-9]+|[^a-zA-Z0-9])\"\n            }, {\n               token : \"paren.keyword.operator\",\n                regex : \"[[({]\"\n            }, {\n               token : \"paren.keyword.operator\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : textClass,\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"nospell\" : [\n           {\n               token : \"comment\",\n               regex : \"%.*$\",\n               next : \"start\"\n           }, {\n               token : \"nospell.\" + textClass, // non-command\n               regex : \"\\\\\\\\[$&%#\\\\{\\\\}]\"\n           }, {\n               token : \"keyword\", // command\n               regex : \"\\\\\\\\(?:documentclass|usepackage|newcounter|setcounter|addtocounter|value|arabic|stepcounter|newenvironment|renewenvironment|ref|vref|eqref|pageref|label|cite[a-zA-Z]*|tag|begin|end|bibitem)\\\\b\"\n           }, {\n               token : \"keyword\", // command\n               regex : \"\\\\\\\\(?:[a-zA-Z0-9]+|[^a-zA-Z0-9])\",\n               next : \"start\"\n           }, {\n               token : \"paren.keyword.operator\",\n               regex : \"[[({]\"\n           }, {\n               token : \"paren.keyword.operator\",\n               regex : \"[\\\\])]\"\n           }, {\n               token : \"paren.keyword.operator\",\n               regex : \"}\",\n               next : \"start\"\n           }, {\n               token : \"nospell.\" + textClass,\n               regex : \"\\\\s+\"\n           }, {\n               token : \"nospell.\" + textClass,\n               regex : \"\\\\w+\"\n           }\n        ]\n    };\n};\n\noop.inherits(TexHighlightRules, TextHighlightRules);\n\nexports.TexHighlightRules = TexHighlightRules;\n});\n\nace.define(\"ace/mode/r_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/text_highlight_rules\",\"ace/mode/tex_highlight_rules\"], function(acequire, exports, module)\n{\n\n   var oop = acequire(\"../lib/oop\");\n   var lang = acequire(\"../lib/lang\");\n   var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n   var TexHighlightRules = acequire(\"./tex_highlight_rules\").TexHighlightRules;\n\n   var RHighlightRules = function()\n   {\n\n      var keywords = lang.arrayToMap(\n            (\"function|if|in|break|next|repeat|else|for|return|switch|while|try|tryCatch|stop|warning|acequire|library|attach|detach|source|setMethod|setGeneric|setGroupGeneric|setClass\")\n                  .split(\"|\")\n            );\n\n      var buildinConstants = lang.arrayToMap(\n            (\"NULL|NA|TRUE|FALSE|T|F|Inf|NaN|NA_integer_|NA_real_|NA_character_|\" +\n             \"NA_complex_\").split(\"|\")\n            );\n\n      this.$rules = {\n         \"start\" : [\n            {\n               token : \"comment.sectionhead\",\n               regex : \"#+(?!').*(?:----|====|####)\\\\s*$\"\n            },\n            {\n               token : \"comment\",\n               regex : \"#+'\",\n               next : \"rd-start\"\n            },\n            {\n               token : \"comment\",\n               regex : \"#.*$\"\n            },\n            {\n               token : \"string\", // multi line string start\n               regex : '[\"]',\n               next : \"qqstring\"\n            },\n            {\n               token : \"string\", // multi line string start\n               regex : \"[']\",\n               next : \"qstring\"\n            },\n            {\n               token : \"constant.numeric\", // hex\n               regex : \"0[xX][0-9a-fA-F]+[Li]?\\\\b\"\n            },\n            {\n               token : \"constant.numeric\", // explicit integer\n               regex : \"\\\\d+L\\\\b\"\n            },\n            {\n               token : \"constant.numeric\", // number\n               regex : \"\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\"\n            },\n            {\n               token : \"constant.numeric\", // number with leading decimal\n               regex : \"\\\\.\\\\d+(?:[eE][+\\\\-]?\\\\d*)?i?\\\\b\"\n            },\n            {\n               token : \"constant.language.boolean\",\n               regex : \"(?:TRUE|FALSE|T|F)\\\\b\"\n            },\n            {\n               token : \"identifier\",\n               regex : \"`.*?`\"\n            },\n            {\n               onMatch : function(value) {\n                  if (keywords[value])\n                     return \"keyword\";\n                  else if (buildinConstants[value])\n                     return \"constant.language\";\n                  else if (value == '...' || value.match(/^\\.\\.\\d+$/))\n                     return \"variable.language\";\n                  else\n                     return \"identifier\";\n               },\n               regex : \"[a-zA-Z.][a-zA-Z0-9._]*\\\\b\"\n            },\n            {\n               token : \"keyword.operator\",\n               regex : \"%%|>=|<=|==|!=|\\\\->|<\\\\-|\\\\|\\\\||&&|=|\\\\+|\\\\-|\\\\*|/|\\\\^|>|<|!|&|\\\\||~|\\\\$|:\"\n            },\n            {\n               token : \"keyword.operator\", // infix operators\n               regex : \"%.*?%\"\n            },\n            {\n               token : \"paren.keyword.operator\",\n               regex : \"[[({]\"\n            },\n            {\n               token : \"paren.keyword.operator\",\n               regex : \"[\\\\])}]\"\n            },\n            {\n               token : \"text\",\n               regex : \"\\\\s+\"\n            }\n         ],\n         \"qqstring\" : [\n            {\n               token : \"string\",\n               regex : '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n               next : \"start\"\n            },\n            {\n               token : \"string\",\n               regex : '.+'\n            }\n         ],\n         \"qstring\" : [\n            {\n               token : \"string\",\n               regex : \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n               next : \"start\"\n            },\n            {\n               token : \"string\",\n               regex : '.+'\n            }\n         ]\n      };\n\n      var rdRules = new TexHighlightRules(\"comment\").getRules();\n      for (var i = 0; i < rdRules[\"start\"].length; i++) {\n         rdRules[\"start\"][i].token += \".virtual-comment\";\n      }\n\n      this.addRules(rdRules, \"rd-\");\n      this.$rules[\"rd-start\"].unshift({\n          token: \"text\",\n          regex: \"^\",\n          next: \"start\"\n      });\n      this.$rules[\"rd-start\"].unshift({\n         token : \"keyword\",\n         regex : \"@(?!@)[^ ]*\"\n      });\n      this.$rules[\"rd-start\"].unshift({\n         token : \"comment\",\n         regex : \"@@\"\n      });\n      this.$rules[\"rd-start\"].push({\n         token : \"comment\",\n         regex : \"[^%\\\\\\\\[({\\\\])}]+\"\n      });\n   };\n\n   oop.inherits(RHighlightRules, TextHighlightRules);\n\n   exports.RHighlightRules = RHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/r\",[\"require\",\"exports\",\"module\",\"ace/range\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/text_highlight_rules\",\"ace/mode/r_highlight_rules\",\"ace/mode/matching_brace_outdent\"], function(acequire, exports, module) {\n   \"use strict\";\n\n   var Range = acequire(\"../range\").Range;\n   var oop = acequire(\"../lib/oop\");\n   var TextMode = acequire(\"./text\").Mode;\n   var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n   var RHighlightRules = acequire(\"./r_highlight_rules\").RHighlightRules;\n   var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n   var Mode = function(){\n      this.HighlightRules = RHighlightRules;\n      this.$outdent = new MatchingBraceOutdent();\n      this.$behaviour = this.$defaultBehaviour;\n   };\n   oop.inherits(Mode, TextMode);\n\n   (function()\n   {\n      this.lineCommentStart = \"#\";\n       this.$id = \"ace/mode/r\";\n   }).call(Mode.prototype);\n   exports.Mode = Mode;\n});\n"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","TexHighlightRules","textClass","this","$rules","token","regex","next","inherits","lang","RHighlightRules","keywords","arrayToMap","split","buildinConstants","onMatch","value","match","rdRules","getRules","i","length","addRules","unshift","push","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","column","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","TextMode","Mode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","lineCommentStart","$id"],"sourceRoot":""}