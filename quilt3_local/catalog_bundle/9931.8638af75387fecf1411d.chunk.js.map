{"version":3,"file":"9931.8638af75387fecf1411d.chunk.js","mappings":"iGAAAA,IAAIC,OAAO,uCAAuC,CAAC,UAAU,UAAU,SAAS,cAAc,kCAAkC,SAASC,EAAUC,EAASC,GAC5J,aAEA,IAAIC,EAAMH,EAAS,cACfI,EAAqBJ,EAAS,0BAA0BI,mBAExDC,EAA2B,WAC3BC,KAAKC,OAAS,CACV,MAAU,CAAE,CACRC,MAAQ,kBACRC,MAAQ,eAEZJ,EAAyBK,aACzB,CACIC,aAAe,cACfC,iBAAiB,IAG7B,EAEAT,EAAIU,SAASR,EAA0BD,GAEvCC,EAAyBK,WAAa,SAASI,GAC3C,MAAO,CACHN,MAAQ,+BACRC,MAAQ,gCAEhB,EAEAJ,EAAyBU,aAAe,SAASD,GAC7C,MAAO,CACHN,MAAQ,cACRC,MAAQ,gBACRO,KAAQF,EAEhB,EAEAT,EAAyBY,WAAa,SAAUH,GAC5C,MAAO,CACHN,MAAQ,cACRC,MAAQ,SACRO,KAAQF,EAEhB,EAGAb,EAAQI,yBAA2BA,CAEnC,IAEAP,IAAIC,OAAO,gCAAgC,CAAC,UAAU,UAAU,SAAS,cAAc,uCAAuC,kCAAkC,SAASC,EAAUC,EAASC,GAC5L,aAEA,IAAIC,EAAMH,EAAS,cAEfK,EAA2BL,EAAS,iCAAiCK,yBACrED,EAAqBJ,EAAS,0BAA0BI,mBAExDc,EAAqB,WAErB,IAQIC,EAAgBb,KAAKc,oBAAoB,CACzC,oBAAqB,OACrB,QAVW,4TAWX,oBAPmB,mBAQpB,cAEHd,KAAKC,OAAS,CACV,MAAU,CACN,CACIC,MAAQ,UACRC,MAAQ,aAEZJ,EAAyBU,aAAa,aACtC,CACIP,MAAQ,UACRC,MAAQ,SACRO,KAAO,WACR,CACCR,MAAQ,gBACRC,MAAQ,gFACT,CACCD,MAAQ,SACRC,MAAQ,sCACT,CACCD,MAAQ,SACRC,MAAQ,sCACT,CACCD,MAAQ,mBACRC,MAAQ,wBACT,CACCD,MAAQ,mBACRC,MAAQ,mDACT,CACCD,MAAQ,4BACRC,MAAQ,qBACT,CACCD,MAAQW,EACRV,MAAQ,+BACT,CACCD,MAAQ,mBACRC,MAAQ,4KACT,CACCD,MAAQ,uBACRC,MAAQ,uBACT,CACCD,MAAQ,eACRC,MAAQ,UACT,CACCD,MAAQ,eACRC,MAAQ,YACT,CACCD,MAAQ,OACRC,MAAQ,SAGhB,QAAY,CACR,CACID,MAAQ,UACRC,MAAQ,SACRO,KAAO,SACR,CACCL,aAAe,aAK3BL,KAAKe,WAAWhB,EAA0B,OACtC,CAAEA,EAAyBY,WAAW,UAC9C,EAEAd,EAAIU,SAASK,EAAoBd,GAEjCH,EAAQiB,mBAAqBA,CAC7B,IAEApB,IAAIC,OAAO,kCAAkC,CAAC,UAAU,UAAU,SAAS,cAAc,SAASC,EAAUC,EAASC,GACrH,aAEA,IAAIoB,EAAQtB,EAAS,YAAYsB,MAE7BC,EAAuB,WAAY,GAEvC,WAEIjB,KAAKkB,aAAe,SAASC,EAAMC,GAC/B,QAAM,QAAQC,KAAKF,IAGZ,SAASE,KAAKD,EACzB,EAEApB,KAAKsB,YAAc,SAASC,EAAKC,GAC7B,IACIC,EADOF,EAAIG,QAAQF,GACNC,MAAM,YAEvB,IAAKA,EAAO,OAAO,EAEnB,IAAIE,EAASF,EAAM,GAAGG,OAClBC,EAAeN,EAAIO,oBAAoB,CAACN,IAAKA,EAAKG,OAAQA,IAE9D,IAAKE,GAAgBA,EAAaL,KAAOA,EAAK,OAAO,EAErD,IAAIO,EAAS/B,KAAKgC,WAAWT,EAAIG,QAAQG,EAAaL,MACtDD,EAAIU,QAAQ,IAAIjB,EAAMQ,EAAK,EAAGA,EAAKG,EAAO,GAAII,EAClD,EAEA/B,KAAKgC,WAAa,SAASb,GACvB,OAAOA,EAAKM,MAAM,QAAQ,EAC9B,CAEH,GAAES,KAAKjB,EAAqBkB,WAE7BxC,EAAQsB,qBAAuBA,CAC/B,IAEAzB,IAAIC,OAAO,0BAA0B,CAAC,UAAU,UAAU,SAAS,cAAc,YAAY,+BAA+B,SAASC,EAAUC,EAASC,GACxJ,aAEA,IAAIC,EAAMH,EAAS,iBACfsB,EAAQtB,EAAS,eAAesB,MAChCoB,EAAe1C,EAAS,eAAe2C,SAEvCA,EAAW1C,EAAQ0C,SAAW,SAASC,GACnCA,IACAtC,KAAKuC,mBAAqB,IAAIC,OAC1BxC,KAAKuC,mBAAmBE,OAAOR,QAAQ,YAAa,IAAMK,EAAa9B,QAE3ER,KAAK0C,kBAAoB,IAAIF,OACzBxC,KAAK0C,kBAAkBD,OAAOR,QAAQ,YAAa,IAAMK,EAAaK,MAGlF,EACA9C,EAAIU,SAAS8B,EAAUD,GAEvB,WAEIpC,KAAKuC,mBAAqB,mCAC1BvC,KAAK0C,kBAAoB,uCACzB1C,KAAK4C,yBAA0B,uBAC/B5C,KAAK6C,yBAA2B,2BAChC7C,KAAK8C,cAAgB,4BACrB9C,KAAK+C,mBAAqB/C,KAAKgD,cAC/BhD,KAAKgD,cAAgB,SAASC,EAASC,EAAW1B,GAC9C,IAAIL,EAAO8B,EAAQvB,QAAQF,GAE3B,GAAIxB,KAAK4C,yBAAyBvB,KAAKF,KAC9BnB,KAAK8C,cAAczB,KAAKF,KAAUnB,KAAK6C,yBAAyBxB,KAAKF,GACtE,MAAO,GAGf,IAAIgC,EAAKnD,KAAK+C,mBAAmBE,EAASC,EAAW1B,GAErD,OAAK2B,GAAMnD,KAAK8C,cAAczB,KAAKF,GACxB,QAEJgC,CACX,EAEAnD,KAAKoD,mBAAqB,SAASH,EAASC,EAAW1B,EAAK6B,GACxD,IA2BI5B,EA3BAN,EAAO8B,EAAQvB,QAAQF,GAE3B,GAAIxB,KAAK8C,cAAczB,KAAKF,GACxB,OAAOnB,KAAKsD,sBAAsBL,EAAS9B,EAAMK,GAGrD,GADIC,EAAQN,EAAKM,MAAMzB,KAAKuC,oBACjB,CACP,IAAIgB,EAAI9B,EAAM+B,MAEd,GAAI/B,EAAM,GACN,OAAOzB,KAAKyD,oBAAoBR,EAASxB,EAAM,GAAID,EAAK+B,GAE5D,IAAIG,EAAQT,EAAQU,oBAAoBnC,EAAK+B,EAAI9B,EAAM,GAAGG,OAAQ,GASlE,OAPI8B,IAAUA,EAAME,gBACZP,EACAK,EAAQ1D,KAAK6D,gBAAgBZ,EAASzB,GAClB,OAAb0B,IACPQ,EAAQ,OAGTA,CACX,CAEA,GAAkB,cAAdR,IAGAzB,EAAQN,EAAKM,MAAMzB,KAAK0C,oBACjB,CACHa,EAAI9B,EAAM+B,MAAQ/B,EAAM,GAAGG,OAE/B,OAAIH,EAAM,GACCzB,KAAK8D,oBAAoBb,EAASxB,EAAM,GAAID,EAAK+B,GAErDN,EAAQU,oBAAoBnC,EAAK+B,GAAI,EAChD,CACJ,EAEAvD,KAAK6D,gBAAkB,SAASZ,EAASzB,GAQrC,IAPA,IAAIL,EAAO8B,EAAQvB,QAAQF,GACvBuC,EAAc5C,EAAK6C,OAAO,MAC1BC,EAAWzC,EACX0C,EAAc/C,EAAKS,OAEnBuC,EADJ3C,GAAY,EAER4C,EAASnB,EAAQoB,cACZ7C,EAAM4C,GAAQ,CAEnB,IAAIrC,GADJZ,EAAO8B,EAAQvB,QAAQF,IACLwC,OAAO,MACzB,IAAgB,IAAZjC,EAAJ,CAEA,GAAKgC,EAAchC,EACf,MACJ,IAAIuC,EAAWtE,KAAKoD,mBAAmBH,EAAS,MAAOzB,GAEvD,GAAI8C,EAAU,CACV,GAAIA,EAAS9D,MAAMgB,KAAOyC,EACtB,MACG,GAAIK,EAASV,cAChBpC,EAAM8C,EAAS3B,IAAInB,SAChB,GAAIuC,GAAehC,EACtB,KAER,CACAoC,EAAS3C,CAdG,CAehB,CAEA,OAAO,IAAIR,EAAMiD,EAAUC,EAAaC,EAAQlB,EAAQvB,QAAQyC,GAAQvC,OAC5E,EACA5B,KAAKsD,sBAAwB,SAASL,EAAS9B,EAAMK,GAOjD,IANA,IAAI0C,EAAc/C,EAAK6C,OAAO,QAC1BI,EAASnB,EAAQoB,YACjBJ,EAAWzC,EAEX+C,EAAK,uCACLC,EAAQ,IACHhD,EAAM4C,GAAQ,CACnBjD,EAAO8B,EAAQvB,QAAQF,GACvB,IAAIiD,EAAIF,EAAGG,KAAKvD,GAChB,GAAKsD,IACDA,EAAE,GAAID,IACLA,KAEAA,GAAO,KAChB,CAGA,GADahD,EACAyC,EACT,OAAO,IAAIjD,EAAMiD,EAAUC,EAFlB1C,EAEuCL,EAAKS,OAE7D,CAEH,EAAEM,KAAKG,EAASF,UAEjB,IAEA3C,IAAIC,OAAO,gBAAgB,CAAC,UAAU,UAAU,SAAS,cAAc,gBAAgB,gCAAgC,kCAAkC,4BAA4B,4BAA4B,SAASC,EAAUC,EAASC,GAC7O,aAEA,IAAIC,EAAMH,EAAS,cACfiF,EAAWjF,EAAS,UAAUkF,KAC9BhE,EAAqBlB,EAAS,0BAA0BkB,mBACxDK,EAAuBvB,EAAS,4BAA4BuB,qBAC5D4D,EAAkBnF,EAAS,sBAAsBmF,gBACjDC,EAAiBpF,EAAS,oBAAoB2C,SAE9CuC,EAAO,WACP5E,KAAK+E,eAAiBnE,EAEtBZ,KAAKgF,SAAW,IAAI/D,EACpBjB,KAAKiF,WAAa,IAAIJ,EACtB7E,KAAKkF,aAAe,IAAIJ,CAC5B,EACAjF,EAAIU,SAASqE,EAAMD,GAEnB,WACI3E,KAAKmF,iBAAmB,KACxBnF,KAAKoF,aAAe,CAAC5E,MAAO,KAAMmC,IAAK,MAEvC3C,KAAKqF,kBAAoB,SAASC,EAAOnE,EAAMoE,GAC3C,IAAIxD,EAAS/B,KAAKgC,WAAWb,GAGzBqE,EADgBxF,KAAKyF,eAAeC,cAAcvE,EAAMmE,GACjCE,OAE3B,GAAIA,EAAO5D,QAA0C,WAAhC4D,EAAOA,EAAO5D,OAAO,GAAG+D,KACzC,OAAO5D,EAGE,SAATuD,IACYnE,EAAKM,MAAM,qBAEnBM,GAAUwD,IAIlB,OAAOxD,CACX,EAEA/B,KAAKkB,aAAe,SAASoE,EAAOnE,EAAMC,GACtC,OAAOpB,KAAKgF,SAAS9D,aAAaC,EAAMC,EAC5C,EAEApB,KAAKsB,YAAc,SAASgE,EAAO/D,EAAKC,GACpCxB,KAAKgF,SAAS1D,YAAYC,EAAKC,EACnC,EAEAxB,KAAK4F,IAAM,eACd,EAAE1D,KAAK0C,EAAKzC,WAEbxC,EAAQiF,KAAOA,CACf,G","sources":["webpack://quilt-navigator/./node_modules/brace/mode/haxe.js"],"sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/haxe_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\n\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar HaxeHighlightRules = function() {\n\n    var keywords = (\n        \"break|case|cast|catch|class|continue|default|else|enum|extends|for|function|if|implements|import|in|inline|interface|new|override|package|private|public|return|static|super|switch|this|throw|trace|try|typedef|untyped|var|while|Array|Void|Bool|Int|UInt|Float|Dynamic|String|List|Hash|IntHash|Error|Unknown|Type|Std\"\n    );\n\n    var buildinConstants = (\n        \"null|true|false\"\n    );\n\n    var keywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"this\",\n        \"keyword\": keywords,\n        \"constant.language\": buildinConstants\n    }, \"identifier\");\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string.regexp\",\n                regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\n            }, {\n                token : \"string\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // single line\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false)\\\\b\"\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token : \"keyword.operator\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({<]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}>]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken : \"comment\"\n            }\n        ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n};\n\noop.inherits(HaxeHighlightRules, TextHighlightRules);\n\nexports.HaxeHighlightRules = HaxeHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/haxe\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haxe_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar HaxeHighlightRules = acequire(\"./haxe_highlight_rules\").HaxeHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HaxeHighlightRules;\n    \n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/haxe\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","HaxeHighlightRules","keywordMapper","createKeywordMapper","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokens","getTokenizer","getLineTokens","type","$id"],"sourceRoot":""}