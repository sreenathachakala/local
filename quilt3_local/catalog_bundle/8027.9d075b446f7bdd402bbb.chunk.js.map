{"version":3,"file":"8027.9d075b446f7bdd402bbb.chunk.js","mappings":"iGAAAA,IAAIC,OAAO,0BAA0B,CAAC,UAAU,UAAU,SAAS,cAAc,6BAA6B,cAAc,SAASC,EAAUC,EAASC,GACxJ,aAEA,IAAIC,EAAMH,EAAS,iBACfI,EAAeJ,EAAS,eAAeK,SACvCC,EAAQN,EAAS,eAAeM,MAEhCD,EAAWJ,EAAQI,SAAW,WAAY,EAC9CF,EAAII,SAASF,EAAUD,GAEvB,WAEII,KAAKC,mBAAqB,SAASC,EAASC,EAAWC,GACnD,IAAIC,EAAQL,KAAKM,iBAAiBJ,EAASE,GAC3C,GAAIC,EACA,OAAOA,EAEX,IAAIE,EAAK,KACLC,EAAON,EAAQO,QAAQL,GACvBM,EAAaF,EAAKG,OAAOJ,GAC7B,IAAmB,GAAfG,GAAwC,KAApBF,EAAKE,GAA7B,CAQA,IALA,IAAIE,EAAcJ,EAAKK,OACnBC,EAASZ,EAAQa,YACjBC,EAAWZ,EACXa,EAASb,IAEJA,EAAMU,GAAQ,CAEnB,IAAII,GADJV,EAAON,EAAQO,QAAQL,IACNO,OAAOJ,GAExB,IAAc,GAAVW,EAAJ,CAGA,GAAmB,KAAfV,EAAKU,GACL,MAEJD,EAASb,CALG,CAMhB,CAEA,GAAIa,EAASD,EAAU,CACnB,IAAIG,EAAYjB,EAAQO,QAAQQ,GAAQJ,OACxC,OAAO,IAAIf,EAAMkB,EAAUJ,EAAaK,EAAQE,EACpD,CAvBU,CAwBd,EACAnB,KAAKoB,cAAgB,SAASlB,EAASC,EAAWC,GAC9C,IAAII,EAAON,EAAQO,QAAQL,GACvBiB,EAASb,EAAKG,OAAO,MACrBW,EAAOpB,EAAQO,QAAQL,EAAM,GAC7BmB,EAAOrB,EAAQO,QAAQL,EAAM,GAC7BoB,EAAaD,EAAKZ,OAAO,MACzBc,EAAaH,EAAKX,OAAO,MAE7B,IAAe,GAAXU,EAEA,OADAnB,EAAQwB,YAAYtB,EAAM,IAAmB,GAAdoB,GAAmBA,EAAaC,EAAa,QAAU,GAC/E,GAEX,IAAmB,GAAfD,GACA,GAAIH,GAAUI,GAA8B,KAAhBjB,EAAKa,IAAkC,KAAhBC,EAAKD,GAGpD,OAFAnB,EAAQwB,YAAYtB,EAAM,GAAK,GAC/BF,EAAQwB,YAAYtB,EAAM,GAAK,GACxB,aAER,GAAIoB,GAAcH,GAA0B,KAAhBb,EAAKa,IAAkC,KAAhBE,EAAKF,KACb,GAA1CnB,EAAQO,QAAQL,EAAM,GAAGO,OAAO,MAGhC,OAFAT,EAAQwB,YAAYtB,EAAM,GAAK,QAC/BF,EAAQwB,YAAYtB,EAAM,GAAK,GACxB,GASf,OAJIF,EAAQwB,YAAYtB,EAAM,IADZ,GAAdoB,GAAmBA,EAAaH,EACD,QAEA,GAE/BA,EAASI,EACF,QAEA,EACf,CAEH,EAAEE,KAAK9B,EAAS+B,UAEjB,IAEAtC,IAAIC,OAAO,iCAAiC,CAAC,UAAU,UAAU,SAAS,cAAc,kCAAkC,SAASC,EAAUC,EAASC,GACtJ,aAEA,IAAIC,EAAMH,EAAS,cACfqC,EAAqBrC,EAAS,0BAA0BqC,mBAExDC,EAAsB,WACtB9B,KAAK+B,OAAS,CACV,MAAU,CACN,CACIC,MAAQ,aACRC,MAAQ,KACRX,KAAO,OAEX,CACIU,MAAQ,aACRC,MAAQ,IACRX,KAAO,QAGf,IAAQ,CACJ,CACIU,MAAQ,WACRC,MAAQ,OAEZ,CACID,MAAQ,aACRC,MAAQ,IACRX,KAAO,SACT,CACEU,MAAQ,mBACRC,MAAQ,IACRX,KAAQ,UAGhB,MAAU,CACN,CACIU,MAAQ,mBACRC,MAAQ,IACRX,KAAQ,SAEZ,CACIU,MAAQ,SACRC,MAAQ,SAKxB,EAEAtC,EAAII,SAAS+B,EAAqBD,GAElCpC,EAAQqC,oBAAsBA,CAC9B,IAEAxC,IAAIC,OAAO,iBAAiB,CAAC,UAAU,UAAU,SAAS,cAAc,gBAAgB,0BAA0B,mCAAmC,SAASC,EAAUC,EAASC,GACjL,aACA,IAAIC,EAAMH,EAAS,cACf0C,EAAW1C,EAAS,UAAU2C,KAC9BtC,EAAWL,EAAS,oBAAoBK,SACxCiC,EAAsBtC,EAAS,2BAA2BsC,oBAC1DK,EAAO,WACPnC,KAAKoC,eAAiBN,EACtB9B,KAAKqC,aAAe,IAAIxC,EACxBG,KAAKsC,WAAatC,KAAKuC,iBAC3B,EACA5C,EAAII,SAASoC,EAAMD,GACnB,WAEIlC,KAAKwC,IAAM,gBACd,EAAEb,KAAKQ,EAAKP,WACbnC,EAAQ0C,KAAOA,CACf,G","sources":["webpack://quilt-navigator/./node_modules/brace/mode/space.js"],"sourcesContent":["ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/space_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SpaceHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"empty_line\",\n                regex : / */,\n                next : \"key\"\n            },\n            {\n                token : \"empty_line\",\n                regex : /$/,\n                next : \"key\"\n            }\n        ],\n        \"key\" : [\n            {\n                token : \"variable\",\n                regex : /\\S+/\n            },\n            {\n                token : \"empty_line\",\n                regex : /$/,\n                next : \"start\"\n            },{\n                token : \"keyword.operator\",\n                regex : / /,\n                next  : \"value\"\n            }\n        ],\n        \"value\" : [\n            {\n                token : \"keyword.operator\",\n                regex : /$/,\n                next  : \"start\"\n            },\n            {\n                token : \"string\",\n                regex : /[^$]/\n            }\n        ]\n    };\n    \n};\n\noop.inherits(SpaceHighlightRules, TextHighlightRules);\n\nexports.SpaceHighlightRules = SpaceHighlightRules;\n});\n\nace.define(\"ace/mode/space\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/folding/coffee\",\"ace/mode/space_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar FoldMode = acequire(\"./folding/coffee\").FoldMode;\nvar SpaceHighlightRules = acequire(\"./space_highlight_rules\").SpaceHighlightRules;\nvar Mode = function() {\n    this.HighlightRules = SpaceHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function() {\n    \n    this.$id = \"ace/mode/space\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n});\n"],"names":["ace","define","acequire","exports","module","oop","BaseFoldMode","FoldMode","Range","inherits","this","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","next","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextHighlightRules","SpaceHighlightRules","$rules","token","regex","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","$id"],"sourceRoot":""}