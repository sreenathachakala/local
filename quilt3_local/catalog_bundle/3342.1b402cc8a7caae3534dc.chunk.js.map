{"version":3,"file":"3342.1b402cc8a7caae3534dc.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./app/components/Dialog/Confirm.tsx","webpack://quilt-navigator/./app/components/Dialog/Prompt.tsx","webpack://quilt-navigator/./app/components/Preview/renderers/Perspective/index.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/QuerySelect.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/requests/storage.ts","webpack://quilt-navigator/./app/containers/Bucket/Queries/requests/athena.ts","webpack://quilt-navigator/./app/containers/Bucket/Queries/requests/queriesConfig.ts","webpack://quilt-navigator/./app/containers/Bucket/Queries/requests/query.ts","webpack://quilt-navigator/./app/containers/Bucket/Queries/requests/search.ts","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/Components.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/Results.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/CreatePackage.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/Database.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/QueryEditor.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/History.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/Workgroups.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Athena/Athena.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/QueryResult.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/QueryViewer.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/ElasticSearch.tsx","webpack://quilt-navigator/./app/containers/Bucket/Queries/Queries.tsx"],"sourcesContent":["import * as R from 'ramda'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\n\ninterface DialogProps {\n  children: React.ReactNode\n  onSubmit: (value: boolean) => void\n  open: boolean\n  title: string\n}\n\nfunction Dialog({ children, onSubmit, open, title }: DialogProps) {\n  const handleCancel = React.useCallback(() => onSubmit(false), [onSubmit])\n  const handleSubmit = React.useCallback(() => onSubmit(true), [onSubmit])\n  return (\n    <M.Dialog open={open} fullWidth maxWidth=\"sm\">\n      <M.DialogTitle>{title}</M.DialogTitle>\n      <M.DialogContent>{children}</M.DialogContent>\n      <M.DialogActions>\n        <M.Button onClick={handleCancel} color=\"primary\" variant=\"outlined\">\n          Cancel\n        </M.Button>\n        <M.Button color=\"primary\" onClick={handleSubmit} variant=\"contained\">\n          Submit\n        </M.Button>\n      </M.DialogActions>\n    </M.Dialog>\n  )\n}\n\ninterface PromptProps {\n  onSubmit: (value: boolean) => void\n  title: string\n}\n\nexport function useConfirm({ title, onSubmit }: PromptProps) {\n  const [key, setKey] = React.useState(0)\n  const [opened, setOpened] = React.useState(false)\n  const open = React.useCallback(() => {\n    setKey(R.inc)\n    setOpened(true)\n  }, [])\n  const close = React.useCallback(() => setOpened(false), [])\n  const handleSubmit = React.useCallback(\n    (value: boolean) => {\n      onSubmit(value)\n      close()\n    },\n    [close, onSubmit],\n  )\n  const render = React.useCallback(\n    (children: React.ReactNode) => (\n      <Dialog\n        {...{\n          children,\n          key,\n          onSubmit: handleSubmit,\n          open: opened,\n          title,\n        }}\n      />\n    ),\n    [key, handleSubmit, opened, title],\n  )\n  return React.useMemo(\n    () => ({\n      close,\n      open,\n      render,\n    }),\n    [close, open, render],\n  )\n}\n","import * as R from 'ramda'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\ninterface DialogProps {\n  initialValue?: string\n  onCancel: () => void\n  onSubmit: (value: string) => void\n  open: boolean\n  title: string\n  validate: (value: string) => Error | undefined\n}\n\nfunction Dialog({\n  initialValue,\n  open,\n  onCancel,\n  onSubmit,\n  title,\n  validate,\n}: DialogProps) {\n  const [value, setValue] = React.useState(initialValue || '')\n  const [submitted, setSubmitted] = React.useState(false)\n  const error = React.useMemo(() => validate(value), [validate, value])\n  const handleChange = React.useCallback((event) => setValue(event.target.value), [])\n  const handleSubmit = React.useCallback(\n    (event) => {\n      event.preventDefault()\n      setSubmitted(true)\n      if (!error) onSubmit(value)\n    },\n    [error, onSubmit, value],\n  )\n  return (\n    <M.Dialog open={open} fullWidth maxWidth=\"sm\">\n      <form onSubmit={handleSubmit}>\n        <M.DialogTitle>{title}</M.DialogTitle>\n        <M.DialogContent>\n          <M.TextField\n            autoFocus\n            fullWidth\n            margin=\"dense\"\n            onChange={handleChange}\n            value={value}\n          />\n          {!!error && !!submitted && (\n            <Lab.Alert severity=\"error\">{error.message}</Lab.Alert>\n          )}\n        </M.DialogContent>\n        <M.DialogActions>\n          <M.Button onClick={onCancel} color=\"primary\" variant=\"outlined\">\n            Cancel\n          </M.Button>\n          <M.Button\n            color=\"primary\"\n            disabled={!!error && !!submitted}\n            onClick={handleSubmit}\n            variant=\"contained\"\n          >\n            Submit\n          </M.Button>\n        </M.DialogActions>\n      </form>\n    </M.Dialog>\n  )\n}\n\ninterface PromptProps {\n  initialValue?: string\n  onSubmit: (value: string) => void\n  title: string\n  validate: (value: string) => Error | undefined\n}\n\nexport function usePrompt({ initialValue, title, onSubmit, validate }: PromptProps) {\n  const [key, setKey] = React.useState(0)\n  const [opened, setOpened] = React.useState(false)\n  const open = React.useCallback(() => {\n    setKey(R.inc)\n    setOpened(true)\n  }, [])\n  const close = React.useCallback(() => setOpened(false), [])\n  const handleSubmit = React.useCallback(\n    (value: string) => {\n      onSubmit(value)\n      close()\n    },\n    [close, onSubmit],\n  )\n  const render = React.useCallback(\n    () => (\n      <Dialog\n        {...{\n          initialValue,\n          key,\n          onCancel: close,\n          onSubmit: handleSubmit,\n          open: opened,\n          title,\n          validate,\n        }}\n      />\n    ),\n    [initialValue, key, close, handleSubmit, opened, title, validate],\n  )\n  return React.useMemo(\n    () => ({\n      close,\n      open,\n      render,\n    }),\n    [close, open, render],\n  )\n}\n","import * as React from 'react'\n\nimport Placeholder from 'components/Placeholder'\nimport * as RT from 'utils/reactTools'\n\nimport type { PerspectiveProps } from './Perspective'\n\nconst SuspensePlaceholder = () => <Placeholder color=\"text.secondary\" />\n\nconst Perspective = RT.mkLazy(() => import('./Perspective'), SuspensePlaceholder)\n\nexport default (data: PerspectiveProps, props: PerspectiveProps) => (\n  <Perspective {...data} {...props} />\n)\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\ninterface AbstractQuery {\n  key: string\n  name: string\n  description?: string\n}\n\ninterface QuerySelectProps<T> {\n  onChange: (value: T | null) => void\n  onLoadMore?: () => void\n  queries: T[]\n  value: T | null\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  header: {\n    margin: t.spacing(0, 0, 1),\n  },\n  selectWrapper: {\n    width: '100%',\n  },\n  select: {\n    padding: t.spacing(1),\n  },\n}))\n\nconst LOAD_MORE = 'load-more'\n\nexport default function QuerySelect<T>({\n  queries,\n  onChange,\n  onLoadMore,\n  value,\n}: QuerySelectProps<T & AbstractQuery>) {\n  const classes = useStyles()\n\n  const handleChange = React.useCallback(\n    (event) => {\n      if (event.target.value === LOAD_MORE && onLoadMore) {\n        onLoadMore()\n      } else {\n        onChange(queries.find((query) => query.key === event.target.value) || null)\n      }\n    },\n    [queries, onChange, onLoadMore],\n  )\n\n  return (\n    <M.Paper>\n      <M.FormControl className={classes.selectWrapper}>\n        <M.Select\n          classes={{ root: classes.select }}\n          disabled={!queries.length}\n          onChange={handleChange}\n          value={value?.key || 'none'}\n        >\n          <M.MenuItem disabled value=\"none\">\n            <M.ListItemText>Custom</M.ListItemText>\n          </M.MenuItem>\n          {queries.map((query) => (\n            <M.MenuItem key={query.key} value={query.key}>\n              <M.ListItemText primary={query.name} secondary={query.description} />\n            </M.MenuItem>\n          ))}\n          {!!onLoadMore && (\n            <M.MenuItem key={LOAD_MORE} value={LOAD_MORE}>\n              <M.ListItemText>\n                <em>Load more</em>\n              </M.ListItemText>\n            </M.MenuItem>\n          )}\n        </M.Select>\n      </M.FormControl>\n    </M.Paper>\n  )\n}\n","import mkStorage from 'utils/storage'\n\nconst ATHENA_WORKGROUP_KEY = 'ATHENA_WORKGROUP'\n\nconst storage = mkStorage({ athenaWorkgroup: ATHENA_WORKGROUP_KEY })\n\nexport const getWorkgroup = () => storage.get('athenaWorkgroup')\n\nexport const setWorkgroup = (workgroup: string) =>\n  storage.set('athenaWorkgroup', workgroup)\n","import Athena from 'aws-sdk/clients/athena'\nimport * as React from 'react'\n\nimport * as AWS from 'utils/AWS'\nimport * as BucketPreferences from 'utils/BucketPreferences'\nimport { useData } from 'utils/Data'\nimport wait from 'utils/wait'\n\nimport * as storage from './storage'\n\nimport { AsyncData } from './requests'\n\n// TODO: rename to requests.athena.Query\nexport interface AthenaQuery {\n  body: string\n  description?: string\n  key: string\n  name: string\n}\n\nexport interface QueriesResponse {\n  list: AthenaQuery[]\n  next?: string\n}\n\ninterface QueriesArgs {\n  athena: Athena\n  prev: QueriesResponse | null\n  workgroup: string\n}\n\nfunction parseNamedQuery(query: Athena.NamedQuery): AthenaQuery {\n  return {\n    body: query.QueryString,\n    description: query.Description,\n    key: query.NamedQueryId!,\n    name: query.Name,\n  }\n}\n\nasync function fetchQueries({\n  athena,\n  prev,\n  workgroup,\n}: QueriesArgs): Promise<QueriesResponse> {\n  try {\n    const queryIdsOutput = await athena\n      ?.listNamedQueries({ WorkGroup: workgroup, NextToken: prev?.next })\n      .promise()\n    if (!queryIdsOutput.NamedQueryIds || !queryIdsOutput.NamedQueryIds.length)\n      return {\n        list: prev?.list || [],\n        next: queryIdsOutput.NextToken,\n      }\n\n    const queriesOutput = await athena\n      ?.batchGetNamedQuery({\n        NamedQueryIds: queryIdsOutput.NamedQueryIds,\n      })\n      .promise()\n    const parsed = (queriesOutput.NamedQueries || []).map(parseNamedQuery)\n    const list = (prev?.list || []).concat(parsed)\n    return {\n      list,\n      next: queryIdsOutput.NextToken,\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Unable to fetch')\n    // eslint-disable-next-line no-console\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useQueries(\n  workgroup: string,\n  prev: QueriesResponse | null,\n): AsyncData<QueriesResponse> {\n  const athena = AWS.Athena.use()\n  return useData(fetchQueries, { athena, prev, workgroup }, { noAutoFetch: !workgroup })\n}\n\nexport type Workgroup = string\n\nfunction getDefaultWorkgroup(\n  list: Workgroup[],\n  preferences?: BucketPreferences.AthenaPreferences,\n): Workgroup {\n  const workgroupFromConfig = preferences?.defaultWorkgroup\n  if (workgroupFromConfig && list.includes(workgroupFromConfig)) {\n    return workgroupFromConfig\n  }\n  return storage.getWorkgroup() || list[0]\n}\n\ninterface WorkgroupArgs {\n  athena: Athena\n  workgroup: Workgroup\n}\n\nasync function fetchWorkgroup({\n  athena,\n  workgroup,\n}: WorkgroupArgs): Promise<Workgroup | null> {\n  try {\n    const workgroupOutput = await athena.getWorkGroup({ WorkGroup: workgroup }).promise()\n    if (\n      workgroupOutput?.WorkGroup?.Configuration?.ResultConfiguration?.OutputLocation &&\n      workgroupOutput?.WorkGroup?.State === 'ENABLED' &&\n      workgroupOutput?.WorkGroup?.Name\n    ) {\n      return workgroupOutput.WorkGroup.Name\n    }\n    return null\n  } catch (error) {\n    return null\n  }\n}\n\nexport interface WorkgroupsResponse {\n  defaultWorkgroup: Workgroup\n  list: Workgroup[]\n  next?: string\n}\n\ninterface WorkgroupsArgs {\n  athena: Athena\n  prev: WorkgroupsResponse | null\n  preferences?: BucketPreferences.AthenaPreferences\n}\n\nasync function fetchWorkgroups({\n  athena,\n  prev,\n  preferences,\n}: WorkgroupsArgs): Promise<WorkgroupsResponse> {\n  try {\n    const workgroupsOutput = await athena\n      .listWorkGroups({ NextToken: prev?.next })\n      .promise()\n    const parsed = (workgroupsOutput.WorkGroups || []).map(\n      ({ Name }) => Name || 'Unknown',\n    )\n    const available = (\n      await Promise.all(parsed.map((workgroup) => fetchWorkgroup({ athena, workgroup })))\n    ).filter(Boolean)\n    const list = (prev?.list || []).concat(available as Workgroup[])\n    return {\n      defaultWorkgroup: getDefaultWorkgroup(list, preferences),\n      list,\n      next: workgroupsOutput.NextToken,\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Unable to fetch')\n    // eslint-disable-next-line no-console\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useWorkgroups(\n  prev: WorkgroupsResponse | null,\n): AsyncData<WorkgroupsResponse> {\n  const athena = AWS.Athena.use()\n  const { preferences } = BucketPreferences.use()\n  return useData(fetchWorkgroups, { athena, prev, preferences: preferences?.ui.athena })\n}\n\nexport interface QueryExecution {\n  catalog?: string\n  completed?: Date\n  created?: Date\n  db?: string\n  error?: Error\n  id?: string\n  outputBucket?: string\n  query?: string\n  status?: string // 'QUEUED' | 'RUNNING' | 'SUCCEEDED' | 'FAILED' | 'CANCELLED'\n  workgroup?: Athena.WorkGroupName\n}\n\nexport interface QueryExecutionsResponse {\n  list: QueryExecution[]\n  next?: string\n}\n\ninterface QueryExecutionsArgs {\n  athena: Athena\n  prev: QueryExecutionsResponse | null\n  workgroup: string\n}\n\nfunction parseQueryExecution(queryExecution: Athena.QueryExecution): QueryExecution {\n  return {\n    catalog: queryExecution?.QueryExecutionContext?.Catalog,\n    completed: queryExecution?.Status?.CompletionDateTime,\n    created: queryExecution?.Status?.SubmissionDateTime,\n    db: queryExecution?.QueryExecutionContext?.Database,\n    id: queryExecution?.QueryExecutionId,\n    outputBucket: queryExecution?.ResultConfiguration?.OutputLocation,\n    query: queryExecution?.Query,\n    status: queryExecution?.Status?.State,\n    workgroup: queryExecution?.WorkGroup,\n  }\n}\n\nfunction parseQueryExecutionError(\n  error: Athena.UnprocessedQueryExecutionId,\n): QueryExecution {\n  return {\n    error: new Error(error?.ErrorMessage || 'Unknown'),\n    id: error?.QueryExecutionId,\n  }\n}\n\nasync function fetchQueryExecutions({\n  athena,\n  prev,\n  workgroup,\n}: QueryExecutionsArgs): Promise<QueryExecutionsResponse> {\n  try {\n    const executionIdsOutput = await athena\n      .listQueryExecutions({ WorkGroup: workgroup, NextToken: prev?.next })\n      .promise()\n\n    const ids = executionIdsOutput.QueryExecutionIds\n    if (!ids || !ids.length)\n      return {\n        list: [],\n        next: executionIdsOutput.NextToken,\n      }\n\n    const executionsOutput = await athena\n      ?.batchGetQueryExecution({ QueryExecutionIds: ids })\n      .promise()\n    const parsed = (executionsOutput.QueryExecutions || [])\n      .map(parseQueryExecution)\n      .concat(\n        (executionsOutput.UnprocessedQueryExecutionIds || []).map(\n          parseQueryExecutionError,\n        ),\n      )\n    const list = (prev?.list || []).concat(parsed)\n    return {\n      list,\n      next: executionIdsOutput.NextToken,\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Unable to fetch')\n    // eslint-disable-next-line no-console\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useQueryExecutions(\n  workgroup: string,\n  prev: QueryExecutionsResponse | null,\n): AsyncData<QueryExecutionsResponse> {\n  const athena = AWS.Athena.use()\n  return useData(\n    fetchQueryExecutions,\n    { athena, prev, workgroup },\n    { noAutoFetch: !workgroup },\n  )\n}\n\nasync function waitForQueryStatus(\n  athena: Athena,\n  QueryExecutionId: string,\n): Promise<QueryExecution> {\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // NOTE: await is used to intentionally pause loop and make requests in series\n    // eslint-disable-next-line no-await-in-loop\n    const statusData = await athena.getQueryExecution({ QueryExecutionId }).promise()\n    const status = statusData?.QueryExecution?.Status?.State\n    const parsed = statusData?.QueryExecution\n      ? parseQueryExecution(statusData?.QueryExecution)\n      : {\n          id: QueryExecutionId,\n        }\n    if (status === 'FAILED' || status === 'CANCELLED') {\n      const reason = statusData?.QueryExecution?.Status?.StateChangeReason || ''\n      return {\n        ...parsed,\n        error: new Error(`${status}: ${reason}`),\n      }\n    }\n\n    if (!status) {\n      return {\n        ...parsed,\n        error: new Error('Unknown query execution status'),\n      }\n    }\n\n    if (status === 'SUCCEEDED') {\n      return parsed\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    await wait(1000)\n  }\n}\n\nexport type QueryResultsValue = Athena.datumString\n\nexport interface QueryResultsColumnInfo {\n  name: Athena.String\n  type: Athena.String\n}\n\nexport type QueryResultsColumns = QueryResultsColumnInfo[]\ntype Row = QueryResultsValue[]\nexport type QueryResultsRows = Row[]\n\nexport interface QueryResultsResponse {\n  columns: QueryResultsColumns\n  next?: string\n  queryExecution: QueryExecution\n  rows: QueryResultsRows\n}\n\ntype ManifestKey = 'hash' | 'logical_key' | 'meta' | 'physical_keys' | 'size'\n\nexport interface QueryManifestsResponse extends QueryResultsResponse {\n  rows: [ManifestKey[], ...string[][]]\n}\n\ninterface QueryResultsArgs {\n  athena: Athena\n  queryExecutionId: string\n  prev: QueryResultsResponse | null\n}\n\nconst emptyRow: Row = []\nconst emptyList: QueryResultsRows = []\nconst emptyColumns: QueryResultsColumns = []\n\nasync function fetchQueryResults({\n  athena,\n  queryExecutionId,\n  prev,\n}: QueryResultsArgs): Promise<QueryResultsResponse> {\n  const queryExecution = await waitForQueryStatus(athena, queryExecutionId)\n  if (queryExecution.error) {\n    return {\n      rows: emptyList,\n      columns: emptyColumns,\n      queryExecution,\n    }\n  }\n\n  try {\n    const queryResultsOutput = await athena\n      .getQueryResults({\n        QueryExecutionId: queryExecutionId,\n        NextToken: prev?.next,\n      })\n      .promise()\n    const parsed =\n      queryResultsOutput.ResultSet?.Rows?.map(\n        (row) => row?.Data?.map((item) => item?.VarCharValue || '') || emptyRow,\n      ) || emptyList\n    const rows = [...(prev?.rows || emptyList), ...parsed]\n    const columns =\n      queryResultsOutput.ResultSet?.ResultSetMetadata?.ColumnInfo?.map(\n        ({ Name, Type }) => ({\n          name: Name,\n          type: Type,\n        }),\n      ) || emptyColumns\n    const isHeadColumns = columns.every(({ name }, index) => name === rows[0][index])\n    return {\n      rows: isHeadColumns ? rows.slice(1) : rows,\n      columns,\n      next: queryResultsOutput.NextToken,\n      queryExecution,\n    }\n  } catch (error) {\n    return {\n      rows: emptyList,\n      columns: emptyColumns,\n      queryExecution: {\n        ...queryExecution,\n        error: error instanceof Error ? error : new Error(`${error}`),\n      },\n    }\n  }\n}\n\nexport function useQueryResults(\n  queryExecutionId: string | null,\n  prev: QueryResultsResponse | null,\n): AsyncData<QueryResultsResponse> {\n  const athena = AWS.Athena.use()\n  return useData(\n    fetchQueryResults,\n    { athena, prev, queryExecutionId },\n    { noAutoFetch: !queryExecutionId },\n  )\n}\n\nexport interface QueryRunResponse {\n  id: string\n}\n\nexport type CatalogName = string\nexport interface CatalogNamesResponse {\n  list: CatalogName[]\n  next?: string\n}\n\ninterface CatalogNamesArgs {\n  athena: Athena\n  prev?: CatalogNamesResponse\n}\n\nasync function fetchCatalogNames({\n  athena,\n  prev,\n}: CatalogNamesArgs): Promise<CatalogNamesResponse> {\n  const catalogsOutput = await athena\n    ?.listDataCatalogs({ NextToken: prev?.next })\n    .promise()\n  const list =\n    catalogsOutput?.DataCatalogsSummary?.map(\n      ({ CatalogName }) => CatalogName || 'Unknown',\n    ) || []\n  return {\n    list: (prev?.list || []).concat(list),\n    next: catalogsOutput.NextToken,\n  }\n}\n\nexport function useCatalogNames(\n  prev: CatalogNamesResponse | null,\n): AsyncData<CatalogNamesResponse> {\n  const athena = AWS.Athena.use()\n  return useData(fetchCatalogNames, { athena, prev })\n}\n\nexport type Database = string\nexport interface DatabasesResponse {\n  list: CatalogName[]\n  next?: string\n}\n\ninterface DatabasesArgs {\n  athena: Athena\n  catalogName: CatalogName\n  prev: DatabasesResponse\n}\n\nasync function fetchDatabases({\n  athena,\n  catalogName,\n  prev,\n}: DatabasesArgs): Promise<DatabasesResponse> {\n  const databasesOutput = await athena\n    ?.listDatabases({ CatalogName: catalogName, NextToken: prev?.next })\n    .promise()\n  // TODO: add `Description` besides `Name`\n  const list = databasesOutput?.DatabaseList?.map(({ Name }) => Name || 'Unknown') || []\n  return {\n    list: (prev?.list || []).concat(list),\n    next: databasesOutput.NextToken,\n  }\n}\n\nexport function useDatabases(\n  catalogName: CatalogName | null,\n  prev: DatabasesResponse | null,\n): AsyncData<DatabasesResponse> {\n  const athena = AWS.Athena.use()\n  return useData(\n    fetchDatabases,\n    { athena, catalogName, prev },\n    { noAutoFetch: !catalogName },\n  )\n}\n\nexport interface ExecutionContext {\n  catalogName: CatalogName\n  database: Database\n}\n\ninterface RunQueryArgs {\n  athena: Athena\n  queryBody: string\n  workgroup: string\n  executionContext: ExecutionContext | null\n}\n\nexport async function runQuery({\n  athena,\n  queryBody,\n  workgroup,\n  executionContext,\n}: RunQueryArgs): Promise<QueryRunResponse> {\n  try {\n    const options: Athena.Types.StartQueryExecutionInput = {\n      QueryString: queryBody,\n      ResultConfiguration: {\n        EncryptionConfiguration: {\n          EncryptionOption: 'SSE_S3',\n        },\n      },\n      WorkGroup: workgroup,\n    }\n    if (executionContext) {\n      options.QueryExecutionContext = {\n        Catalog: executionContext.catalogName,\n        Database: executionContext.database,\n      }\n    }\n    const { QueryExecutionId } = await athena.startQueryExecution(options).promise()\n    if (!QueryExecutionId) throw new Error('No execution id')\n    return {\n      id: QueryExecutionId,\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('Unable to fetch')\n    // eslint-disable-next-line no-console\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useQueryRun(workgroup: string) {\n  const athena = AWS.Athena.use()\n  return React.useCallback(\n    (queryBody: string, executionContext: ExecutionContext | null) => {\n      if (!athena) return Promise.reject(new Error('No Athena available'))\n      return runQuery({ athena, queryBody, workgroup, executionContext })\n    },\n    [athena, workgroup],\n  )\n}\n","import * as R from 'ramda'\n\nimport * as quiltConfigs from 'constants/quiltConfigs'\nimport * as errors from 'containers/Bucket/errors'\nimport * as requests from 'containers/Bucket/requests'\nimport * as AWS from 'utils/AWS'\nimport { useData } from 'utils/Data'\nimport * as YAML from 'utils/yaml'\n\nimport { AsyncData } from './requests'\n\n// TODO: rename to requests.es.Query\nexport interface Query {\n  description?: string\n  key: string\n  name: string\n  url: string\n}\n\ntype QueryResponse = Omit<Query, 'key'>\n\ninterface ConfigResponse {\n  queries: Record<string, QueryResponse>\n  version: string\n}\n\ninterface QueriesConfigArgs {\n  bucket: string\n  s3: $TSFixMe\n}\n\nfunction isValidConfig(data: unknown): boolean {\n  return R.is(Object, data) && R.is(Object, (data as { queries: unknown }).queries)\n}\n\nfunction parseQueriesList(result: unknown) {\n  if (!isValidConfig(result)) return []\n\n  return Object.entries((result as ConfigResponse).queries).map(([key, query]) => ({\n    ...query,\n    key,\n  }))\n}\n\nexport const queriesConfig = async ({\n  s3,\n  bucket,\n}: QueriesConfigArgs): Promise<Query[] | null> => {\n  try {\n    const response = await requests.fetchFile({\n      s3,\n      bucket,\n      path: quiltConfigs.esQueries,\n    })\n    // TODO: validate config with JSON Schema\n    return parseQueriesList(YAML.parse(response.Body.toString('utf-8')))\n  } catch (e) {\n    if (e instanceof errors.FileNotFound || e instanceof errors.VersionNotFound) return []\n\n    // eslint-disable-next-line no-console\n    console.log('Unable to fetch')\n    // eslint-disable-next-line no-console\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useQueriesConfig(bucket: string): AsyncData<Query[]> {\n  const s3 = AWS.S3.use()\n  return useData(queriesConfig, { s3, bucket })\n}\n","import * as errors from 'containers/Bucket/errors'\nimport * as requests from 'containers/Bucket/requests'\nimport * as AWS from 'utils/AWS'\nimport { useData } from 'utils/Data'\nimport * as s3paths from 'utils/s3paths'\n\nimport { AsyncData } from './requests'\n\ninterface QueryArgs {\n  queryUrl: string\n  s3: $TSFixMe\n}\n\nexport type ElasticSearchQuery = {\n  body: {\n    query: object\n  }\n  filter_path?: string\n  index: string\n  size?: number\n  from?: number\n} | null\n\nexport const query = async ({ s3, queryUrl }: QueryArgs): Promise<ElasticSearchQuery> => {\n  const { bucket, key, version } = s3paths.parseS3Url(queryUrl)\n  try {\n    const response = await requests.fetchFile({ s3, bucket, path: key, version })\n    return JSON.parse(response.Body.toString('utf-8'))\n  } catch (e) {\n    if (e instanceof errors.FileNotFound || e instanceof errors.VersionNotFound)\n      return null\n\n    // eslint-disable-next-line no-console\n    console.log('Unable to fetch')\n    // eslint-disable-next-line no-console\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useQuery(queryUrl: string): AsyncData<ElasticSearchQuery> {\n  const s3 = AWS.S3.use()\n  return useData(query, { s3, queryUrl }, { noAutoFetch: !queryUrl })\n}\n","import * as errors from 'containers/Bucket/errors'\nimport * as APIConnector from 'utils/APIConnector'\nimport { useData } from 'utils/Data'\nimport mkSearch from 'utils/mkSearch'\n\nimport { ElasticSearchQuery } from './query'\nimport { AsyncData } from './requests'\n\ninterface SearchArgs {\n  req: $TSFixMe\n  query: ElasticSearchQuery | string\n}\n\nexport type ElasticSearchResults = object | null\n\ntype ElasticSearchRequestData = {\n  action: 'freeform'\n  body: string\n  filter_path?: string\n  from?: number\n  index: string\n  size?: number\n}\n\nasync function search({ req, query }: SearchArgs): Promise<ElasticSearchResults> {\n  try {\n    if (typeof query === 'string' || !query) throw new Error('Query is incorrect')\n    const requestOptions: ElasticSearchRequestData = {\n      index: query.index,\n      filter_path: query.filter_path,\n      action: 'freeform',\n      body: JSON.stringify(query.body),\n    }\n    if (query.size) requestOptions.size = query.size\n    if (query.from) requestOptions.from = query.size\n    const qs = mkSearch(requestOptions)\n    return req(`/search${qs}`)\n  } catch (e) {\n    if (e instanceof errors.FileNotFound || e instanceof errors.VersionNotFound)\n      return null\n\n    // eslint-disable-next-line no-console\n    console.log('Unable to fetch')\n    // eslint-disable-next-line no-console\n    console.error(e)\n    throw e\n  }\n}\n\nexport function useSearch(\n  query: ElasticSearchQuery | string,\n): AsyncData<ElasticSearchResults> {\n  const req = APIConnector.use()\n  return useData(search, { req, query }, { noAutoFetch: !query })\n}\n","import cx from 'classnames'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport * as Sentry from 'utils/Sentry'\n\nconst useSectionStyles = M.makeStyles((t) => ({\n  header: {\n    margin: t.spacing(0, 0, 1),\n  },\n}))\n\ninterface SectionProps {\n  children: React.ReactNode\n  className?: string\n  empty?: React.ReactNode\n  title: string\n}\n\nexport function Section({ className, empty, title, children }: SectionProps) {\n  const classes = useSectionStyles()\n  if (!children && empty)\n    return <M.Typography className={cx(classes.header, className)}>{empty}</M.Typography>\n  return (\n    <div className={className}>\n      <M.Typography className={classes.header}>{title}</M.Typography>\n      {children}\n    </div>\n  )\n}\n\ninterface AlertProps {\n  error: Error\n  title: string\n}\n\nexport function Alert({ error, title }: AlertProps) {\n  const sentry = Sentry.use()\n\n  React.useEffect(() => {\n    sentry('captureException', error)\n  }, [error, sentry])\n\n  return (\n    <Lab.Alert severity=\"error\">\n      <Lab.AlertTitle>{title}</Lab.AlertTitle>\n      {error.message}\n    </Lab.Alert>\n  )\n}\n\nexport function makeAsyncDataErrorHandler(title: string) {\n  return (error: Error) => <Alert error={error} title={title} />\n}\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nimport Perspective from 'components/Preview/renderers/Perspective'\n\nimport * as requests from '../requests'\n\nfunction Empty() {\n  return (\n    <M.Paper>\n      <M.Box p={3} textAlign=\"center\">\n        <M.Typography variant=\"h6\">No results for this query</M.Typography>\n        <M.Typography>\n          Select another query execution or execute another query\n        </M.Typography>\n      </M.Box>\n    </M.Paper>\n  )\n}\n\nconst useResultsStyles = M.makeStyles((t) => ({\n  root: {\n    padding: t.spacing(2),\n  },\n}))\n\ninterface ResultsProps {\n  className?: string\n  columns: requests.athena.QueryResultsColumns\n  onLoadMore?: () => void\n  rows: requests.athena.QueryResultsRows\n}\n\nexport default function Results({ className, columns, onLoadMore, rows }: ResultsProps) {\n  const classes = useResultsStyles()\n  const data = React.useMemo(\n    () =>\n      rows.map((row) =>\n        row.reduce(\n          (memo, item, index) => ({\n            ...memo,\n            [columns[index]?.name || 'Unknown']: item,\n          }),\n          {},\n        ),\n      ),\n    [columns, rows],\n  )\n\n  if (!data.length) return <Empty />\n\n  return (\n    <M.Paper className={classes.root}>\n      <Perspective\n        className={className}\n        data={data}\n        onLoadMore={onLoadMore}\n        truncated={!!onLoadMore}\n      />\n    </M.Paper>\n  )\n}\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nimport * as Dialog from 'components/Dialog'\nimport * as AddToPackage from 'containers/AddToPackage'\nimport { usePackageCreationDialog } from 'containers/Bucket/PackageDialog/PackageCreationForm'\nimport type * as Model from 'model'\nimport * as s3paths from 'utils/s3paths'\n\nimport * as requests from '../requests'\n\nimport Results from './Results'\n\ntype ManifestKey = 'hash' | 'logical_key' | 'meta' | 'physical_keys' | 'size'\ntype ManifestEntryStringified = Record<ManifestKey, string>\n\nfunction SeeDocsForCreatingPackage() {\n  return (\n    <M.Tooltip title=\"You can create packages from the query results. Click to see the docs.\">\n      <a href=\"https://docs.quiltdata.com/advanced/athena\" target=\"_blank\">\n        <M.IconButton>\n          <M.Icon>help_outline</M.Icon>\n        </M.IconButton>\n      </a>\n    </M.Tooltip>\n  )\n}\n\nfunction doQueryResultsContainManifestEntries(\n  queryResults: requests.athena.QueryResultsResponse,\n): queryResults is requests.athena.QueryManifestsResponse {\n  const columnNames = queryResults.columns.map(({ name }) => name)\n  return (\n    columnNames.includes('size') &&\n    columnNames.includes('physical_keys') &&\n    columnNames.includes('logical_key')\n  )\n}\n\n// TODO: this name doesn't make sense without `parseManifestEntryStringified`\n//       merge it into one\nfunction rowToManifestEntryStringified(\n  row: string[],\n  columns: requests.athena.QueryResultsColumns,\n): ManifestEntryStringified {\n  return row.reduce((acc, value, index) => {\n    if (!columns[index].name) return acc\n    return {\n      ...acc,\n      [columns[index].name]: value,\n    }\n  }, {} as ManifestEntryStringified)\n}\n\nfunction parseManifestEntryStringified(entry: ManifestEntryStringified): {\n  [key: string]: Model.S3File\n} | null {\n  if (!entry.logical_key) return null\n  if (!entry.physical_keys) return null\n  try {\n    const handle = s3paths.parseS3Url(\n      entry.physical_keys.replace(/^\\[/, '').replace(/\\]$/, ''),\n    )\n    const sizeParsed = Number(entry.size)\n    const size = Number.isNaN(sizeParsed) ? 0 : sizeParsed\n    return {\n      [entry.logical_key]: {\n        ...handle,\n        size,\n      },\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e)\n    return null\n  }\n}\n\ninterface ParsedRows {\n  valid: Record<string, Model.S3File>\n  invalid: requests.athena.QueryResultsRows\n}\n\nfunction parseQueryResults(\n  queryResults: requests.athena.QueryManifestsResponse,\n): ParsedRows {\n  // TODO: use one reduce-loop\n  //       merge `rowToManifestEntryStringified` and `parseManifestEntryStringified` into one function\n  const manifestEntries: ManifestEntryStringified[] = queryResults.rows.reduce(\n    (memo, row) => memo.concat(rowToManifestEntryStringified(row, queryResults.columns)),\n    [] as ManifestEntryStringified[],\n  )\n  return manifestEntries.reduce(\n    (memo, entry, index) => {\n      const parsed = parseManifestEntryStringified(entry)\n      return parsed\n        ? // if entry is ok then add it to valid map, and invalid is pristine\n          {\n            valid: {\n              ...memo.valid,\n              ...parsed,\n            },\n            invalid: memo.invalid,\n          }\n        : // if no entry then add original data to list of invalid, and valid is pristine\n          {\n            valid: memo.valid,\n            invalid: [...memo.invalid, queryResults.rows[index]],\n          }\n    },\n    { valid: {}, invalid: [] } as ParsedRows,\n  )\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  results: {\n    'div&': {\n      // NOTE: increasing CSS specifity to overwrite\n      minHeight: t.spacing(30),\n    },\n  },\n}))\n\ninterface CreatePackageProps {\n  bucket: string\n  queryResults: requests.athena.QueryResultsResponse\n}\n\nexport default function CreatePackage({ bucket, queryResults }: CreatePackageProps) {\n  const classes = useStyles()\n  const [entries, setEntries] = React.useState<ParsedRows>({ valid: {}, invalid: [] })\n  const addToPackage = AddToPackage.use()\n  const createDialog = usePackageCreationDialog({\n    bucket,\n    delayHashing: true,\n    disableStateDisplay: true,\n  })\n  const handleConfirm = React.useCallback(\n    (ok: boolean) => {\n      if (!ok) return\n      addToPackage?.merge(entries.valid)\n      createDialog.open()\n    },\n    [addToPackage, entries, createDialog],\n  )\n  const confirm = Dialog.useConfirm({\n    title: 'These rows will be discarded. Confirm creating package?',\n    onSubmit: handleConfirm,\n  })\n  const onPackage = React.useCallback(() => {\n    if (!doQueryResultsContainManifestEntries(queryResults)) return\n\n    // TODO: make it lazy, and disable button\n    const parsed = parseQueryResults(queryResults)\n    setEntries(parsed)\n    if (parsed.invalid.length) {\n      confirm.open()\n    } else {\n      addToPackage?.merge(parsed.valid)\n      createDialog.open()\n    }\n  }, [addToPackage, confirm, createDialog, queryResults])\n\n  if (!doQueryResultsContainManifestEntries(queryResults)) {\n    return <SeeDocsForCreatingPackage />\n  }\n\n  return (\n    <>\n      {createDialog.render({\n        successTitle: 'Package created',\n        successRenderMessage: ({ packageLink }) => (\n          <>Package {packageLink} successfully created</>\n        ),\n        title: 'Create package',\n      })}\n      {confirm.render(\n        <Results\n          className={classes.results}\n          rows={entries.invalid}\n          columns={queryResults.columns}\n        />,\n      )}\n      <M.Button color=\"primary\" onClick={onPackage} size=\"small\" variant=\"outlined\">\n        Create package\n      </M.Button>\n    </>\n  )\n}\n","import cx from 'classnames'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport Skeleton from 'components/Skeleton'\n\nimport * as requests from '../requests'\n\ninterface SelectErrorProps {\n  error: Error\n}\n\nfunction SelectError({ error }: SelectErrorProps) {\n  return (\n    <Lab.Alert severity=\"error\">\n      <Lab.AlertTitle>{error.name}</Lab.AlertTitle>\n      {error.message}\n    </Lab.Alert>\n  )\n}\n\nfunction SelectSkeleton() {\n  return <Skeleton height={32} animate />\n}\n\nconst LOAD_MORE = '__load-more__'\n\ninterface Response {\n  list: string[]\n  next?: string\n}\n\nconst useSelectStyles = M.makeStyles({\n  root: {\n    width: '100%',\n  },\n})\n\ninterface SelectProps {\n  data: Response\n  label: string\n  onChange: (value: string) => void\n  onLoadMore: (prev: Response) => void\n}\n\nfunction Select({ data, label, onChange, onLoadMore }: SelectProps) {\n  const classes = useSelectStyles()\n  const handleChange = React.useCallback(\n    (event) => {\n      const { value } = event.target\n      if (value === LOAD_MORE) {\n        onLoadMore(data)\n      } else {\n        onChange(value)\n      }\n    },\n    [data, onLoadMore, onChange],\n  )\n\n  return (\n    <M.FormControl className={classes.root}>\n      <M.InputLabel>{label}</M.InputLabel>\n      <M.Select onChange={handleChange}>\n        {data.list.map((value) => (\n          <M.MenuItem value={value}>{value}</M.MenuItem>\n        ))}\n        {data.next && <M.MenuItem value={LOAD_MORE}>Load more</M.MenuItem>}\n      </M.Select>\n    </M.FormControl>\n  )\n}\n\ninterface SelectCatalogNameProps {\n  onChange: (catalogName: string) => void\n}\n\nfunction SelectCatalogName({ onChange }: SelectCatalogNameProps) {\n  const [prev, setPrev] = React.useState<requests.athena.CatalogNamesResponse | null>(\n    null,\n  )\n  const data = requests.athena.useCatalogNames(prev)\n  return data.case({\n    Ok: (response) => (\n      <Select\n        data={response}\n        label=\"Data catalog\"\n        onChange={onChange}\n        onLoadMore={setPrev}\n      />\n    ),\n    Err: (error) => <SelectError error={error} />,\n    _: () => <SelectSkeleton />,\n  })\n}\n\ninterface SelectDatabaseProps {\n  catalogName: requests.athena.CatalogName | null\n  onChange: (database: requests.athena.Database) => void\n}\n\nfunction SelectDatabase({ catalogName, onChange }: SelectDatabaseProps) {\n  const [prev, setPrev] = React.useState<requests.athena.DatabasesResponse | null>(null)\n  const data = requests.athena.useDatabases(catalogName, prev)\n  return data.case({\n    Ok: (response) => (\n      <Select data={response} label=\"Database\" onChange={onChange} onLoadMore={setPrev} />\n    ),\n    Err: (error) => <SelectError error={error} />,\n    _: () => <SelectSkeleton />,\n  })\n}\n\nconst useDialogStyles = M.makeStyles((t) => ({\n  select: {\n    width: '100%',\n    '& + &': {\n      marginTop: t.spacing(2),\n    },\n  },\n}))\n\ninterface DialogProps {\n  initialValue: requests.athena.ExecutionContext | null\n  onChange: (value: requests.athena.ExecutionContext) => void\n  onClose: () => void\n  open: boolean\n}\n\nfunction Dialog({ initialValue, open, onChange, onClose }: DialogProps) {\n  const classes = useDialogStyles()\n  const [catalogName, setCatalogName] =\n    React.useState<requests.athena.CatalogName | null>(initialValue?.catalogName || null)\n  const [database, setDatabase] = React.useState<requests.athena.Database | null>(\n    initialValue?.database || null,\n  )\n  const handleSubmit = React.useCallback(() => {\n    if (!catalogName || !database) return\n    onChange({ catalogName, database })\n    onClose()\n  }, [catalogName, database, onChange, onClose])\n  return (\n    <M.Dialog open={open} onClose={onClose} fullWidth maxWidth=\"sm\">\n      <M.DialogTitle>Select data catalog and database</M.DialogTitle>\n      <M.DialogContent>\n        <div className={classes.select}>\n          <SelectCatalogName onChange={setCatalogName} />\n        </div>\n        {catalogName && (\n          <div className={classes.select}>\n            <SelectDatabase catalogName={catalogName} onChange={setDatabase} />\n          </div>\n        )}\n      </M.DialogContent>\n      <M.DialogActions>\n        <M.Button color=\"primary\" variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </M.Button>\n        <M.Button\n          color=\"primary\"\n          disabled={!catalogName || !database}\n          onClick={handleSubmit}\n          variant=\"contained\"\n        >\n          Submit\n        </M.Button>\n      </M.DialogActions>\n    </M.Dialog>\n  )\n}\n\nconst useChangeButtonStyles = M.makeStyles((t) => ({\n  root: {\n    alignItems: 'center',\n    display: 'flex',\n  },\n  button: {\n    marginLeft: t.spacing(1),\n  },\n}))\n\ninterface ChangeButtonProps {\n  className?: string\n  database?: requests.athena.Database\n  onClick: () => void\n}\n\nfunction ChangeButton({ className, database, onClick }: ChangeButtonProps) {\n  const classes = useChangeButtonStyles()\n  return (\n    <M.Typography className={cx(classes.root, className)} variant=\"body2\">\n      Use {database ? <strong>{database}</strong> : 'default'} database or\n      <M.Button\n        className={classes.button}\n        color=\"primary\"\n        onClick={onClick}\n        size=\"small\"\n        variant=\"outlined\"\n      >\n        {database ? 'change' : 'set'} database\n      </M.Button>\n    </M.Typography>\n  )\n}\n\ninterface DatabaseProps {\n  className?: string\n  value: requests.athena.ExecutionContext | null\n  onChange: (value: requests.athena.ExecutionContext) => void\n}\n\nexport default function Database({ className, value, onChange }: DatabaseProps) {\n  const [open, setOpen] = React.useState(false)\n  return (\n    <>\n      <Dialog\n        initialValue={value}\n        onChange={onChange}\n        onClose={() => setOpen(false)}\n        open={open}\n      />\n      <ChangeButton\n        className={className}\n        database={value?.database}\n        onClick={() => setOpen(true)}\n      />\n    </>\n  )\n}\n","import * as React from 'react'\nimport AceEditor from 'react-ace'\nimport * as RRDom from 'react-router-dom'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport 'ace-builds/src-noconflict/mode-sql'\nimport 'ace-builds/src-noconflict/theme-eclipse'\n\nimport Skeleton from 'components/Skeleton'\nimport * as Notifications from 'containers/Notifications'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport StyledLink from 'utils/StyledLink'\n\nimport * as requests from '../requests'\n\nimport Database from './Database'\n\nconst ATHENA_REF_INDEX = 'https://aws.amazon.com/athena/'\nconst ATHENA_REF_SQL =\n  'https://docs.aws.amazon.com/athena/latest/ug/ddl-sql-reference.html'\nconst ATHENA_REF_FUNCTIONS =\n  'https://docs.aws.amazon.com/athena/latest/ug/presto-functions.html'\n\nconst useStyles = M.makeStyles((t) => ({\n  editor: {\n    padding: t.spacing(1),\n  },\n  header: {\n    margin: t.spacing(0, 0, 1),\n  },\n}))\n\ninterface EditorFieldProps {\n  className?: string\n  onChange: (value: string) => void\n  query: string\n}\n\nfunction EditorField({ className, query, onChange }: EditorFieldProps) {\n  const classes = useStyles()\n\n  return (\n    <div className={className}>\n      <M.Typography className={classes.header} variant=\"body1\">\n        Query body\n      </M.Typography>\n      <M.Paper className={classes.editor}>\n        <AceEditor\n          editorProps={{ $blockScrolling: true }}\n          height=\"200px\"\n          mode=\"sql\"\n          onChange={onChange}\n          theme=\"eclipse\"\n          value={query}\n          width=\"100%\"\n        />\n      </M.Paper>\n      <M.FormHelperText>\n        Quilt uses AWS Athena SQL. Learn more:{' '}\n        <StyledLink href={ATHENA_REF_INDEX} target=\"_blank\">\n          Introduction\n        </StyledLink>\n        ,{' '}\n        <StyledLink href={ATHENA_REF_SQL} target=\"_blank\">\n          SQL Reference for Amazon Athena\n        </StyledLink>\n        ,{' '}\n        <StyledLink href={ATHENA_REF_FUNCTIONS} target=\"_blank\">\n          Functions in Amazon Athena\n        </StyledLink>\n        .\n      </M.FormHelperText>\n    </div>\n  )\n}\n\nfunction useQueryRun(\n  bucket: string,\n  workgroup: requests.athena.Workgroup,\n  queryExecutionId?: string,\n) {\n  const { urls } = NamedRoutes.use()\n  const history = RRDom.useHistory()\n  const [loading, setLoading] = React.useState(false)\n  const [error, setError] = React.useState<Error | undefined>()\n  const runQuery = requests.athena.useQueryRun(workgroup)\n  const { push: notify } = Notifications.use()\n  const goToExecution = React.useCallback(\n    (id: string) => history.push(urls.bucketAthenaExecution(bucket, workgroup, id)),\n    [bucket, history, urls, workgroup],\n  )\n  const onSubmit = React.useCallback(\n    async (value: string, executionContext: requests.athena.ExecutionContext | null) => {\n      setLoading(true)\n      setError(undefined)\n      try {\n        const { id } = await runQuery(value, executionContext)\n        if (id === queryExecutionId) notify('Query execution results remain unchanged')\n        setLoading(false)\n        goToExecution(id)\n      } catch (e) {\n        setLoading(false)\n        if (e instanceof Error) {\n          setError(e)\n        } else {\n          throw e\n        }\n      }\n    },\n    [goToExecution, notify, runQuery, queryExecutionId],\n  )\n  return React.useMemo(\n    () => ({\n      loading,\n      error,\n      onSubmit,\n    }),\n    [loading, error, onSubmit],\n  )\n}\n\nconst useFormSkeletonStyles = M.makeStyles((t) => ({\n  button: {\n    height: t.spacing(4),\n    marginTop: t.spacing(2),\n    width: t.spacing(14),\n  },\n  canvas: {\n    flexGrow: 1,\n    height: t.spacing(27),\n    marginLeft: t.spacing(1),\n  },\n  editor: {\n    display: 'flex',\n    marginTop: t.spacing(1),\n  },\n  helper: {\n    height: t.spacing(2),\n    marginTop: t.spacing(1),\n  },\n  numbers: {\n    height: t.spacing(27),\n    width: t.spacing(5),\n  },\n  title: {\n    height: t.spacing(3),\n    width: t.spacing(16),\n  },\n}))\n\ninterface FormSkeletonProps {\n  className: string\n}\n\nfunction FormSkeleton({ className }: FormSkeletonProps) {\n  const classes = useFormSkeletonStyles()\n  return (\n    <div className={className}>\n      <Skeleton className={classes.title} animate />\n      <div className={classes.editor}>\n        <Skeleton className={classes.numbers} animate />\n        <Skeleton className={classes.canvas} animate />\n      </div>\n      <Skeleton className={classes.helper} animate />\n      <Skeleton className={classes.button} animate />\n    </div>\n  )\n}\n\nexport { FormSkeleton as Skeleton }\n\nconst useFormStyles = M.makeStyles((t) => ({\n  actions: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    display: 'flex',\n    margin: t.spacing(2, 0),\n  },\n  error: {\n    margin: t.spacing(1, 0, 0),\n  },\n}))\n\ninterface FormProps {\n  bucket: string\n  className?: string\n  onChange: (value: string) => void\n  queryExecutionId?: string\n  value: string | null\n  workgroup: requests.athena.Workgroup\n}\n\nexport function Form({\n  bucket,\n  className,\n  onChange,\n  queryExecutionId,\n  value,\n  workgroup,\n}: FormProps) {\n  const classes = useFormStyles()\n  const [executionContext, setExecutionContext] =\n    React.useState<requests.athena.ExecutionContext | null>(null)\n\n  const { loading, error, onSubmit } = useQueryRun(bucket, workgroup, queryExecutionId)\n  const handleSubmit = React.useCallback(() => {\n    if (!value) return\n    onSubmit(value, executionContext)\n  }, [executionContext, onSubmit, value])\n\n  return (\n    <div className={className}>\n      <EditorField onChange={onChange} query={value || ''} />\n\n      {error && (\n        <Lab.Alert className={classes.error} severity=\"error\">\n          {error.message}\n        </Lab.Alert>\n      )}\n\n      <div className={classes.actions}>\n        <Database onChange={setExecutionContext} value={executionContext} />\n        <M.Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!value || loading}\n          onClick={handleSubmit}\n        >\n          Run query\n        </M.Button>\n      </div>\n    </div>\n  )\n}\n","import cx from 'classnames'\nimport * as dateFns from 'date-fns'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport * as Notifications from 'containers/Notifications'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport Link from 'utils/StyledLink'\nimport copyToClipboard from 'utils/clipboard'\nimport { trimCenter } from 'utils/string'\n\nimport * as requests from '../requests'\n\nconst useToggleButtonStyles = M.makeStyles({\n  root: {\n    transition: 'ease transform .15s',\n  },\n  expanded: {\n    transform: 'rotate(90deg)',\n  },\n})\n\ninterface ToggleButtonProps {\n  expanded: boolean\n  onClick: () => void\n}\n\nfunction ToggleButton({ expanded, onClick }: ToggleButtonProps) {\n  const classes = useToggleButtonStyles()\n  return (\n    <M.IconButton\n      onClick={onClick}\n      size=\"small\"\n      className={cx(classes.root, { [classes.expanded]: expanded })}\n    >\n      <M.Icon>keyboard_arrow_right</M.Icon>\n    </M.IconButton>\n  )\n}\n\nconst useDateStyles = M.makeStyles({\n  root: {\n    whiteSpace: 'nowrap',\n  },\n})\ninterface DateProps {\n  date?: Date\n}\n\nfunction Date({ date }: DateProps) {\n  const classes = useDateStyles()\n  const formatted = React.useMemo(\n    () => (date ? dateFns.format(date, 'MMM do, HH:mm:ss') : null),\n    [date],\n  )\n  return <span className={classes.root}>{formatted}</span>\n}\n\ninterface QueryDateCompletedProps {\n  bucket: string\n  queryExecution: requests.athena.QueryExecution\n  workgroup: requests.athena.Workgroup\n}\n\nfunction QueryDateCompleted({\n  bucket,\n  queryExecution,\n  workgroup,\n}: QueryDateCompletedProps) {\n  const { urls } = NamedRoutes.use()\n  if (queryExecution.status !== 'SUCCEEDED') {\n    return <Date date={queryExecution.completed} />\n  }\n  return (\n    <Link to={urls.bucketAthenaExecution(bucket, workgroup, queryExecution.id)}>\n      <Date date={queryExecution.completed} />\n    </Link>\n  )\n}\n\ninterface CopyButtonProps {\n  queryExecution: requests.athena.QueryExecution\n}\n\nfunction CopyButton({ queryExecution }: CopyButtonProps) {\n  const { push } = Notifications.use()\n  const handleCopy = React.useCallback(() => {\n    if (queryExecution.query) {\n      copyToClipboard(queryExecution.query)\n      push('Query has been copied to clipboard')\n    }\n  }, [push, queryExecution.query])\n  return (\n    <M.IconButton onClick={handleCopy} size=\"small\">\n      <M.Icon>content_copy</M.Icon>\n    </M.IconButton>\n  )\n}\n\nconst useFullQueryRowStyles = M.makeStyles((t) => ({\n  cell: {\n    paddingBottom: 0,\n    paddingTop: 0,\n  },\n  collapsed: {\n    borderBottom: 0,\n  },\n  query: {\n    maxHeight: t.spacing(30),\n    maxWidth: '100%',\n    overflow: 'auto',\n  },\n}))\n\ninterface FullQueryRowProps {\n  expanded: boolean\n  queryExecution: requests.athena.QueryExecution\n}\n\nfunction FullQueryRow({ expanded, queryExecution }: FullQueryRowProps) {\n  const classes = useFullQueryRowStyles()\n  return (\n    <M.TableRow>\n      <M.TableCell\n        padding=\"checkbox\"\n        className={cx(classes.cell, {\n          [classes.collapsed]: !expanded,\n        })}\n      >\n        {!!expanded && <CopyButton queryExecution={queryExecution} />}\n      </M.TableCell>\n      <M.TableCell\n        colSpan={4}\n        className={cx(classes.cell, { [classes.collapsed]: !expanded })}\n      >\n        <M.Collapse in={expanded}>\n          <pre className={classes.query}>{queryExecution.query}</pre>\n        </M.Collapse>\n      </M.TableCell>\n    </M.TableRow>\n  )\n}\n\ninterface ExecutionProps {\n  bucket: string\n  queryExecution: requests.athena.QueryExecution\n  workgroup: requests.athena.Workgroup\n}\n\nfunction Execution({ bucket, queryExecution, workgroup }: ExecutionProps) {\n  const [expanded, setExpanded] = React.useState(false)\n  const onToggle = React.useCallback(() => setExpanded(!expanded), [expanded])\n\n  if (queryExecution.error)\n    return (\n      <M.TableRow>\n        <M.TableCell colSpan={5}>\n          <Lab.Alert severity=\"warning\">{queryExecution.error.message}</Lab.Alert>\n        </M.TableCell>\n      </M.TableRow>\n    )\n\n  return (\n    <>\n      <M.TableRow>\n        <M.TableCell padding=\"checkbox\">\n          <ToggleButton expanded={expanded} onClick={onToggle} />\n        </M.TableCell>\n        <M.TableCell>{trimCenter(queryExecution.query || '', 50)}</M.TableCell>\n        <M.TableCell>\n          <abbr title={queryExecution.id}>{queryExecution.status || 'UNKNOWN'}</abbr>\n        </M.TableCell>\n        <M.TableCell>\n          <Date date={queryExecution.created} />\n        </M.TableCell>\n        <M.TableCell>\n          <QueryDateCompleted\n            queryExecution={queryExecution}\n            bucket={bucket}\n            workgroup={workgroup}\n          />\n        </M.TableCell>\n      </M.TableRow>\n      {queryExecution.query && (\n        <FullQueryRow expanded={expanded} queryExecution={queryExecution} />\n      )}\n    </>\n  )\n}\n\nfunction Empty() {\n  return (\n    <M.Box p={3} textAlign=\"center\">\n      <M.Typography variant=\"h6\">No executions for this workgroup</M.Typography>\n      <M.Typography>Select another workgroup or execute some query</M.Typography>\n    </M.Box>\n  )\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  queryCell: {\n    width: '40%',\n  },\n  actionCell: {\n    width: '24px',\n  },\n  header: {\n    margin: t.spacing(0, 0, 1),\n  },\n  footer: {\n    display: 'flex',\n    padding: t.spacing(1),\n  },\n  more: {\n    marginLeft: 'auto',\n  },\n  table: {\n    tableLayout: 'fixed',\n  },\n}))\n\ninterface HistoryProps {\n  bucket: string\n  executions: requests.athena.QueryExecution[]\n  onLoadMore?: () => void\n  workgroup: requests.athena.Workgroup\n}\n\nexport default function History({\n  bucket,\n  executions,\n  onLoadMore,\n  workgroup,\n}: HistoryProps) {\n  const classes = useStyles()\n\n  const pageSize = 10\n  const [page, setPage] = React.useState(1)\n\n  const handlePagination = React.useCallback(\n    (event, value) => {\n      setPage(value)\n    },\n    [setPage],\n  )\n\n  const rowsSorted = React.useMemo(\n    () =>\n      R.sort(\n        (a: requests.athena.QueryExecution, b: requests.athena.QueryExecution) =>\n          b?.completed && a?.completed\n            ? b.completed.valueOf() - a.completed.valueOf()\n            : -1,\n        executions,\n      ),\n    [executions],\n  )\n  const rowsPaginated = rowsSorted.slice(pageSize * (page - 1), pageSize * page)\n  const hasPagination = rowsSorted.length > rowsPaginated.length\n\n  return (\n    <M.TableContainer component={M.Paper}>\n      <M.Table size=\"small\" className={classes.table}>\n        <M.TableHead>\n          <M.TableRow>\n            <M.TableCell className={classes.actionCell} />\n            <M.TableCell className={classes.queryCell}>Query</M.TableCell>\n            <M.TableCell>Status</M.TableCell>\n            <M.TableCell>Date created</M.TableCell>\n            <M.TableCell>Date completed</M.TableCell>\n          </M.TableRow>\n        </M.TableHead>\n        <M.TableBody>\n          {rowsPaginated.map((queryExecution) => (\n            <Execution\n              bucket={bucket}\n              queryExecution={queryExecution}\n              key={queryExecution.id}\n              workgroup={workgroup}\n            />\n          ))}\n          {!executions.length && (\n            <M.TableRow>\n              <M.TableCell colSpan={5}>\n                <Empty />\n              </M.TableCell>\n            </M.TableRow>\n          )}\n        </M.TableBody>\n      </M.Table>\n\n      {(hasPagination || !!onLoadMore) && (\n        <div className={classes.footer}>\n          {hasPagination && (\n            <Lab.Pagination\n              count={Math.ceil(executions.length / pageSize)}\n              page={page}\n              size=\"small\"\n              onChange={handlePagination}\n            />\n          )}\n          {onLoadMore && (\n            <M.Button className={classes.more} size=\"small\" onClick={onLoadMore}>\n              Load more\n            </M.Button>\n          )}\n        </div>\n      )}\n    </M.TableContainer>\n  )\n}\n","import * as React from 'react'\nimport * as RRDom from 'react-router-dom'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport Skeleton from 'components/Skeleton'\nimport * as NamedRoutes from 'utils/NamedRoutes'\n\nimport * as requests from '../requests'\nimport * as storage from '../requests/storage'\n\nimport { Alert, Section } from './Components'\n\nconst useStyles = M.makeStyles((t) => ({\n  selectWrapper: {\n    width: '100%',\n  },\n  select: {\n    padding: t.spacing(1),\n  },\n}))\n\nconst LOAD_MORE = 'load-more'\n\ninterface WorkgroupSelectProps {\n  bucket: string\n  onLoadMore: (workgroups: requests.athena.WorkgroupsResponse) => void\n  value: requests.athena.Workgroup | null\n  workgroups: requests.athena.WorkgroupsResponse\n}\n\nfunction WorkgroupSelect({\n  bucket,\n  onLoadMore,\n  value,\n  workgroups,\n}: WorkgroupSelectProps) {\n  const classes = useStyles()\n  const { urls } = NamedRoutes.use()\n  const history = RRDom.useHistory()\n\n  const goToWorkgroup = React.useCallback(\n    (workgroup: string) => {\n      history.push(urls.bucketAthenaWorkgroup(bucket, workgroup))\n    },\n    [bucket, history, urls],\n  )\n\n  const handleChange = React.useCallback(\n    (event) => {\n      if (event.target.value === LOAD_MORE) {\n        onLoadMore(workgroups)\n      } else {\n        storage.setWorkgroup(event.target.value)\n        goToWorkgroup(event.target.value)\n      }\n    },\n    [goToWorkgroup, onLoadMore, workgroups],\n  )\n\n  return (\n    <M.Paper>\n      <M.FormControl className={classes.selectWrapper}>\n        <M.Select\n          classes={{ root: classes.select }}\n          disabled={!workgroups.list.length}\n          onChange={handleChange}\n          value={value || 'none'}\n        >\n          {workgroups.list.map((name) => (\n            <M.MenuItem key={name} value={name}>\n              <M.ListItemText>{name}</M.ListItemText>\n            </M.MenuItem>\n          ))}\n          {workgroups.next && (\n            <M.MenuItem key={LOAD_MORE} value={LOAD_MORE}>\n              <M.ListItemText>\n                <em>Load more</em>\n              </M.ListItemText>\n            </M.MenuItem>\n          )}\n        </M.Select>\n      </M.FormControl>\n    </M.Paper>\n  )\n}\n\ninterface WorkgroupsEmptyProps {\n  error?: Error\n}\n\nfunction WorkgroupsEmpty({ error }: WorkgroupsEmptyProps) {\n  return (\n    <>\n      {error ? (\n        <Alert title={error.name} error={error} />\n      ) : (\n        <Lab.Alert severity=\"info\">\n          <Lab.AlertTitle>\n            No Athena workgroup available. Please ask an AWS Administrator to create one\n            with an appropriate OutputLocation\n          </Lab.AlertTitle>\n        </Lab.Alert>\n      )}\n\n      {/* <M.Typography> // TODO: uncomment on docs deploy\n        Check{' '}\n        <StyledLink href={`${urls.docs}/catalog/queries#athena`}>\n          Athena Queries docs\n        </StyledLink>{' '}\n        on correct usage\n      </M.Typography> */}\n    </>\n  )\n}\n\ninterface RedirectToDefaultWorkgroupProps {\n  bucket: string\n  workgroups: requests.athena.WorkgroupsResponse\n}\n\nfunction RedirectToDefaultWorkgroup({\n  bucket,\n  workgroups,\n}: RedirectToDefaultWorkgroupProps) {\n  const { urls } = NamedRoutes.use()\n  return (\n    <RRDom.Redirect\n      to={urls.bucketAthenaWorkgroup(bucket, workgroups.defaultWorkgroup)}\n    />\n  )\n}\n\ninterface AthenaWorkgroupsProps {\n  bucket: string\n  workgroup: requests.athena.Workgroup | null\n}\n\nexport default function AthenaWorkgroups({ bucket, workgroup }: AthenaWorkgroupsProps) {\n  const [prev, setPrev] = React.useState<requests.athena.WorkgroupsResponse | null>(null)\n  const data = requests.athena.useWorkgroups(prev)\n  return data.case({\n    Ok: (workgroups) => {\n      if (!workgroup && workgroups.defaultWorkgroup)\n        return <RedirectToDefaultWorkgroup bucket={bucket} workgroups={workgroups} />\n      return (\n        <Section title=\"Select workgroup\" empty={<WorkgroupsEmpty />}>\n          {workgroups.list.length && (\n            <WorkgroupSelect\n              bucket={bucket}\n              onLoadMore={setPrev}\n              value={workgroup}\n              workgroups={workgroups}\n            />\n          )}\n        </Section>\n      )\n    },\n    Err: (error) => <WorkgroupsEmpty error={error} />,\n    _: () => (\n      <>\n        <Skeleton height={24} width={128} animate />\n        <Skeleton height={48} mt={1} animate />\n      </>\n    ),\n  })\n}\n","import cx from 'classnames'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport type { RouteComponentProps } from 'react-router'\nimport * as RRDom from 'react-router-dom'\nimport * as M from '@material-ui/core'\n\nimport Code from 'components/Code'\nimport Skeleton from 'components/Skeleton'\nimport * as NamedRoutes from 'utils/NamedRoutes'\n\nimport QuerySelect from '../QuerySelect'\nimport * as requests from '../requests'\n\nimport { Alert, Section, makeAsyncDataErrorHandler } from './Components'\nimport CreatePackage from './CreatePackage'\nimport * as QueryEditor from './QueryEditor'\nimport Results from './Results'\nimport History from './History'\nimport Workgroups from './Workgroups'\n\nconst useAthenaQueriesStyles = M.makeStyles((t) => ({\n  form: {\n    margin: t.spacing(3, 0, 0),\n  },\n}))\n\ninterface QueryConstructorProps {\n  bucket: string\n  className?: string\n  queryExecutionId?: string\n  initialValue?: string\n  workgroup: requests.athena.Workgroup\n}\n\nfunction QueryConstructor({\n  bucket,\n  queryExecutionId,\n  className,\n  initialValue,\n  workgroup,\n}: QueryConstructorProps) {\n  const [query, setQuery] = React.useState<requests.athena.AthenaQuery | null>(null)\n  const [prev, setPrev] = React.useState<requests.athena.QueriesResponse | null>(null)\n  const data = requests.athena.useQueries(workgroup, prev)\n  const classes = useAthenaQueriesStyles()\n  const [value, setValue] = React.useState<string | null>(initialValue || null)\n  const handleQueryBodyChange = React.useCallback((v: string) => {\n    setValue(v)\n    setQuery(null)\n  }, [])\n  const handleNamedQueryChange = React.useCallback(\n    (q: requests.athena.AthenaQuery | null) => {\n      setQuery(q)\n      setValue(q?.body || null)\n    },\n    [],\n  )\n  return (\n    <div className={className}>\n      {data.case({\n        Ok: (queries) => (\n          <Section title=\"Select query\" empty=\"There are no saved queries.\">\n            {!!queries.list.length && (\n              <QuerySelect<requests.athena.AthenaQuery | null>\n                onChange={handleNamedQueryChange}\n                onLoadMore={queries.next ? () => setPrev(queries) : undefined}\n                queries={queries.list}\n                value={query}\n              />\n            )}\n          </Section>\n        ),\n        Err: makeAsyncDataErrorHandler('Select query'),\n        _: () => (\n          <>\n            <Skeleton height={24} width={128} animate />\n            <Skeleton height={48} mt={1} animate />\n          </>\n        ),\n      })}\n      <QueryEditor.Form\n        bucket={bucket}\n        className={classes.form}\n        queryExecutionId={queryExecutionId}\n        workgroup={workgroup}\n        onChange={handleQueryBodyChange}\n        value={value}\n      />\n    </div>\n  )\n}\n\ninterface HistoryContainerProps {\n  bucket: string\n  className: string\n  workgroup: requests.athena.Workgroup\n}\n\nfunction HistoryContainer({ bucket, className, workgroup }: HistoryContainerProps) {\n  const [prev, setPrev] = React.useState<requests.athena.QueryExecutionsResponse | null>(\n    null,\n  )\n  const data = requests.athena.useQueryExecutions(workgroup, prev)\n  return (\n    <Section title=\"Query executions\" className={className}>\n      {data.case({\n        Ok: (executions) => (\n          <History\n            bucket={bucket}\n            executions={executions.list}\n            onLoadMore={executions.next ? () => setPrev(executions) : undefined}\n            workgroup={workgroup}\n          />\n        ),\n        Err: makeAsyncDataErrorHandler('Executions Data'),\n        _: () => <TableSkeleton size={4} />,\n      })}\n    </Section>\n  )\n}\n\nconst useResultsContainerStyles = M.makeStyles((t) => ({\n  breadcrumbs: {\n    margin: t.spacing(0, 0, 1),\n  },\n}))\n\ninterface ResultsContainerSkeletonProps {\n  bucket: string\n  className: string\n  queryExecutionId: string\n  workgroup: requests.athena.Workgroup\n}\n\nfunction ResultsContainerSkeleton({\n  bucket,\n  className,\n  queryExecutionId,\n  workgroup,\n}: ResultsContainerSkeletonProps) {\n  const classes = useResultsContainerStyles()\n  return (\n    <div className={className}>\n      <ResultsBreadcrumbs\n        bucket={bucket}\n        className={classes.breadcrumbs}\n        queryExecutionId={queryExecutionId}\n        workgroup={workgroup}\n      >\n        <Skeleton height={24} width={144} animate />\n      </ResultsBreadcrumbs>\n      <TableSkeleton size={10} />\n    </div>\n  )\n}\n\ninterface ResultsContainerProps {\n  bucket: string\n  className: string\n  queryExecutionId: string\n  queryResults: requests.athena.QueryResultsResponse\n  workgroup: requests.athena.Workgroup\n  onLoadMore?: () => void\n}\n\nfunction ResultsContainer({\n  bucket,\n  className,\n  queryExecutionId,\n  queryResults,\n  onLoadMore,\n  workgroup,\n}: ResultsContainerProps) {\n  const classes = useResultsContainerStyles()\n  return (\n    <div className={className}>\n      <ResultsBreadcrumbs\n        bucket={bucket}\n        className={classes.breadcrumbs}\n        queryExecutionId={queryExecutionId}\n        workgroup={workgroup}\n      >\n        {!!queryResults.rows.length && (\n          <CreatePackage bucket={bucket} queryResults={queryResults} />\n        )}\n      </ResultsBreadcrumbs>\n      {/* eslint-disable-next-line no-nested-ternary */}\n      {queryResults.rows.length ? (\n        <Results\n          rows={queryResults.rows}\n          columns={queryResults.columns}\n          onLoadMore={onLoadMore}\n        />\n      ) : // eslint-disable-next-line no-nested-ternary\n      queryResults.queryExecution.error ? (\n        <Alert error={queryResults.queryExecution.error} title=\"Query Results Data\" />\n      ) : queryResults.queryExecution ? (\n        <History\n          bucket={bucket}\n          executions={[queryResults.queryExecution]}\n          workgroup={workgroup}\n        />\n      ) : (\n        <Alert\n          error={new Error(\"Couldn't fetch query results\")}\n          title=\"Query Results Data\"\n        />\n      )}\n    </div>\n  )\n}\n\ninterface TableSkeletonProps {\n  size: number\n}\n\nfunction TableSkeleton({ size }: TableSkeletonProps) {\n  return (\n    <>\n      <Skeleton height={36} animate />\n      {R.range(0, size).map((key) => (\n        <Skeleton key={key} height={36} mt={1} animate />\n      ))}\n    </>\n  )\n}\n\ninterface QueryResults {\n  data: requests.AsyncData<requests.athena.QueryResultsResponse>\n  loadMore: (prev: requests.athena.QueryResultsResponse) => void\n}\n\nfunction useQueryResults(queryExecutionId?: string): QueryResults {\n  const [prev, setPrev] = React.useState<requests.athena.QueryResultsResponse | null>(\n    null,\n  )\n  const data = requests.athena.useQueryResults(queryExecutionId || null, prev)\n  return React.useMemo(() => ({ data, loadMore: setPrev }), [data])\n}\n\nconst useOverrideStyles = M.makeStyles({\n  li: {\n    '&::before': {\n      position: 'absolute', // Workaround for sanitize.css a11y styles\n    },\n  },\n  separator: {\n    alignItems: 'center',\n  },\n})\n\nconst useResultsBreadcrumbsStyles = M.makeStyles({\n  root: {\n    alignItems: 'center',\n    display: 'flex',\n  },\n  actions: {\n    marginLeft: 'auto',\n  },\n  breadcrumb: {\n    display: 'flex',\n  },\n  id: {\n    marginLeft: '6px',\n  },\n})\n\ninterface ResultsBreadcrumbsProps {\n  bucket: string\n  children: React.ReactNode\n  className?: string\n  queryExecutionId?: string\n  workgroup: requests.athena.Workgroup\n}\n\nfunction ResultsBreadcrumbs({\n  bucket,\n  children,\n  className,\n  queryExecutionId,\n  workgroup,\n}: ResultsBreadcrumbsProps) {\n  const classes = useResultsBreadcrumbsStyles()\n  const overrideClasses = useOverrideStyles()\n  const { urls } = NamedRoutes.use()\n  return (\n    <div className={cx(classes.root, className)}>\n      <M.Breadcrumbs classes={overrideClasses}>\n        <RRDom.Link\n          className={classes.breadcrumb}\n          to={urls.bucketAthenaWorkgroup(bucket, workgroup)}\n        >\n          Query Executions\n        </RRDom.Link>\n        <M.Typography className={classes.breadcrumb} color=\"textPrimary\">\n          Results for<Code className={classes.id}>{queryExecutionId}</Code>\n        </M.Typography>\n      </M.Breadcrumbs>\n\n      <div className={classes.actions}>{children}</div>\n    </div>\n  )\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  header: {\n    margin: t.spacing(0, 0, 2),\n  },\n  content: {\n    margin: t.spacing(1, 0, 0),\n  },\n  section: {\n    margin: t.spacing(3, 0, 0),\n  },\n}))\n\ninterface AthenaMainProps {\n  bucket: string\n  workgroup: string\n}\n\nfunction AthenaMain({ bucket, workgroup }: AthenaMainProps) {\n  const classes = useStyles()\n  return (\n    <div className={classes.content}>\n      <QueryConstructor\n        bucket={bucket}\n        className={classes.section}\n        key={workgroup}\n        workgroup={workgroup}\n      />\n\n      <HistoryContainer\n        bucket={bucket}\n        className={classes.section}\n        workgroup={workgroup}\n      />\n    </div>\n  )\n}\n\ninterface AthenaExecutionProps {\n  bucket: string\n  queryExecutionId: string\n  workgroup: string\n}\n\nfunction AthenaExecution({ bucket, workgroup, queryExecutionId }: AthenaExecutionProps) {\n  const classes = useStyles()\n  const results = useQueryResults(queryExecutionId)\n  return (\n    <div className={classes.content}>\n      {results.data.case({\n        Ok: (value) => (\n          <QueryConstructor\n            bucket={bucket}\n            className={classes.section}\n            queryExecutionId={queryExecutionId}\n            initialValue={value?.queryExecution?.query}\n            workgroup={workgroup}\n          />\n        ),\n        _: () => (\n          <>\n            <div className={classes.section}>\n              <Skeleton height={24} width={128} animate />\n              <Skeleton height={48} mt={1} animate mb={3} />\n            </div>\n            <QueryEditor.Skeleton className={classes.section} />\n          </>\n        ),\n      })}\n\n      {results.data.case({\n        Ok: (queryResults) => (\n          <ResultsContainer\n            bucket={bucket}\n            className={classes.section}\n            queryExecutionId={queryExecutionId}\n            queryResults={queryResults}\n            onLoadMore={\n              queryResults.next ? () => results.loadMore(queryResults) : undefined\n            }\n            workgroup={workgroup}\n          />\n        ),\n        _: () => (\n          <ResultsContainerSkeleton\n            bucket={bucket}\n            className={classes.section}\n            queryExecutionId={queryExecutionId}\n            workgroup={workgroup}\n          />\n        ),\n        Err: makeAsyncDataErrorHandler('Query Results Data'),\n      })}\n    </div>\n  )\n}\n\ninterface AthenaContainerProps\n  extends RouteComponentProps<{\n    bucket: string\n    queryExecutionId?: string\n    workgroup?: string\n  }> {}\n\nexport default function AthenaContainer({\n  match: {\n    params: { bucket, queryExecutionId, workgroup },\n  },\n}: AthenaContainerProps) {\n  const classes = useStyles()\n  return (\n    <>\n      <M.Typography className={classes.header} variant=\"h6\">\n        Athena SQL\n      </M.Typography>\n\n      <Workgroups bucket={bucket} workgroup={workgroup || null} />\n\n      {workgroup &&\n        (queryExecutionId ? (\n          <AthenaExecution\n            bucket={bucket}\n            queryExecutionId={queryExecutionId}\n            workgroup={workgroup}\n          />\n        ) : (\n          <AthenaMain bucket={bucket} workgroup={workgroup} />\n        ))}\n    </>\n  )\n}\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nimport JsonDisplay from 'components/JsonDisplay'\n\nimport * as requests from './requests'\n\nconst useStyles = M.makeStyles((t) => ({\n  content: {\n    margin: t.spacing(1, 0, 0),\n    maxWidth: '100%',\n    padding: t.spacing(3, 4, 4),\n  },\n}))\n\ninterface QueryResultProps {\n  results: requests.ElasticSearchResults\n}\n\nexport default function QueryResult({ results }: QueryResultProps) {\n  const classes = useStyles()\n\n  return (\n    <div>\n      <M.Typography variant=\"body1\">Search results</M.Typography>\n      <M.Paper className={classes.content}>\n        <JsonDisplay\n          className=\"\"\n          value={results}\n          name={undefined}\n          topLevel\n          defaultExpanded\n        />\n      </M.Paper>\n    </div>\n  )\n}\n","import Ajv from 'ajv'\nimport brace from 'brace'\nimport { JsonEditor as ReactJsonEditor } from 'jsoneditor-react'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport 'brace/mode/json'\nimport 'brace/theme/eclipse'\nimport 'jsoneditor-react/es/editor.min.css'\n\nimport schema from 'schemas/query.json'\nimport StyledLink from 'utils/StyledLink'\n\nimport * as requests from './requests'\n\nconst ES_V = '6.7'\nconst ES_REF = `https://www.elastic.co/guide/en/elasticsearch/reference/${ES_V}/search.html`\n\nconst ajv = new Ajv({ allErrors: true, verbose: true })\n\nconst useStyles = M.makeStyles((t) => ({\n  editor: {\n    padding: t.spacing(1),\n    '& .jsoneditor': {\n      border: 0,\n    },\n  },\n  header: {\n    margin: t.spacing(0, 0, 1),\n  },\n}))\n\nexport function parseJSON(str: string) {\n  try {\n    return JSON.parse(str)\n  } catch (e) {\n    return str\n  }\n}\n\nexport const stringifyJSON = (obj: object | string) => {\n  if (typeof obj === 'string') return obj\n  return JSON.stringify(obj, null, 2)\n}\n\ninterface QueryViewerProps {\n  className: string\n  onChange: (value: requests.ElasticSearchQuery) => void\n  onError: (error: Error | null) => void\n  query: requests.ElasticSearchQuery | string\n}\n\nexport default function QueryViewer({\n  className,\n  query,\n  onChange,\n  onError,\n}: QueryViewerProps) {\n  const classes = useStyles()\n\n  const t = M.useTheme()\n\n  const [error, setError] = React.useState<Error | null>(null)\n\n  const handleChange = React.useCallback(\n    (value: object) => onChange(value as requests.ElasticSearchQuery),\n    [onChange],\n  )\n\n  const handleError = React.useCallback(\n    (e: Error) => {\n      setError(e)\n      onError(e)\n    },\n    [onError, setError],\n  )\n\n  const handleValidation = React.useCallback(\n    (errors: Error[]) => {\n      onError(errors && errors.length ? errors[0] : null)\n    },\n    [onError],\n  )\n\n  const editorHtmlProps = React.useMemo(\n    () => ({\n      style: { height: t.spacing(30) },\n    }),\n    [t],\n  )\n\n  return (\n    <div className={className}>\n      <M.Typography className={classes.header} variant=\"body1\">\n        Query body\n      </M.Typography>\n      <M.Paper className={classes.editor}>\n        <ReactJsonEditor\n          ace={brace}\n          ajv={ajv}\n          htmlElementProps={editorHtmlProps}\n          mainMenuBar={false}\n          mode=\"code\"\n          navigationBar={false}\n          onChange={handleChange}\n          onError={handleError}\n          onValidationError={handleValidation}\n          schema={schema}\n          search={false}\n          statusBar={false}\n          theme=\"ace/theme/eclipse\"\n          value={query}\n        />\n        {error && (\n          <Lab.Alert key={error.message} severity=\"error\">\n            {error.message}\n          </Lab.Alert>\n        )}\n      </M.Paper>\n      <M.FormHelperText>\n        Quilt uses ElasticSearch 6.7 Search API.{' '}\n        <StyledLink href={ES_REF} target=\"_blank\">\n          Learn more\n        </StyledLink>\n        .\n      </M.FormHelperText>\n    </div>\n  )\n}\n","import * as R from 'ramda'\nimport * as React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport QueryResult from './QueryResult'\nimport QuerySelect from './QuerySelect'\nimport QueryViewer from './QueryViewer'\nimport * as requests from './requests'\n\nconst useStyles = M.makeStyles((t) => ({\n  actions: {\n    margin: t.spacing(2, 0),\n  },\n  container: {\n    display: 'flex',\n    padding: t.spacing(3),\n  },\n  inner: {\n    margin: t.spacing(2, 0, 0),\n  },\n  form: {\n    margin: t.spacing(0, 0, 4),\n  },\n  sectionHeader: {\n    margin: t.spacing(0, 0, 1),\n  },\n  select: {\n    margin: t.spacing(3, 0),\n  },\n  viewer: {\n    margin: t.spacing(3, 0),\n  },\n}))\n\ninterface SearchResultsFetcherProps {\n  children: (\n    props: requests.AsyncData<requests.ElasticSearchResults>,\n  ) => React.ReactElement\n  queryBody: requests.ElasticSearchQuery\n}\n\nfunction SearchResultsFetcher({ children, queryBody }: SearchResultsFetcherProps) {\n  const resultsData = requests.useSearch(queryBody)\n  return children(resultsData)\n}\n\ninterface QueryFetcherProps {\n  children: (props: requests.AsyncData<requests.ElasticSearchQuery>) => React.ReactElement\n  query: requests.Query | null\n}\n\nfunction QueryFetcher({ children, query }: QueryFetcherProps) {\n  const queryData = requests.useQuery(query ? query.url : '')\n  return children(queryData)\n}\n\ninterface QueriesStateRenderProps {\n  customQueryBody: requests.ElasticSearchQuery\n  error: Error | null\n  handleError: (error: Error | null) => void\n  handleQueryBodyChange: (q: requests.ElasticSearchQuery | null) => void\n  handleQueryMetaChange: (q: requests.Query | requests.athena.AthenaQuery | null) => void\n  handleSubmit: (q: requests.ElasticSearchQuery) => () => void\n  queries: requests.Query[]\n  queryData: requests.AsyncData<requests.ElasticSearchQuery>\n  queryMeta: requests.Query | null\n  resultsData: requests.AsyncData<requests.ElasticSearchResults>\n}\n\ninterface QueriesStateProps {\n  bucket: string\n  children: (props: QueriesStateRenderProps) => React.ReactElement\n}\n\nfunction QueriesState({ bucket, children }: QueriesStateProps) {\n  const classes = useStyles()\n\n  const config: requests.AsyncData<requests.Query[]> = requests.useQueriesConfig(bucket)\n\n  // Info about query: name, url, etc.\n  const [queryMeta, setQueryMeta] = React.useState<requests.Query | null>(null)\n\n  // Custom query content, not associated with queryMeta\n  const [customQueryBody, setCustomQueryBody] =\n    React.useState<requests.ElasticSearchQuery>(null)\n\n  // Query content requested to Elastic Search\n  const [queryRequest, setQueryRequest] =\n    React.useState<requests.ElasticSearchQuery>(null)\n\n  const [error, setError] = React.useState<Error | null>(null)\n\n  const handleSubmit = React.useMemo(\n    () => (body: requests.ElasticSearchQuery) => () => setQueryRequest(body),\n    [setQueryRequest],\n  )\n\n  const handleQueryMetaChange = React.useCallback(\n    (q: requests.athena.AthenaQuery | requests.Query | null) => {\n      setQueryMeta(q as requests.Query | null)\n      setCustomQueryBody(null)\n    },\n    [],\n  )\n\n  return config.case({\n    Ok: (queries: requests.Query[]) => (\n      <QueryFetcher query={queryMeta || queries[0]}>\n        {(queryData) => (\n          <SearchResultsFetcher queryBody={queryRequest}>\n            {(resultsData) =>\n              children({\n                customQueryBody,\n                error,\n                handleError: setError,\n                handleQueryBodyChange: setCustomQueryBody,\n                handleQueryMetaChange,\n                handleSubmit,\n                queries,\n                queryData,\n                queryMeta: queryMeta || queries[0],\n                resultsData,\n              })\n            }\n          </SearchResultsFetcher>\n        )}\n      </QueryFetcher>\n    ),\n    Err: (requestError: Error) => (\n      <div className={classes.container}>\n        <Lab.Alert severity=\"error\">{requestError.message}</Lab.Alert>\n      </div>\n    ),\n    _: () => (\n      <div className={classes.container}>\n        <M.CircularProgress size={48} />\n      </div>\n    ),\n  })\n}\n\ninterface FormProps {\n  disabled: boolean\n  onChange: (value: requests.ElasticSearchQuery) => void\n  onError: (value: Error | null) => void\n  onSubmit: (value: requests.ElasticSearchQuery) => () => void\n  value: requests.ElasticSearchQuery\n}\n\nfunction Form({ disabled, value, onChange, onError, onSubmit }: FormProps) {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.form}>\n      <QueryViewer\n        query={value}\n        className={classes.viewer}\n        onChange={onChange}\n        onError={onError}\n      />\n\n      <div className={classes.actions}>\n        <M.Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={disabled}\n          onClick={onSubmit(value)}\n        >\n          Run query\n        </M.Button>\n      </div>\n    </div>\n  )\n}\n\nconst QUERY_PLACEHOLDER = {\n  body: { query: { query_string: { query: 'test' } } },\n  filter_path: 'hits.hits._source.key',\n  index: '_all',\n  size: 10,\n}\n\nconst isButtonDisabled = (\n  resultsData: requests.AsyncData<requests.ElasticSearchResults>,\n  error: Error | null,\n): boolean => !!error || !!resultsData.case({ Pending: R.T, _: R.F })\n\ninterface ElastiSearchProps extends RouteComponentProps<{ bucket: string }> {}\n\nexport default function ElastiSearch({\n  match: {\n    params: { bucket },\n  },\n}: ElastiSearchProps) {\n  const classes = useStyles()\n\n  return (\n    <QueriesState bucket={bucket}>\n      {({\n        customQueryBody,\n        error: queryBodyError,\n        handleError,\n        handleQueryBodyChange,\n        handleQueryMetaChange,\n        handleSubmit,\n        queries,\n        queryData,\n        queryMeta,\n        resultsData,\n      }) => (\n        <div>\n          <M.Typography variant=\"h6\">ElasticSearch queries</M.Typography>\n\n          <div className={classes.select}>\n            <M.Typography className={classes.sectionHeader} variant=\"body1\">\n              Select query\n            </M.Typography>\n            <QuerySelect<requests.Query>\n              queries={queries}\n              onChange={handleQueryMetaChange}\n              value={customQueryBody ? null : queryMeta}\n            />\n          </div>\n\n          {queryData.case({\n            Init: () => (\n              <Form\n                disabled={isButtonDisabled(resultsData, queryBodyError)}\n                onChange={handleQueryBodyChange}\n                onError={handleError}\n                onSubmit={handleSubmit}\n                value={customQueryBody || QUERY_PLACEHOLDER}\n              />\n            ),\n            Ok: (queryBody: requests.ElasticSearchQuery) => (\n              <Form\n                disabled={isButtonDisabled(resultsData, queryBodyError)}\n                onChange={handleQueryBodyChange}\n                onError={handleError}\n                onSubmit={handleSubmit}\n                value={customQueryBody || queryBody || QUERY_PLACEHOLDER}\n              />\n            ),\n            Err: (error: Error) => (\n              <Lab.Alert severity=\"error\">{error.message}</Lab.Alert>\n            ),\n            Pending: () => <M.CircularProgress size={96} />,\n          })}\n\n          {resultsData.case({\n            Init: () => null,\n            Ok: (results: requests.ElasticSearchResults) => (\n              <QueryResult results={results} />\n            ),\n            Err: (error: Error) => (\n              <Lab.Alert severity=\"error\">{error.message}</Lab.Alert>\n            ),\n            _: () => (\n              <M.Box pt={5} textAlign=\"center\">\n                <M.CircularProgress size={96} />\n              </M.Box>\n            ),\n          })}\n        </div>\n      )}\n    </QueriesState>\n  )\n}\n","import * as React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport * as M from '@material-ui/core'\n\nimport MetaTitle from 'utils/MetaTitle'\nimport * as NamedRoutes from 'utils/NamedRoutes'\n\nimport Athena from './Athena'\nimport ElasticSearch from './ElasticSearch'\n\nconst useStyles = M.makeStyles((t) => ({\n  root: {\n    padding: t.spacing(2, 0),\n  },\n}))\n\nexport default function Queries({\n  match: {\n    params: { bucket },\n  },\n}: RouteComponentProps<{ bucket: string }>) {\n  const classes = useStyles()\n  const { paths, urls } = NamedRoutes.use()\n  return (\n    <div className={classes.root}>\n      <MetaTitle>{['Queries', bucket]}</MetaTitle>\n\n      <Switch>\n        <Route path={paths.bucketESQueries} component={ElasticSearch} exact />\n        <Route path={paths.bucketAthena} component={Athena} exact />\n        <Route path={paths.bucketAthenaWorkgroup} component={Athena} exact />\n        <Route path={paths.bucketAthenaExecution} component={Athena} exact />\n        <Route>\n          <Redirect to={urls.bucketAthena(bucket)} />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n"],"names":["children","onSubmit","open","title","handleCancel","handleSubmit","fullWidth","maxWidth","onClick","color","variant","useConfirm","key","setKey","opened","setOpened","close","value","render","initialValue","onCancel","validate","setValue","submitted","setSubmitted","error","handleChange","event","target","preventDefault","autoFocus","margin","onChange","severity","message","disabled","usePrompt","Perspective","data","props","useStyles","t","header","spacing","selectWrapper","width","select","padding","LOAD_MORE","QuerySelect","queries","onLoadMore","classes","find","query","className","root","length","map","primary","name","secondary","description","athenaWorkgroup","parseNamedQuery","body","QueryString","Description","NamedQueryId","Name","fetchQueries","athena","prev","workgroup","Promise","listNamedQueries","WorkGroup","NextToken","next","promise","queryIdsOutput","NamedQueryIds","batchGetNamedQuery","list","queriesOutput","parsed","NamedQueries","concat","console","log","getDefaultWorkgroup","preferences","workgroupFromConfig","defaultWorkgroup","includes","get","fetchWorkgroups","listWorkGroups","workgroupsOutput","WorkGroups","all","getWorkGroup","workgroupOutput","Configuration","ResultConfiguration","OutputLocation","State","fetchWorkgroup","available","filter","Boolean","parseQueryExecution","queryExecution","catalog","QueryExecutionContext","Catalog","completed","Status","CompletionDateTime","created","SubmissionDateTime","db","Database","id","QueryExecutionId","outputBucket","Query","status","parseQueryExecutionError","Error","ErrorMessage","fetchQueryExecutions","listQueryExecutions","executionIdsOutput","ids","QueryExecutionIds","batchGetQueryExecution","executionsOutput","QueryExecutions","UnprocessedQueryExecutionIds","waitForQueryStatus","getQueryExecution","statusData","QueryExecution","reason","StateChangeReason","wait","emptyRow","emptyList","emptyColumns","fetchQueryResults","queryExecutionId","rows","columns","getQueryResults","queryResultsOutput","ResultSet","Rows","row","Data","item","VarCharValue","ResultSetMetadata","ColumnInfo","type","isHeadColumns","every","index","slice","fetchCatalogNames","listDataCatalogs","catalogsOutput","DataCatalogsSummary","fetchDatabases","catalogName","listDatabases","CatalogName","databasesOutput","DatabaseList","useQueryRun","AWS","queryBody","executionContext","options","EncryptionConfiguration","EncryptionOption","database","startQueryExecution","runQuery","reject","parseQueriesList","result","Object","entries","queriesConfig","s3","bucket","requests","path","quiltConfigs","response","Body","toString","errors","queryUrl","s3paths","version","JSON","parse","useQuery","S3","use","noAutoFetch","search","req","requestOptions","filter_path","action","stringify","size","from","qs","mkSearch","e","useSectionStyles","Section","empty","sentry","Sentry","makeAsyncDataErrorHandler","Empty","p","textAlign","useResultsStyles","Results","reduce","memo","truncated","SeeDocsForCreatingPackage","href","doQueryResultsContainManifestEntries","queryResults","columnNames","parseQueryResults","acc","rowToManifestEntryStringified","entry","logical_key","physical_keys","handle","replace","sizeParsed","Number","isNaN","parseManifestEntryStringified","valid","invalid","results","minHeight","CreatePackage","setEntries","addToPackage","AddToPackage","createDialog","delayHashing","disableStateDisplay","handleConfirm","ok","merge","confirm","Dialog","onPackage","successTitle","successRenderMessage","packageLink","SelectError","SelectSkeleton","Skeleton","height","animate","useSelectStyles","label","SelectCatalogName","setPrev","case","Ok","Err","_","SelectDatabase","useDialogStyles","marginTop","onClose","setCatalogName","setDatabase","useChangeButtonStyles","alignItems","display","button","marginLeft","ChangeButton","setOpen","editor","EditorField","editorProps","$blockScrolling","mode","theme","StyledLink","useFormSkeletonStyles","canvas","flexGrow","helper","numbers","FormSkeleton","useFormStyles","actions","justifyContent","Form","setExecutionContext","urls","NamedRoutes","history","loading","setLoading","setError","notify","Notifications","goToExecution","push","bucketAthenaExecution","undefined","useToggleButtonStyles","transition","expanded","transform","ToggleButton","useDateStyles","whiteSpace","date","formatted","QueryDateCompleted","to","CopyButton","handleCopy","useFullQueryRowStyles","cell","paddingBottom","paddingTop","collapsed","borderBottom","maxHeight","overflow","FullQueryRow","colSpan","in","Execution","setExpanded","onToggle","queryCell","actionCell","footer","more","table","tableLayout","History","executions","page","setPage","handlePagination","rowsSorted","a","b","valueOf","rowsPaginated","hasPagination","component","count","Math","ceil","WorkgroupSelect","workgroups","goToWorkgroup","bucketAthenaWorkgroup","set","WorkgroupsEmpty","RedirectToDefaultWorkgroup","AthenaWorkgroups","BucketPreferences","ui","mt","useAthenaQueriesStyles","form","QueryConstructor","setQuery","handleQueryBodyChange","v","handleNamedQueryChange","q","HistoryContainer","TableSkeleton","useResultsContainerStyles","breadcrumbs","ResultsContainerSkeleton","ResultsBreadcrumbs","ResultsContainer","loadMore","useOverrideStyles","li","position","separator","useResultsBreadcrumbsStyles","breadcrumb","overrideClasses","Code","content","section","AthenaMain","AthenaExecution","mb","AthenaContainer","params","QueryResult","JsonDisplay","topLevel","defaultExpanded","ES_REF","allErrors","verbose","border","QueryViewer","onError","handleError","handleValidation","editorHtmlProps","style","ace","ajv","htmlElementProps","mainMenuBar","navigationBar","onValidationError","schema","statusBar","container","inner","sectionHeader","viewer","SearchResultsFetcher","resultsData","APIConnector","QueryFetcher","url","QueriesState","config","queryMeta","setQueryMeta","customQueryBody","setCustomQueryBody","queryRequest","setQueryRequest","handleQueryMetaChange","queryData","requestError","QUERY_PLACEHOLDER","query_string","isButtonDisabled","Pending","ElastiSearch","queryBodyError","Init","pt","Queries","paths","MetaTitle","bucketESQueries","exact","bucketAthena"],"sourceRoot":""}