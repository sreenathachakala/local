{"version":3,"file":"3014.62383a6a5320544e8606.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./node_modules/brace/mode/prolog.js"],"sourcesContent":["ace.define(\"ace/mode/prolog_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrologHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { include: '#comment' },\n         { include: '#basic_fact' },\n         { include: '#rule' },\n         { include: '#directive' },\n         { include: '#fact' } ],\n      '#atom': \n       [ { token: 'constant.other.atom.prolog',\n           regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b' },\n         { token: 'constant.numeric.prolog',\n           regex: '-?\\\\d+(?:\\\\.\\\\d+)?' },\n         { include: '#string' } ],\n      '#basic_elem': \n       [ { include: '#comment' },\n         { include: '#statement' },\n         { include: '#constants' },\n         { include: '#operators' },\n         { include: '#builtins' },\n         { include: '#list' },\n         { include: '#atom' },\n         { include: '#variable' } ],\n      '#basic_fact': \n       [ { token: \n            [ 'entity.name.function.fact.basic.prolog',\n              'punctuation.end.fact.basic.prolog' ],\n           regex: '([a-z]\\\\w*)(\\\\.)' } ],\n      '#builtins': \n       [ { token: 'support.function.builtin.prolog',\n           regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b' } ],\n      '#comment': \n       [ { token: \n            [ 'punctuation.definition.comment.prolog',\n              'comment.line.percentage.prolog' ],\n           regex: '(%)(.*$)' },\n         { token: 'punctuation.definition.comment.prolog',\n           regex: '/\\\\*',\n           push: \n            [ { token: 'punctuation.definition.comment.prolog',\n                regex: '\\\\*/',\n                next: 'pop' },\n              { defaultToken: 'comment.block.prolog' } ] } ],\n      '#constants': \n       [ { token: 'constant.language.prolog',\n           regex: '\\\\b(?:true|false|yes|no)\\\\b' } ],\n      '#directive': \n       [ { token: 'keyword.operator.directive.prolog',\n           regex: ':-',\n           push: \n            [ { token: 'meta.directive.prolog', regex: '\\\\.', next: 'pop' },\n              { include: '#comment' },\n              { include: '#statement' },\n              { defaultToken: 'meta.directive.prolog' } ] } ],\n      '#expr': \n       [ { include: '#comments' },\n         { token: 'meta.expression.prolog',\n           regex: '\\\\(',\n           push: \n            [ { token: 'meta.expression.prolog', regex: '\\\\)', next: 'pop' },\n              { include: '#expr' },\n              { defaultToken: 'meta.expression.prolog' } ] },\n         { token: 'keyword.control.cutoff.prolog', regex: '!' },\n         { token: 'punctuation.control.and.prolog', regex: ',' },\n         { token: 'punctuation.control.or.prolog', regex: ';' },\n         { include: '#basic_elem' } ],\n      '#fact': \n       [ { token: \n            [ 'entity.name.function.fact.prolog',\n              'punctuation.begin.fact.parameters.prolog' ],\n           regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\n           push: \n            [ { token: \n                 [ 'punctuation.end.fact.parameters.prolog',\n                   'punctuation.end.fact.prolog' ],\n                regex: '(\\\\))(\\\\.?)',\n                next: 'pop' },\n              { include: '#parameter' },\n              { defaultToken: 'meta.fact.prolog' } ] } ],\n      '#list': \n       [ { token: 'punctuation.begin.list.prolog',\n           regex: '\\\\[(?=.*\\\\])',\n           push: \n            [ { token: 'punctuation.end.list.prolog',\n                regex: '\\\\]',\n                next: 'pop' },\n              { include: '#comment' },\n              { token: 'punctuation.separator.list.prolog', regex: ',' },\n              { token: 'punctuation.concat.list.prolog',\n                regex: '\\\\|',\n                push: \n                 [ { token: 'meta.list.concat.prolog',\n                     regex: '(?=\\\\s*\\\\])',\n                     next: 'pop' },\n                   { include: '#basic_elem' },\n                   { defaultToken: 'meta.list.concat.prolog' } ] },\n              { include: '#basic_elem' },\n              { defaultToken: 'meta.list.prolog' } ] } ],\n      '#operators': \n       [ { token: 'keyword.operator.prolog',\n           regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)=' } ],\n      '#parameter': \n       [ { token: 'variable.language.anonymous.prolog',\n           regex: '\\\\b_\\\\b' },\n         { token: 'variable.parameter.prolog',\n           regex: '\\\\b[A-Z_]\\\\w*\\\\b' },\n         { token: 'punctuation.separator.parameters.prolog', regex: ',' },\n         { include: '#basic_elem' },\n         { token: 'text', regex: '[^\\\\s]' } ],\n      '#rule': \n       [ { token: 'meta.rule.prolog',\n           regex: '(?=[a-z]\\\\w*.*:-)',\n           push: \n            [ { token: 'punctuation.rule.end.prolog',\n                regex: '\\\\.',\n                next: 'pop' },\n              { token: 'meta.rule.signature.prolog',\n                regex: '(?=[a-z]\\\\w*.*:-)',\n                push: \n                 [ { token: 'meta.rule.signature.prolog',\n                     regex: '(?=:-)',\n                     next: 'pop' },\n                   { token: 'entity.name.function.rule.prolog',\n                     regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)' },\n                   { token: 'punctuation.rule.parameters.begin.prolog',\n                     regex: '\\\\(',\n                     push: \n                      [ { token: 'punctuation.rule.parameters.end.prolog',\n                          regex: '\\\\)',\n                          next: 'pop' },\n                        { include: '#parameter' },\n                        { defaultToken: 'meta.rule.parameters.prolog' } ] },\n                   { defaultToken: 'meta.rule.signature.prolog' } ] },\n              { token: 'keyword.operator.definition.prolog',\n                regex: ':-',\n                push: \n                 [ { token: 'meta.rule.definition.prolog',\n                     regex: '(?=\\\\.)',\n                     next: 'pop' },\n                   { include: '#comment' },\n                   { include: '#expr' },\n                   { defaultToken: 'meta.rule.definition.prolog' } ] },\n              { defaultToken: 'meta.rule.prolog' } ] } ],\n      '#statement': \n       [ { token: 'meta.statement.prolog',\n           regex: '(?=[a-z]\\\\w*\\\\()',\n           push: \n            [ { token: 'punctuation.end.statement.parameters.prolog',\n                regex: '\\\\)',\n                next: 'pop' },\n              { include: '#builtins' },\n              { include: '#atom' },\n              { token: 'punctuation.begin.statement.parameters.prolog',\n                regex: '\\\\(',\n                push: \n                 [ { token: 'meta.statement.parameters.prolog',\n                     regex: '(?=\\\\))',\n                     next: 'pop' },\n                   { token: 'punctuation.separator.statement.prolog', regex: ',' },\n                   { include: '#basic_elem' },\n                   { defaultToken: 'meta.statement.parameters.prolog' } ] },\n              { defaultToken: 'meta.statement.prolog' } ] } ],\n      '#string': \n       [ { token: 'punctuation.definition.string.begin.prolog',\n           regex: '\\'',\n           push: \n            [ { token: 'punctuation.definition.string.end.prolog',\n                regex: '\\'',\n                next: 'pop' },\n              { token: 'constant.character.escape.prolog', regex: '\\\\\\\\.' },\n              { token: 'constant.character.escape.quote.prolog',\n                regex: '\\'\\'' },\n              { defaultToken: 'string.quoted.single.prolog' } ] } ],\n      '#variable': \n       [ { token: 'variable.language.anonymous.prolog',\n           regex: '\\\\b_\\\\b' },\n         { token: 'variable.other.prolog',\n           regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b' } ] };\n    \n    this.normalizeRules();\n};\n\nPrologHighlightRules.metaData = { fileTypes: [ 'plg', 'prolog' ],\n      foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n      foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n      keyEquivalent: '^~P',\n      name: 'Prolog',\n      scopeName: 'source.prolog' };\n\n\noop.inherits(PrologHighlightRules, TextHighlightRules);\n\nexports.PrologHighlightRules = PrologHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prolog\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prolog_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar PrologHighlightRules = acequire(\"./prolog_highlight_rules\").PrologHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = PrologHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"%\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$id = \"ace/mode/prolog\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PrologHighlightRules","this","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","source","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"sourceRoot":""}