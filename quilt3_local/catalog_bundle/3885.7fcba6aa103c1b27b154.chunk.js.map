{"version":3,"file":"3885.7fcba6aa103c1b27b154.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./app/containers/Bucket/Dir.tsx"],"sourcesContent":["import { basename, join } from 'path'\n\nimport dedent from 'dedent'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RRDom from 'react-router-dom'\nimport * as M from '@material-ui/core'\n\nimport { Crumb, copyWithoutSpaces, render as renderCrumbs } from 'components/BreadCrumbs'\nimport type * as DG from 'components/DataGrid'\nimport * as FileEditor from 'components/FileEditor'\nimport * as Bookmarks from 'containers/Bookmarks'\nimport AsyncResult from 'utils/AsyncResult'\nimport * as AWS from 'utils/AWS'\nimport * as Config from 'utils/Config'\nimport { useData } from 'utils/Data'\nimport MetaTitle from 'utils/MetaTitle'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport * as BucketPreferences from 'utils/BucketPreferences'\nimport parseSearch from 'utils/parseSearch'\nimport * as s3paths from 'utils/s3paths'\nimport type * as workflows from 'utils/workflows'\n\nimport Code from './Code'\nimport * as FileView from './FileView'\nimport { Item, Listing, PrefixFilter } from './Listing'\nimport Menu from './Menu'\nimport * as PD from './PackageDialog'\nimport * as Successors from './Successors'\nimport Summary from './Summary'\nimport { displayError } from './errors'\nimport * as requests from './requests'\n\ninterface DirectoryMenuProps {\n  bucket: string\n  className?: string\n  path: string\n}\n\nfunction DirectoryMenu({ bucket, path, className }: DirectoryMenuProps) {\n  const prompt = FileEditor.useCreateFileInBucket(bucket, path)\n  const menuItems = React.useMemo(\n    () => [\n      {\n        onClick: prompt.open,\n        title: 'Create file',\n      },\n    ],\n    [prompt.open],\n  )\n\n  return (\n    <>\n      {prompt.render()}\n      <Menu className={className} items={menuItems} />\n    </>\n  )\n}\n\nconst useAddToBookmarksStyles = M.makeStyles((t) => ({\n  root: {\n    alignItems: 'baseline',\n    display: 'flex',\n    marginLeft: t.spacing(2),\n  },\n  button: {\n    fontSize: 11,\n    lineHeight: '22px',\n    margin: t.spacing(0, 1),\n  },\n}))\n\ninterface AddToBookmarksProps {\n  bucket: string\n  items: Item[]\n  onClearSelection: () => void\n  path: string\n  selection?: DG.GridRowId[]\n}\n\n// TODO: rather then select and add list of selected entries to bookmarks\n//       add bookmark button to each entry\nfunction AddToBookmarks({\n  bucket,\n  items,\n  onClearSelection,\n  path,\n  selection,\n}: AddToBookmarksProps) {\n  const classes = useAddToBookmarksStyles()\n  const bookmarks = Bookmarks.use()\n  const bookmarkItems: s3paths.S3HandleBase[] = React.useMemo(() => {\n    const handles: s3paths.S3HandleBase[] = []\n    if (selection?.includes('..')) {\n      handles.push({\n        bucket,\n        key: s3paths.ensureSlash(join(path, '..')),\n      })\n    }\n    items.some(({ name, handle, type }) => {\n      if (!selection?.length) return true\n      if (selection?.includes(name) && handle) {\n        handles.push({\n          ...handle,\n          key: type === 'dir' ? s3paths.ensureSlash(handle.key) : handle.key,\n        })\n      }\n      if (handles.length === selection?.length) return true\n      return false\n    })\n    return handles\n  }, [bucket, path, items, selection])\n  const handleClick = React.useCallback(() => {\n    bookmarks?.append('main', bookmarkItems)\n    onClearSelection()\n  }, [bookmarks, bookmarkItems, onClearSelection])\n  return (\n    <M.Slide direction=\"down\" in={!!selection?.length}>\n      <div className={classes.root}>\n        <M.Button\n          className={classes.button}\n          color=\"primary\"\n          size=\"small\"\n          variant=\"outlined\"\n          onClick={handleClick}\n        >\n          Add selected items to bookmarks\n        </M.Button>\n      </div>\n    </M.Slide>\n  )\n}\n\ninterface RouteMap {\n  bucketDir: [bucket: string, path?: string, prefix?: string]\n  bucketFile: [\n    bucket: string,\n    path: string,\n    options?: {\n      add?: boolean\n      edit?: boolean\n      mode?: string\n      next?: string\n      version?: string\n    },\n  ]\n}\n\ntype Urls = NamedRoutes.Urls<RouteMap>\n\nconst getCrumbs = R.compose(\n  R.intersperse(Crumb.Sep(<>&nbsp;/ </>)),\n  ({ bucket, path, urls }: { bucket: string; path: string; urls: Urls }) =>\n    [{ label: bucket, path: '' }, ...s3paths.getBreadCrumbs(path)].map(\n      ({ label, path: segPath }) =>\n        Crumb.Segment({\n          label,\n          to: segPath === path ? undefined : urls.bucketDir(bucket, segPath),\n        }),\n    ),\n)\n\nfunction useFormattedListing(r: requests.BucketListingResult) {\n  const { urls } = NamedRoutes.use<RouteMap>()\n  return React.useMemo(() => {\n    const dirs = r.dirs.map((name) => ({\n      type: 'dir' as const,\n      name: s3paths.ensureNoSlash(s3paths.withoutPrefix(r.path, name)),\n      to: urls.bucketDir(r.bucket, name),\n      handle: {\n        bucket: r.bucket,\n        key: name,\n      },\n    }))\n    const files = r.files.map(({ key, size, modified, archived }) => ({\n      type: 'file' as const,\n      name: s3paths.withoutPrefix(r.path, key),\n      to: urls.bucketFile(r.bucket, key),\n      size,\n      modified,\n      archived,\n      handle: {\n        bucket: r.bucket,\n        key,\n      },\n    }))\n    const items = [\n      ...(r.path !== '' && !r.prefix\n        ? [\n            {\n              type: 'dir' as const,\n              name: '..',\n              to: urls.bucketDir(r.bucket, s3paths.up(r.path)),\n            },\n          ]\n        : []),\n      ...dirs,\n      ...files,\n    ]\n    // filter-out files with same name as one of dirs\n    return R.uniqBy(R.prop('name'), items)\n  }, [r, urls])\n}\n\ninterface DirContentsProps {\n  response: requests.BucketListingResult\n  locked: boolean\n  bucket: string\n  path: string\n  loadMore?: () => void\n}\n\nfunction DirContents({ response, locked, bucket, path, loadMore }: DirContentsProps) {\n  const history = RRDom.useHistory()\n  const { urls } = NamedRoutes.use<RouteMap>()\n\n  const setPrefix = React.useCallback(\n    (newPrefix) => {\n      history.push(urls.bucketDir(bucket, path, newPrefix))\n    },\n    [history, urls, bucket, path],\n  )\n\n  const items = useFormattedListing(response)\n\n  const [selection, setSelection] = React.useState([])\n  const handleSelectionModelChange = React.useCallback((ids) => setSelection(ids), [])\n  React.useEffect(() => setSelection([]), [bucket, path])\n\n  // TODO: should prefix filtering affect summary?\n  return (\n    <>\n      <Listing\n        items={items}\n        locked={locked}\n        loadMore={loadMore}\n        truncated={response.truncated}\n        prefixFilter={response.prefix}\n        onSelectionChange={handleSelectionModelChange}\n        selection={selection}\n        toolbarContents={\n          <>\n            <PrefixFilter\n              key={`${response.bucket}/${response.path}`}\n              prefix={response.prefix}\n              setPrefix={setPrefix}\n            />\n            <AddToBookmarks\n              bucket={bucket}\n              items={items}\n              onClearSelection={() => setSelection([])}\n              path={path}\n              selection={selection}\n            />\n          </>\n        }\n      />\n      {/* Remove TS workaround when Summary will be converted to .tsx */}\n      {/* @ts-expect-error */}\n      <Summary files={response.files} mkUrl={null} path={path} />\n    </>\n  )\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  crumbs: {\n    ...t.typography.body1,\n    maxWidth: '100%',\n    overflowWrap: 'break-word',\n  },\n  button: {\n    flexShrink: 0,\n    marginBottom: '-3px',\n    marginLeft: t.spacing(1),\n    marginTop: '-3px',\n  },\n}))\n\ninterface DirParams {\n  bucket: string\n  path?: string\n}\n\nexport default function Dir({\n  match: {\n    params: { bucket, path: encodedPath = '' },\n  },\n  location: l,\n}: RRDom.RouteComponentProps<DirParams>) {\n  const classes = useStyles()\n  const { urls } = NamedRoutes.use<RouteMap>()\n  const { desktop, noDownload } = Config.use()\n  const s3 = AWS.S3.use()\n  const { preferences } = BucketPreferences.use()\n  const { prefix } = parseSearch(l.search)\n  const path = s3paths.decode(encodedPath)\n  const dest = path ? basename(path) : bucket\n\n  const code = React.useMemo(\n    () => [\n      {\n        label: 'Python',\n        hl: 'python',\n        contents: dedent`\n          import quilt3 as q3\n          b = q3.Bucket(\"s3://${bucket}\")\n          # list files\n          b.ls(\"${path}\")\n          # download\n          b.fetch(\"${path}\", \"./${dest}\")\n        `,\n      },\n      {\n        label: 'CLI',\n        hl: 'bash',\n        contents: dedent`\n          # list files\n          aws s3 ls \"s3://${bucket}/${path}\"\n          # download\n          aws s3 cp --recursive \"s3://${bucket}/${path}\" \"./${dest}\"\n        `,\n      },\n    ],\n    [bucket, path, dest],\n  )\n\n  const [prev, setPrev] = React.useState<requests.BucketListingResult | null>(null)\n\n  React.useLayoutEffect(() => {\n    // reset accumulated results when path and / or prefix change\n    setPrev(null)\n  }, [path, prefix])\n\n  const data = useData(requests.bucketListing, {\n    s3,\n    bucket,\n    path,\n    prefix,\n    prev,\n  })\n\n  const loadMore = React.useCallback(() => {\n    AsyncResult.case(\n      {\n        Ok: (res: requests.BucketListingResult) => {\n          // this triggers a re-render and fetching of next page of results\n          if (res.continuationToken) setPrev(res)\n        },\n        _: () => {},\n      },\n      data.result,\n    )\n  }, [data.result])\n\n  const packageDirectoryDialog = PD.usePackageCreationDialog({\n    bucket,\n    delayHashing: true,\n    disableStateDisplay: true,\n  })\n\n  const openPackageCreationDialog = React.useCallback(\n    (successor: workflows.Successor) => {\n      packageDirectoryDialog.open({\n        path,\n        successor,\n      })\n    },\n    [packageDirectoryDialog, path],\n  )\n\n  return (\n    <M.Box pt={2} pb={4}>\n      <MetaTitle>{[path || 'Files', bucket]}</MetaTitle>\n\n      {packageDirectoryDialog.render({\n        successTitle: 'Package created',\n        successRenderMessage: ({ packageLink }) => (\n          <>Package {packageLink} successfully created</>\n        ),\n        title: 'Create package from directory',\n      })}\n\n      <M.Box display=\"flex\" alignItems=\"flex-start\" mb={2}>\n        <div className={classes.crumbs} onCopy={copyWithoutSpaces}>\n          {renderCrumbs(getCrumbs({ bucket, path, urls }))}\n        </div>\n        <M.Box flexGrow={1} />\n        {preferences?.ui?.actions?.createPackage && (\n          <Successors.Button\n            bucket={bucket}\n            className={classes.button}\n            onChange={openPackageCreationDialog}\n          >\n            Create package from directory\n          </Successors.Button>\n        )}\n        {!noDownload && !desktop && (\n          <FileView.ZipDownloadForm\n            className={classes.button}\n            suffix={`dir/${bucket}/${path}`}\n            label=\"Download directory\"\n          />\n        )}\n        <DirectoryMenu className={classes.button} bucket={bucket} path={path} />\n      </M.Box>\n\n      {preferences?.ui?.blocks?.code && <Code gutterBottom>{code}</Code>}\n\n      {data.case({\n        Err: displayError(),\n        Init: () => null,\n        _: (x: $TSFixMe) => {\n          const res: requests.BucketListingResult | null = AsyncResult.getPrevResult(x)\n          return res ? (\n            <DirContents\n              response={res}\n              locked={!AsyncResult.Ok.is(x)}\n              bucket={bucket}\n              path={path}\n              loadMore={loadMore}\n            />\n          ) : (\n            <M.CircularProgress />\n          )\n        },\n      })}\n    </M.Box>\n  )\n}\n"],"names":["DirectoryMenu","bucket","path","className","prompt","menuItems","onClick","open","title","render","items","useAddToBookmarksStyles","t","root","alignItems","display","marginLeft","spacing","button","fontSize","lineHeight","margin","AddToBookmarks","onClearSelection","selection","classes","bookmarks","bookmarkItems","handles","includes","push","key","join","some","name","handle","type","length","handleClick","append","direction","in","color","size","variant","getCrumbs","urls","label","map","segPath","to","undefined","bucketDir","DirContents","response","locked","loadMore","history","setPrefix","newPrefix","r","dirs","files","modified","archived","bucketFile","prefix","useFormattedListing","setSelection","handleSelectionModelChange","ids","truncated","prefixFilter","onSelectionChange","toolbarContents","mkUrl","useStyles","crumbs","typography","body1","maxWidth","overflowWrap","flexShrink","marginBottom","marginTop","Dir","params","encodedPath","l","desktop","noDownload","s3","preferences","search","dest","basename","code","hl","contents","prev","setPrev","data","Ok","res","continuationToken","_","result","packageDirectoryDialog","delayHashing","disableStateDisplay","openPackageCreationDialog","successor","pt","pb","successTitle","successRenderMessage","packageLink","mb","onCopy","flexGrow","ui","actions","createPackage","onChange","suffix","blocks","gutterBottom","case","Err","Init","x"],"sourceRoot":""}