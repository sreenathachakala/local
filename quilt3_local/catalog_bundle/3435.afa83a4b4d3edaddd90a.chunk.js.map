{"version":3,"file":"3435.afa83a4b4d3edaddd90a.chunk.js","mappings":"iGAAAA,IAAIC,OAAO,kCAAkC,CAAC,UAAU,UAAU,SAAS,cAAc,kCAAkC,SAASC,EAAUC,EAASC,GACvJ,aAEA,IAAIC,EAAMH,EAAS,cACfI,EAAqBJ,EAAS,0BAA0BI,mBAExDC,EAAuB,WAEvBC,KAAKC,OAAS,CACVC,MAAO,CAAC,CACJC,QAAS,aACV,CACCC,MAAO,CACH,OACA,uBACA,OACA,6BACA,QAEJC,MAAO,6CACR,CACCF,QAAS,YACV,CACCA,QAAS,gBAEb,WAAY,CAAC,CACTC,MAAO,OACPC,MAAO,8CACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,UACPE,KAAM,OACP,CACCH,MAAO,CAAC,uBAAwB,QAChCC,MAAO,kDACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,eACPE,KAAM,OACP,CACCH,MAAO,uBACPC,MAAO,cACR,CACCD,MAAO,gCACPC,MAAO,SAEZ,CACCD,MAAO,OACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,IACPE,KAAM,OACP,CACCJ,QAAS,eAEd,CACCC,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,iBAEd,CACCC,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,UACPE,KAAM,OACP,CACCH,MAAO,sCACPC,MAAO,OACR,CACCD,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,oBAGlB,CACCC,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,oBAIrB,YAAa,CAAC,CACVC,MAAO,wCACPC,MAAO,OACPC,KAAM,CAAC,CACHF,MAAO,wCACPC,MAAO,OACPE,KAAM,OACP,CACCC,aAAc,0BAEnB,CACCJ,MAAO,CACH,OACA,wCACA,oCAEJC,MAAO,qBAEX,aAAc,CAAC,CACXD,MAAO,2BACPC,MAAO,sCACR,CACCD,MAAO,0BACPC,MAAO,6GACR,CACCD,MAAO,wBACPC,MAAO,wBAEX,eAAgB,CAAC,CACbD,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,kBAEd,CACCA,QAAS,UACV,CACCA,QAAS,YACV,CACCA,QAAS,cACV,CACCA,QAAS,aACV,CACCA,QAAS,cAEb,aAAc,CAAC,CACXC,MAAO,OACPC,MAAO,aACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,UACPE,KAAM,OACP,CACCH,MAAO,uBACPC,MAAO,UACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,SACPE,KAAM,OACP,CACCH,MAAO,OACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,IACPE,KAAM,OACP,CACCJ,QAAS,eAEd,CACCC,MAAO,CAAC,OAAQ,+BAChBC,MAAO,+BAEZ,CACCD,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,iBAEd,CACCC,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,YACPE,KAAM,OACP,CACCJ,QAAS,YAEd,CACCC,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,SACPE,KAAM,OACP,CACCJ,QAAS,iBAEd,CACCC,MAAO,qCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,QACPE,KAAM,OACP,CACCJ,QAAS,qBAIrB,YAAa,CAAC,CACVC,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,UACPE,KAAM,OACP,CACCJ,QAAS,YAEd,CACCA,QAAS,aACV,CACCC,MAAO,8BACPC,MAAO,QAEX,uBAAwB,CAAC,CACrBD,MAAO,CAAC,8BAA+B,QACvCC,MAAO,wBACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,mBACPE,KAAM,OACP,CACCH,MAAO,qCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,gBACPE,KAAM,OACP,CACCJ,QAAS,kBAEd,CACCC,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,oBAGlB,CACCC,MAAO,CAAC,8BAA+B,QACvCC,MAAO,uBACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,mBACPE,KAAM,OACP,CACCH,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,iBAEd,CACCC,MAAO,qCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,gBACPE,KAAM,OACP,CACCJ,QAAS,kBAEd,CACCC,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,qBAIrB,WAAY,CAAC,CACTC,MAAO,CACH,OACA,uBACA,OACA,wBAEJC,MAAO,0CAEX,YAAa,CAAC,CACVD,MAAO,0BACPC,MAAO,uMACR,CACCD,MAAO,yCACPC,MAAO,mCACR,CACCD,MAAO,yBACPC,MAAO,iEACR,CACCD,MAAO,0BACPC,MAAO,2BACR,CACCD,MAAO,qCACPC,MAAO,2BACR,CACCD,MAAO,qCACPC,MAAO,KACR,CACCD,MAAO,sCACPC,MAAO,KACR,CACCD,MAAO,8BACPC,MAAO,MACR,CACCD,MAAO,8CACPC,MAAO,aACR,CACCD,MAAO,qCACPC,MAAO,iBACR,CACCD,MAAO,4CACPC,MAAO,mBACR,CACCD,MAAO,kCACPC,MAAO,aACR,CACCD,MAAO,gCACPC,MAAO,QACR,CACCD,MAAO,gCACPC,MAAO,MAEX,cAAe,CAAC,CACZD,MAAO,uBACPC,MAAO,iBACR,CACCD,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,kBAGjB,cAAe,CAAC,CACZC,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,aACPE,KAAM,OACP,CACCJ,QAAS,YAEd,CACCC,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,WACPE,KAAM,OACP,CACCJ,QAAS,kBAEd,CACCA,QAAS,aACV,CACCC,MAAO,qCACPC,MAAO,QAEX,cAAe,CAAC,CACZF,QAAS,eACV,CACCA,QAAS,aACV,CACCA,QAAS,YACV,CACCA,QAAS,cACV,CACCA,QAAS,cACV,CACCA,QAAS,wBACV,CACCA,QAAS,iBAEb,WAAY,CAAC,CACTC,MAAO,6CACPC,MAAO,MACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,MACPE,KAAM,OACP,CACCH,MAAO,qCACPC,MAAO,sBACR,CACCD,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,gCAEnB,CACCJ,MAAO,6CACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,IACPE,KAAM,OACP,CACCH,MAAO,qCACPC,MAAO,sBACR,CACCD,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,iCAEnB,CACCJ,MAAO,6CACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,IACPE,KAAM,OACP,CACCH,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,iCAEnB,CACCJ,MAAO,6CACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,IACPE,KAAM,OACP,CACCC,aAAc,kCAGtB,YAAa,CAAC,CACVJ,MAAO,OACPC,MAAO,cACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,QACPE,KAAM,OACP,CACCH,MAAO,uBACPC,MAAO,YACR,CACCD,MAAO,OACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,IACPE,KAAM,OACP,CACCJ,QAAS,eAEd,CACCA,QAAS,mBAGjB,SAAU,CAAC,CACPC,MAAO,8BACPC,MAAO,iFACR,CACCD,MAAO,oCACPC,MAAO,iGACR,CACCD,MAAO,CACH,yCACA,QAEJC,MAAO,0BACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,IACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCA,QAAS,eAEd,CACCC,MAAO,OACPC,MAAO,OACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,IACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCA,QAAS,eAEd,CACCC,MAAO,CAAC,gCAAiC,QACzCC,MAAO,UACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,kBAEd,CACCC,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,iBAEd,CACCC,MAAO,OACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,YAEd,CACCC,MAAO,sCACPC,MAAO,OAEX,aAAc,CAAC,CACXD,MAAO,OACPC,MAAO,qBACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,YACPE,KAAM,OACP,CACCH,MAAO,uBACPC,MAAO,kBACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,YACPE,KAAM,OACP,CACCH,MAAO,OACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,IACPE,KAAM,OACP,CACCJ,QAAS,eAEd,CACCC,MAAO,CAAC,OAAQ,+BAChBC,MAAO,+BAEZ,CACCD,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,UACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCA,QAAS,0BAEd,CACCC,MAAO,qCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,QACPE,KAAM,OACP,CACCJ,QAAS,gBACV,CACCA,QAAS,8BAMzBH,KAAKS,gBACT,EAEAV,EAAqBW,SAAW,CAC5BC,UAAW,CAAC,KAAM,OAClBC,KAAM,SACNC,UAAW,iBAIfhB,EAAIiB,SAASf,EAAsBD,GAEnCH,EAAQI,qBAAuBA,CAC/B,IAEAP,IAAIC,OAAO,0BAA0B,CAAC,UAAU,UAAU,SAAS,cAAc,YAAY,+BAA+B,SAASC,EAAUC,EAASC,GACxJ,aAEA,IAAIC,EAAMH,EAAS,iBACfqB,EAAQrB,EAAS,eAAeqB,MAChCC,EAAetB,EAAS,eAAeuB,SAEvCA,EAAWtB,EAAQsB,SAAW,SAASC,GACnCA,IACAlB,KAAKmB,mBAAqB,IAAIC,OAC1BpB,KAAKmB,mBAAmBE,OAAOC,QAAQ,YAAa,IAAMJ,EAAahB,QAE3EF,KAAKuB,kBAAoB,IAAIH,OACzBpB,KAAKuB,kBAAkBF,OAAOC,QAAQ,YAAa,IAAMJ,EAAaM,MAGlF,EACA3B,EAAIiB,SAASG,EAAUD,GAEvB,WAEIhB,KAAKmB,mBAAqB,mCAC1BnB,KAAKuB,kBAAoB,uCACzBvB,KAAKyB,yBAA0B,uBAC/BzB,KAAK0B,yBAA2B,2BAChC1B,KAAK2B,cAAgB,4BACrB3B,KAAK4B,mBAAqB5B,KAAK6B,cAC/B7B,KAAK6B,cAAgB,SAASC,EAASC,EAAWC,GAC9C,IAAIC,EAAOH,EAAQI,QAAQF,GAE3B,GAAIhC,KAAKyB,yBAAyBU,KAAKF,KAC9BjC,KAAK2B,cAAcQ,KAAKF,KAAUjC,KAAK0B,yBAAyBS,KAAKF,GACtE,MAAO,GAGf,IAAIG,EAAKpC,KAAK4B,mBAAmBE,EAASC,EAAWC,GAErD,OAAKI,GAAMpC,KAAK2B,cAAcQ,KAAKF,GACxB,QAEJG,CACX,EAEApC,KAAKqC,mBAAqB,SAASP,EAASC,EAAWC,EAAKM,GACxD,IA2BIC,EA3BAN,EAAOH,EAAQI,QAAQF,GAE3B,GAAIhC,KAAK2B,cAAcQ,KAAKF,GACxB,OAAOjC,KAAKwC,sBAAsBV,EAASG,EAAMD,GAGrD,GADIO,EAAQN,EAAKM,MAAMvC,KAAKmB,oBACjB,CACP,IAAIsB,EAAIF,EAAMG,MAEd,GAAIH,EAAM,GACN,OAAOvC,KAAK2C,oBAAoBb,EAASS,EAAM,GAAIP,EAAKS,GAE5D,IAAIG,EAAQd,EAAQe,oBAAoBb,EAAKS,EAAIF,EAAM,GAAGO,OAAQ,GASlE,OAPIF,IAAUA,EAAMG,gBACZT,EACAM,EAAQ5C,KAAKgD,gBAAgBlB,EAASE,GAClB,OAAbD,IACPa,EAAQ,OAGTA,CACX,CAEA,GAAkB,cAAdb,IAGAQ,EAAQN,EAAKM,MAAMvC,KAAKuB,oBACjB,CACHkB,EAAIF,EAAMG,MAAQH,EAAM,GAAGO,OAE/B,OAAIP,EAAM,GACCvC,KAAKiD,oBAAoBnB,EAASS,EAAM,GAAIP,EAAKS,GAErDX,EAAQe,oBAAoBb,EAAKS,GAAI,EAChD,CACJ,EAEAzC,KAAKgD,gBAAkB,SAASlB,EAASE,GAQrC,IAPA,IAAIC,EAAOH,EAAQI,QAAQF,GACvBkB,EAAcjB,EAAKkB,OAAO,MAC1BC,EAAWpB,EACXqB,EAAcpB,EAAKa,OAEnBQ,EADJtB,GAAY,EAERuB,EAASzB,EAAQ0B,cACZxB,EAAMuB,GAAQ,CAEnB,IAAIE,GADJxB,EAAOH,EAAQI,QAAQF,IACLmB,OAAO,MACzB,IAAgB,IAAZM,EAAJ,CAEA,GAAKP,EAAcO,EACf,MACJ,IAAIC,EAAW1D,KAAKqC,mBAAmBP,EAAS,MAAOE,GAEvD,GAAI0B,EAAU,CACV,GAAIA,EAASxD,MAAM8B,KAAOoB,EACtB,MACG,GAAIM,EAASX,cAChBf,EAAM0B,EAASlC,IAAIQ,SAChB,GAAIkB,GAAeO,EACtB,KAER,CACAH,EAAStB,CAdG,CAehB,CAEA,OAAO,IAAIjB,EAAMqC,EAAUC,EAAaC,EAAQxB,EAAQI,QAAQoB,GAAQR,OAC5E,EACA9C,KAAKwC,sBAAwB,SAASV,EAASG,EAAMD,GAOjD,IANA,IAAIqB,EAAcpB,EAAKkB,OAAO,QAC1BI,EAASzB,EAAQ0B,YACjBJ,EAAWpB,EAEX2B,EAAK,uCACLC,EAAQ,IACH5B,EAAMuB,GAAQ,CACnBtB,EAAOH,EAAQI,QAAQF,GACvB,IAAI6B,EAAIF,EAAGG,KAAK7B,GAChB,GAAK4B,IACDA,EAAE,GAAID,IACLA,KAEAA,GAAO,KAChB,CAGA,GADa5B,EACAoB,EACT,OAAO,IAAIrC,EAAMqC,EAAUC,EAFlBrB,EAEuCC,EAAKa,OAE7D,CAEH,EAAEiB,KAAK9C,EAAS+C,UAEjB,IAEAxE,IAAIC,OAAO,kBAAkB,CAAC,UAAU,UAAU,SAAS,cAAc,gBAAgB,kCAAkC,4BAA4B,SAASC,EAAUC,EAASC,GACnL,aAEA,IAAIC,EAAMH,EAAS,cACfuE,EAAWvE,EAAS,UAAUwE,KAC9BnE,EAAuBL,EAAS,4BAA4BK,qBAC5DkB,EAAWvB,EAAS,oBAAoBuB,SAExCiD,EAAO,WACPlE,KAAKmE,eAAiBpE,EACtBC,KAAKoE,aAAe,IAAInD,CAC5B,EACApB,EAAIiB,SAASoD,EAAMD,GAEnB,WACIjE,KAAKqE,IAAM,iBACd,EAAEN,KAAKG,EAAKF,WAEbrE,EAAQuE,KAAOA,CACf,G","sources":["webpack://quilt-navigator/./node_modules/brace/mode/kotlin.js"],"sourcesContent":["ace.define(\"ace/mode/kotlin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar KotlinHighlightRules = function() {\n\n    this.$rules = {\n        start: [{\n            include: \"#comments\"\n        }, {\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"entity.name.package.kotlin\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n        }, {\n            include: \"#imports\"\n        }, {\n            include: \"#statements\"\n        }],\n        \"#classes\": [{\n            token: \"text\",\n            regex: /(?=\\s*(?:companion|class|object|interface))/,\n            push: [{\n                token: \"text\",\n                regex: /}|(?=$)/,\n                next: \"pop\"\n            }, {\n                token: [\"keyword.other.kotlin\", \"text\"],\n                regex: /\\b((?:companion\\s*)?)(class|object|interface)\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=<|{|\\(|:)/,\n                    next: \"pop\"\n                }, {\n                    token: \"keyword.other.kotlin\",\n                    regex: /\\bobject\\b/\n                }, {\n                    token: \"entity.name.type.class.kotlin\",\n                    regex: /\\w+/\n                }]\n            }, {\n                token: \"text\",\n                regex: /</,\n                push: [{\n                    token: \"text\",\n                    regex: />/,\n                    next: \"pop\"\n                }, {\n                    include: \"#generics\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?={|$)/,\n                    next: \"pop\"\n                }, {\n                    token: \"entity.other.inherited-class.kotlin\",\n                    regex: /\\w+/\n                }, {\n                    token: \"text\",\n                    regex: /\\(/,\n                    push: [{\n                        token: \"text\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#expressions\"\n                    }]\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#statements\"\n                }]\n            }]\n        }],\n        \"#comments\": [{\n            token: \"punctuation.definition.comment.kotlin\",\n            regex: /\\/\\*/,\n            push: [{\n                token: \"punctuation.definition.comment.kotlin\",\n                regex: /\\*\\//,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.block.kotlin\"\n            }]\n        }, {\n            token: [\n                \"text\",\n                \"punctuation.definition.comment.kotlin\",\n                \"comment.line.double-slash.kotlin\"\n            ],\n            regex: /(\\s*)(\\/\\/)(.*$)/\n        }],\n        \"#constants\": [{\n            token: \"constant.language.kotlin\",\n            regex: /\\b(?:true|false|null|this|super)\\b/\n        }, {\n            token: \"constant.numeric.kotlin\",\n            regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n        }, {\n            token: \"constant.other.kotlin\",\n            regex: /\\b[A-Z][A-Z0-9_]+\\b/\n        }],\n        \"#expressions\": [{\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            include: \"#types\"\n        }, {\n            include: \"#strings\"\n        }, {\n            include: \"#constants\"\n        }, {\n            include: \"#comments\"\n        }, {\n            include: \"#keywords\"\n        }],\n        \"#functions\": [{\n            token: \"text\",\n            regex: /(?=\\s*fun)/,\n            push: [{\n                token: \"text\",\n                regex: /}|(?=$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\bfun\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=\\()/,\n                    next: \"pop\"\n                }, {\n                    token: \"text\",\n                    regex: /</,\n                    push: [{\n                        token: \"text\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#generics\"\n                    }]\n                }, {\n                    token: [\"text\", \"entity.name.function.kotlin\"],\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?={|=|$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#types\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=\\})/,\n                    next: \"pop\"\n                }, {\n                    include: \"#statements\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }],\n        \"#generics\": [{\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|>)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            include: \"#keywords\"\n        }, {\n            token: \"storage.type.generic.kotlin\",\n            regex: /\\w+/\n        }],\n        \"#getters-and-setters\": [{\n            token: [\"entity.name.function.kotlin\", \"text\"],\n            regex: /\\b(get)\\b(\\s*\\(\\s*\\))/,\n            push: [{\n                token: \"text\",\n                regex: /\\}|(?=\\bset\\b)|$/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$|\\bset\\b)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }, {\n            token: [\"entity.name.function.kotlin\", \"text\"],\n            regex: /\\b(set)\\b(\\s*)(?=\\()/,\n            push: [{\n                token: \"text\",\n                regex: /\\}|(?=\\bget\\b)|$/,\n                next: \"pop\"\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$|\\bset\\b)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }],\n        \"#imports\": [{\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"keyword.other.kotlin\"\n            ],\n            regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n        }],\n        \"#keywords\": [{\n            token: \"storage.modifier.kotlin\",\n            regex: /\\b(?:var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\\b/\n        }, {\n            token: \"keyword.control.catch-exception.kotlin\",\n            regex: /\\b(?:try|catch|finally|throw)\\b/\n        }, {\n            token: \"keyword.control.kotlin\",\n            regex: /\\b(?:if|else|while|for|do|return|when|where|break|continue)\\b/\n        }, {\n            token: \"keyword.operator.kotlin\",\n            regex: /\\b(?:in|is|as|assert)\\b/\n        }, {\n            token: \"keyword.operator.comparison.kotlin\",\n            regex: /==|!=|===|!==|<=|>=|<|>/\n        }, {\n            token: \"keyword.operator.assignment.kotlin\",\n            regex: /=/\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/\n        }, {\n            token: \"keyword.operator.dot.kotlin\",\n            regex: /\\./\n        }, {\n            token: \"keyword.operator.increment-decrement.kotlin\",\n            regex: /\\-\\-|\\+\\+/\n        }, {\n            token: \"keyword.operator.arithmetic.kotlin\",\n            regex: /\\-|\\+|\\*|\\/|%/\n        }, {\n            token: \"keyword.operator.arithmetic.assign.kotlin\",\n            regex: /\\+=|\\-=|\\*=|\\/=/\n        }, {\n            token: \"keyword.operator.logical.kotlin\",\n            regex: /!|&&|\\|\\|/\n        }, {\n            token: \"keyword.operator.range.kotlin\",\n            regex: /\\.\\./\n        }, {\n            token: \"punctuation.terminator.kotlin\",\n            regex: /;/\n        }],\n        \"#namespaces\": [{\n            token: \"keyword.other.kotlin\",\n            regex: /\\bnamespace\\b/\n        }, {\n            token: \"text\",\n            regex: /\\{/,\n            push: [{\n                token: \"text\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#statements\"\n            }]\n        }],\n        \"#parameters\": [{\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|\\)|=)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /=/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|\\))/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            include: \"#keywords\"\n        }, {\n            token: \"variable.parameter.function.kotlin\",\n            regex: /\\w+/\n        }],\n        \"#statements\": [{\n            include: \"#namespaces\"\n        }, {\n            include: \"#typedefs\"\n        }, {\n            include: \"#classes\"\n        }, {\n            include: \"#functions\"\n        }, {\n            include: \"#variables\"\n        }, {\n            include: \"#getters-and-setters\"\n        }, {\n            include: \"#expressions\"\n        }],\n        \"#strings\": [{\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /\"\"\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /\"\"\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.third.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /'/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.single.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /`/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /`/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"string.quoted.single.kotlin\"\n            }]\n        }],\n        \"#typedefs\": [{\n            token: \"text\",\n            regex: /(?=\\s*type)/,\n            push: [{\n                token: \"text\",\n                regex: /(?=$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\btype\\b/\n            }, {\n                token: \"text\",\n                regex: /</,\n                push: [{\n                    token: \"text\",\n                    regex: />/,\n                    next: \"pop\"\n                }, {\n                    include: \"#generics\"\n                }]\n            }, {\n                include: \"#expressions\"\n            }]\n        }],\n        \"#types\": [{\n            token: \"storage.type.buildin.kotlin\",\n            regex: /\\b(?:Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b/\n        }, {\n            token: \"storage.type.buildin.array.kotlin\",\n            regex: /\\b(?:IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b/\n        }, {\n            token: [\n                \"storage.type.buildin.collection.kotlin\",\n                \"text\"\n            ],\n            regex: /\\b(Array|List|Map)(<\\b)/,\n            push: [{\n                token: \"text\",\n                regex: />/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }, {\n                include: \"#keywords\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\w+</,\n            push: [{\n                token: \"text\",\n                regex: />/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }, {\n                include: \"#keywords\"\n            }]\n        }, {\n            token: [\"keyword.operator.tuple.kotlin\", \"text\"],\n            regex: /(#)(\\()/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\{/,\n            push: [{\n                token: \"text\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#statements\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /->/\n        }],\n        \"#variables\": [{\n            token: \"text\",\n            regex: /(?=\\s*(?:var|val))/,\n            push: [{\n                token: \"text\",\n                regex: /(?=:|=|$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\b(?:var|val)\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=:|=|$)/,\n                    next: \"pop\"\n                }, {\n                    token: \"text\",\n                    regex: /</,\n                    push: [{\n                        token: \"text\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#generics\"\n                    }]\n                }, {\n                    token: [\"text\", \"entity.name.variable.kotlin\"],\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?==|$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#types\"\n                }, {\n                    include: \"#getters-and-setters\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }, {\n                    include: \"#getters-and-setters\"\n                }]\n            }]\n        }]\n    };\n\n    this.normalizeRules();\n};\n\nKotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n};\n\n\noop.inherits(KotlinHighlightRules, TextHighlightRules);\n\nexports.KotlinHighlightRules = KotlinHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n\n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n\n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n\n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/kotlin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/kotlin_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar KotlinHighlightRules = acequire(\"./kotlin_highlight_rules\").KotlinHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$id = \"ace/mode/kotlin\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","KotlinHighlightRules","this","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$id"],"sourceRoot":""}