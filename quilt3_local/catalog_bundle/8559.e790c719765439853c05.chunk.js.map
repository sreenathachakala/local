{"version":3,"file":"8559.e790c719765439853c05.chunk.js","mappings":"2QAKMA,EAAY,KAAa,WAAM,OACnCC,KAAM,CACJC,YAAa,QACbC,MAAO,QAH0B,IAWtB,SAASC,EAAK,G,IAAEC,EAAI,OAC3BC,EAAUN,IACVO,EAAU,WAEd,WAAM,OAAAC,OAAOD,QAAQF,GAAMI,QAAO,SAAC,GAAG,KAAa,QAAN,IAAM,GAA7C,GACN,CAACJ,IAEH,OACE,gBAAC,IAAO,CAACK,UAAWJ,EAAQL,KAAMU,KAAK,SACrC,gBAAC,IAAW,KACTJ,EAAQK,KAAI,SAAC,G,IAACC,EAAG,KAAEC,EAAK,KAAM,OAC7B,gBAAC,IAAU,CAACD,IAAKA,EAAMC,GACrB,gBAAC,IAAW,KACV,8BAASD,E,MAEX,gBAAC,IAAW,KAAEC,GALa,KAWvC,CC5BA,IAAMC,EAAa,wCAgBnB,IAAM,EAAY,KAAa,SAACC,GAAM,OACpCf,KAAM,CACJgB,SAAU,YAEZZ,KAAM,CACJa,KAAMF,EAAEG,QAAQ,GAChBC,QAAS,GACTH,SAAU,WACVI,IAAKL,EAAEG,QAAQ,GACf,UAAW,CACTC,QAAS,IAGbE,QAAS,CACPC,OAAQP,EAAEG,QAAQ,IAClBK,SAAU,OACVC,OAAQ,WACRtB,MAAO,QAjB2B,IA+BvB,SAASuB,EAAI,G,IAAEC,EAAI,OAAEjB,EAAS,YAAEkB,EAAG,MAAEvB,EAAI,OAChDC,EAAU,IAEVU,EAAI,MACJa,EAAW,SAAoC,MAE/CC,EAAc,eAClB,SAACC,G,OACqB,QAAhB,EAAAF,EAASG,eAAO,eAAEC,SAASF,EAAMG,UACnCH,EAAMI,gBAEV,GACA,CAACN,IAEG,EAAoB,WAAe,MAAlCO,EAAK,KAAEC,EAAQ,KAgBtB,GAdA,aAAgB,WACd,IAAIC,EAOJ,OANIT,EAASG,UA/DjB,SAAyBL,EAAYC,EAAaW,EAA2BvB,G,8GAC/D,SAAMD,G,OAMlB,OANMyB,EAAM,SACNF,EAAQ,IAAIE,EAAIC,MAAMF,EAAW,CAAEG,gBAAiB1B,EAAE2B,QAAQC,OAAOC,QAEpD,IAAIC,OAAOC,gBAAe,WAAM,OAAAT,EAAMU,cAAN,IACxCC,QAAQV,GAEvB,GAAMD,EAAMY,SAASvB,EAAM,CACzBwB,uBAAuB,EACvBvB,IAAG,K,OAEL,OAJA,SAIO,CAAP,EAAOU,G,OAqDHc,CAAUzB,EAAMC,EAAKC,EAASG,QAAShB,GACpCqC,MAAK,SAACC,GAAM,OAAChB,EAAQgB,CAAT,IACZC,OAAM,SAACC,GAAM,OAAAnB,EAASmB,EAAT,IAChBV,OAAOW,iBAAiB,QAAS3B,EAAa,CAAE4B,SAAS,KAEpD,WACLpB,SAAAA,EAAOqB,UACPb,OAAOc,oBAAoB,QAAS9B,EACtC,CACF,GAAG,CAACH,EAAMC,EAAKE,EAAad,EAAGa,IAE3BO,EAAO,MAAMA,EAEjB,OACE,uBAAK1B,UAAW,IAAGJ,EAAQL,KAAMS,IAC/B,uBAAKmD,IAAKhC,EAAUnB,UAAWJ,EAAQgB,YACpCjB,GACD,gBAAC,IAAO,CAACK,UAAWJ,EAAQD,MAC1B,gBAACD,EAAI,CAACC,KAAMA,KAKtB,C","sources":["webpack://quilt-navigator/./app/components/Preview/renderers/Ngl/Meta.tsx","webpack://quilt-navigator/./app/components/Preview/renderers/Ngl/Ngl.tsx"],"sourcesContent":["import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nimport { JsonRecord } from 'utils/types'\n\nconst useStyles = M.makeStyles(() => ({\n  root: {\n    tableLayout: 'fixed',\n    width: 'auto',\n  },\n}))\n\ninterface MetaProps {\n  meta: JsonRecord\n}\n\nexport default function Meta({ meta }: MetaProps) {\n  const classes = useStyles()\n  const entries = React.useMemo(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    () => Object.entries(meta).filter(([_1, value]) => !!value),\n    [meta],\n  )\n  return (\n    <M.Table className={classes.root} size=\"small\">\n      <M.TableBody>\n        {entries.map(([key, value]) => (\n          <M.TableRow key={key + value}>\n            <M.TableCell>\n              <strong>{key}:</strong>\n            </M.TableCell>\n            <M.TableCell>{value}</M.TableCell>\n          </M.TableRow>\n        ))}\n      </M.TableBody>\n    </M.Table>\n  )\n}\n","import cx from 'classnames'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport type { Stage } from 'ngl'\n\nimport { JsonRecord } from 'utils/types'\n\nimport Meta from './Meta'\n\nconst NGLLibrary = import('ngl')\n\nasync function renderNgl(blob: Blob, ext: string, wrapperEl: HTMLDivElement, t: M.Theme) {\n  const NGL = await NGLLibrary\n  const stage = new NGL.Stage(wrapperEl, { backgroundColor: t.palette.common.white })\n\n  const resizeObserver = new window.ResizeObserver(() => stage.handleResize())\n  resizeObserver.observe(wrapperEl)\n\n  await stage.loadFile(blob, {\n    defaultRepresentation: true,\n    ext,\n  })\n  return stage\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  root: {\n    position: 'relative',\n  },\n  meta: {\n    left: t.spacing(0),\n    opacity: 0.7,\n    position: 'absolute',\n    top: t.spacing(2),\n    '&:hover': {\n      opacity: 1,\n    },\n  },\n  wrapper: {\n    height: t.spacing(50),\n    overflow: 'auto',\n    resize: 'vertical',\n    width: '100%',\n  },\n}))\n\nexport interface NglFile {\n  blob: Blob\n  ext: string\n  meta?: JsonRecord\n}\n\nexport interface NglProps extends NglFile {\n  className: string\n}\n\nexport default function Ngl({ blob, className, ext, meta }: NglProps) {\n  const classes = useStyles()\n\n  const t = M.useTheme()\n  const viewport = React.useRef<HTMLDivElement | null>(null)\n\n  const handleWheel = React.useCallback(\n    (event) => {\n      if (viewport.current?.contains(event.target)) {\n        event.preventDefault()\n      }\n    },\n    [viewport],\n  )\n  const [error, setError] = React.useState(null)\n\n  React.useEffect(() => {\n    let stage: Stage\n    if (viewport.current) {\n      renderNgl(blob, ext, viewport.current, t)\n        .then((s) => (stage = s))\n        .catch((e) => setError(e))\n      window.addEventListener('wheel', handleWheel, { passive: false })\n    }\n    return () => {\n      stage?.dispose()\n      window.removeEventListener('wheel', handleWheel)\n    }\n  }, [blob, ext, handleWheel, t, viewport])\n\n  if (error) throw error\n\n  return (\n    <div className={cx(classes.root, className)}>\n      <div ref={viewport} className={classes.wrapper} />\n      {!!meta && (\n        <M.Paper className={classes.meta}>\n          <Meta meta={meta} />\n        </M.Paper>\n      )}\n    </div>\n  )\n}\n"],"names":["useStyles","root","tableLayout","width","Meta","meta","classes","entries","Object","filter","className","size","map","key","value","NGLLibrary","t","position","left","spacing","opacity","top","wrapper","height","overflow","resize","Ngl","blob","ext","viewport","handleWheel","event","current","contains","target","preventDefault","error","setError","stage","wrapperEl","NGL","Stage","backgroundColor","palette","common","white","window","ResizeObserver","handleResize","observe","loadFile","defaultRepresentation","renderNgl","then","s","catch","e","addEventListener","passive","dispose","removeEventListener","ref"],"sourceRoot":""}