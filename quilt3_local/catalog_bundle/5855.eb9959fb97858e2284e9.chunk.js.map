{"version":3,"file":"5855.eb9959fb97858e2284e9.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./node_modules/brace/mode/lua.js"],"sourcesContent":["ace.define(\"ace/mode/lua_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LuaHighlightRules = function() {\n\n    var keywords = (\n        \"break|do|else|elseif|end|for|function|if|in|local|repeat|\"+\n         \"return|then|until|while|or|and|not\"\n    );\n\n    var builtinConstants = (\"true|false|nil|_G|_VERSION\");\n\n    var functions = (\n        \"string|xpcall|package|tostring|print|os|unpack|acequire|\"+\n        \"getfenv|setmetatable|next|assert|tonumber|io|rawequal|\"+\n        \"collectgarbage|getmetatable|module|rawset|math|debug|\"+\n        \"pcall|table|newproxy|type|coroutine|_G|select|gcinfo|\"+\n        \"pairs|rawget|loadstring|ipairs|_VERSION|dofile|setfenv|\"+\n        \"load|error|loadfile|\"+\n\n        \"sub|upper|len|gfind|rep|find|match|char|dump|gmatch|\"+\n        \"reverse|byte|format|gsub|lower|preload|loadlib|loaded|\"+\n        \"loaders|cpath|config|path|seeall|exit|setlocale|date|\"+\n        \"getenv|difftime|remove|time|clock|tmpname|rename|execute|\"+\n        \"lines|write|close|flush|open|output|type|read|stderr|\"+\n        \"stdin|input|stdout|popen|tmpfile|log|max|acos|huge|\"+\n        \"ldexp|pi|cos|tanh|pow|deg|tan|cosh|sinh|random|randomseed|\"+\n        \"frexp|ceil|floor|rad|abs|sqrt|modf|asin|min|mod|fmod|log10|\"+\n        \"atan2|exp|sin|atan|getupvalue|debug|sethook|getmetatable|\"+\n        \"gethook|setmetatable|setlocal|traceback|setfenv|getinfo|\"+\n        \"setupvalue|getlocal|getregistry|getfenv|setn|insert|getn|\"+\n        \"foreachi|maxn|foreach|concat|sort|remove|resume|yield|\"+\n        \"status|wrap|create|running|\"+\n        \"__add|__sub|__mod|__unm|__concat|__lt|__index|__call|__gc|__metatable|\"+\n         \"__mul|__div|__pow|__len|__eq|__le|__newindex|__tostring|__mode|__tonumber\"\n    );\n\n    var stdLibaries = (\"string|package|os|io|math|debug|table|coroutine\");\n\n    var deprecatedIn5152 = (\"setn|foreach|foreachi|gcinfo|log10|maxn\");\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"support.function\": functions,\n        \"keyword.deprecated\": deprecatedIn5152,\n        \"constant.library\": stdLibaries,\n        \"constant.language\": builtinConstants,\n        \"variable.language\": \"self\"\n    }, \"identifier\");\n\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + hexInteger + \")\";\n\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var floatNumber = \"(?:\" + pointFloat + \")\";\n\n    this.$rules = {\n        \"start\" : [{\n            stateName: \"bracketedComment\",\n            onMatch : function(value, currentState, stack){\n                stack.unshift(this.next, value.length - 2, currentState);\n                return \"comment\";\n            },\n            regex : /\\-\\-\\[=*\\[/,\n            next  : [\n                {\n                    onMatch : function(value, currentState, stack) {\n                        if (value.length == stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack.shift();\n                        } else {\n                            this.next = \"\";\n                        }\n                        return \"comment\";\n                    },\n                    regex : /\\]=*\\]/,\n                    next  : \"start\"\n                }, {\n                    defaultToken : \"comment\"\n                }\n            ]\n        },\n\n        {\n            token : \"comment\",\n            regex : \"\\\\-\\\\-.*$\"\n        },\n        {\n            stateName: \"bracketedString\",\n            onMatch : function(value, currentState, stack){\n                stack.unshift(this.next, value.length, currentState);\n                return \"string.start\";\n            },\n            regex : /\\[=*\\[/,\n            next  : [\n                {\n                    onMatch : function(value, currentState, stack) {\n                        if (value.length == stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack.shift();\n                        } else {\n                            this.next = \"\";\n                        }\n                        return \"string.end\";\n                    },\n                    \n                    regex : /\\]=*\\]/,\n                    next  : \"start\"\n                }, {\n                    defaultToken : \"string\"\n                }\n            ]\n        },\n        {\n            token : \"string\",           // \" string\n            regex : '\"(?:[^\\\\\\\\]|\\\\\\\\.)*?\"'\n        }, {\n            token : \"string\",           // ' string\n            regex : \"'(?:[^\\\\\\\\]|\\\\\\\\.)*?'\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : floatNumber\n        }, {\n            token : \"constant.numeric\", // integer\n            regex : integer + \"\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\*|\\\\/|%|\\\\#|\\\\^|~|<|>|<=|=>|==|~=|=|\\\\:|\\\\.\\\\.\\\\.|\\\\.\\\\.\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\]\\\\)\\\\}]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+|\\\\w+\"\n        } ]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(LuaHighlightRules, TextHighlightRules);\n\nexports.LuaHighlightRules = LuaHighlightRules;\n});\n\nace.define(\"ace/mode/folding/lua\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\",\"ace/token_iterator\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\nvar TokenIterator = acequire(\"../../token_iterator\").TokenIterator;\n\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /\\b(function|then|do|repeat)\\b|{\\s*$|(\\[=*\\[)/;\n    this.foldingStopMarker = /\\bend\\b|^\\s*}|\\]=*\\]/;\n\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var isStart = this.foldingStartMarker.test(line);\n        var isEnd = this.foldingStopMarker.test(line);\n\n        if (isStart && !isEnd) {\n            var match = line.match(this.foldingStartMarker);\n            if (match[1] == \"then\" && /\\belseif\\b/.test(line))\n                return;\n            if (match[1]) {\n                if (session.getTokenAt(row, match.index + 1).type === \"keyword\")\n                    return \"start\";\n            } else if (match[2]) {\n                var type = session.bgTokenizer.getState(row) || \"\";\n                if (type[0] == \"bracketedComment\" || type[0] == \"bracketedString\")\n                    return \"start\";\n            } else {\n                return \"start\";\n            }\n        }\n        if (foldStyle != \"markbeginend\" || !isEnd || isStart && isEnd)\n            return \"\";\n\n        var match = line.match(this.foldingStopMarker);\n        if (match[0] === \"end\") {\n            if (session.getTokenAt(row, match.index + 1).type === \"keyword\")\n                return \"end\";\n        } else if (match[0][0] === \"]\") {\n            var type = session.bgTokenizer.getState(row - 1) || \"\";\n            if (type[0] == \"bracketedComment\" || type[0] == \"bracketedString\")\n                return \"end\";\n        } else\n            return \"end\";\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.doc.getLine(row);\n        var match = this.foldingStartMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.luaBlock(session, row, match.index + 1);\n\n            if (match[2])\n                return session.getCommentFoldRange(row, match.index + 1);\n\n            return this.openingBracketBlock(session, \"{\", row, match.index);\n        }\n\n        var match = this.foldingStopMarker.exec(line);\n        if (match) {\n            if (match[0] === \"end\") {\n                if (session.getTokenAt(row, match.index + 1).type === \"keyword\")\n                    return this.luaBlock(session, row, match.index + 1);\n            }\n\n            if (match[0][0] === \"]\")\n                return session.getCommentFoldRange(row, match.index + 1);\n\n            return this.closingBracketBlock(session, \"}\", row, match.index + match[0].length);\n        }\n    };\n\n    this.luaBlock = function(session, row, column) {\n        var stream = new TokenIterator(session, row, column);\n        var indentKeywords = {\n            \"function\": 1,\n            \"do\": 1,\n            \"then\": 1,\n            \"elseif\": -1,\n            \"end\": -1,\n            \"repeat\": 1,\n            \"until\": -1\n        };\n\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"keyword\")\n            return;\n\n        var val = token.value;\n        var stack = [val];\n        var dir = indentKeywords[val];\n\n        if (!dir)\n            return;\n\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            if (token.type !== \"keyword\")\n                continue;\n            var level = dir * indentKeywords[token.value];\n\n            if (level > 0) {\n                stack.unshift(token.value);\n            } else if (level <= 0) {\n                stack.shift();\n                if (!stack.length && token.value != \"elseif\")\n                    break;\n                if (level === 0)\n                    stack.unshift(token.value);\n            }\n        }\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        else\n            return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/lua\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/lua_highlight_rules\",\"ace/mode/folding/lua\",\"ace/range\",\"ace/worker/worker_client\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar LuaHighlightRules = acequire(\"./lua_highlight_rules\").LuaHighlightRules;\nvar LuaFoldMode = acequire(\"./folding/lua\").FoldMode;\nvar Range = acequire(\"../range\").Range;\nvar WorkerClient = acequire(\"../worker/worker_client\").WorkerClient;\n\nvar Mode = function() {\n    this.HighlightRules = LuaHighlightRules;\n    \n    this.foldingRules = new LuaFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n   \n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"--[\", end: \"]--\"};\n    \n    var indentKeywords = {\n        \"function\": 1,\n        \"then\": 1,\n        \"do\": 1,\n        \"else\": 1,\n        \"elseif\": 1,\n        \"repeat\": 1,\n        \"end\": -1,\n        \"until\": -1\n    };\n    var outdentKeywords = [\n        \"else\",\n        \"elseif\",\n        \"end\",\n        \"until\"\n    ];\n\n    function getNetIndentLevel(tokens) {\n        var level = 0;\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (token.type == \"keyword\") {\n                if (token.value in indentKeywords) {\n                    level += indentKeywords[token.value];\n                }\n            } else if (token.type == \"paren.lparen\") {\n                level += token.value.length;\n            } else if (token.type == \"paren.rparen\") {\n                level -= token.value.length;\n            }\n        }\n        if (level < 0) {\n            return -1;\n        } else if (level > 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        var level = 0;\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (state == \"start\") {\n            level = getNetIndentLevel(tokens);\n        }\n        if (level > 0) {\n            return indent + tab;\n        } else if (level < 0 && indent.substr(indent.length - tab.length) == tab) {\n            if (!this.checkOutdent(state, line, \"\\n\")) {\n                return indent.substr(0, indent.length - tab.length);\n            }\n        }\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        if (input != \"\\n\" && input != \"\\r\" && input != \"\\r\\n\")\n            return false;\n\n        if (line.match(/^\\s*[\\)\\}\\]]$/))\n            return true;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n\n        if (!tokens || !tokens.length)\n            return false;\n\n        return (tokens[0].type == \"keyword\" && outdentKeywords.indexOf(tokens[0].value) != -1);\n    };\n\n    this.autoOutdent = function(state, session, row) {\n        var prevLine = session.getLine(row - 1);\n        var prevIndent = this.$getIndent(prevLine).length;\n        var prevTokens = this.getTokenizer().getLineTokens(prevLine, \"start\").tokens;\n        var tabLength = session.getTabString().length;\n        var expectedIndent = prevIndent + tabLength * getNetIndentLevel(prevTokens);\n        var curIndent = this.$getIndent(session.getLine(row)).length;\n        if (curIndent <= expectedIndent) {\n            return;\n        }\n        session.outdentRows(new Range(row, 0, row + 2, 0));\n    };\n\n    this.createWorker = function(session) {\n        var worker = new WorkerClient([\"ace\"], require(\"../worker/lua\"), \"Worker\");\n        worker.attachToDocument(session.getDocument());\n        \n        worker.on(\"annotate\", function(e) {\n            session.setAnnotations(e.data);\n        });\n        \n        worker.on(\"terminate\", function() {\n            session.clearAnnotations();\n        });\n        \n        return worker;\n    };\n\n    this.$id = \"ace/mode/lua\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","LuaHighlightRules","keywordMapper","this","createKeywordMapper","$rules","stateName","onMatch","value","currentState","stack","unshift","next","length","regex","shift","defaultToken","token","integer","normalizeRules","inherits","BaseFoldMode","FoldMode","Range","TokenIterator","foldingStartMarker","foldingStopMarker","getFoldWidget","session","foldStyle","row","line","getLine","isStart","test","isEnd","match","getTokenAt","index","type","bgTokenizer","getState","getFoldWidgetRange","doc","exec","luaBlock","getCommentFoldRange","openingBracketBlock","closingBracketBlock","column","stream","indentKeywords","getCurrentToken","val","dir","startColumn","getCurrentTokenColumn","startRow","step","stepBackward","stepForward","level","getCurrentTokenRow","call","prototype","TextMode","Mode","LuaFoldMode","WorkerClient","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","start","end","outdentKeywords","getNetIndentLevel","tokens","i","getNextLineIndent","state","tab","indent","$getIndent","getTokenizer","getLineTokens","substr","checkOutdent","input","trim","indexOf","autoOutdent","prevLine","prevIndent","prevTokens","expectedIndent","getTabString","outdentRows","createWorker","worker","attachToDocument","getDocument","on","e","setAnnotations","data","clearAnnotations","$id"],"sourceRoot":""}