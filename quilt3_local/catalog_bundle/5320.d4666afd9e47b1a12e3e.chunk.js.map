{"version":3,"file":"5320.d4666afd9e47b1a12e3e.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./app/containers/Admin/Status/DataGrid.ts","webpack://quilt-navigator/./app/containers/Admin/Status/Canaries.tsx","webpack://quilt-navigator/./node_modules/date-fns/esm/addMonths/index.js","webpack://quilt-navigator/./node_modules/date-fns/esm/add/index.js","webpack://quilt-navigator/./app/containers/Admin/Status/gql/Reports.generated.ts","webpack://quilt-navigator/./app/containers/Admin/Status/Reports.tsx","webpack://quilt-navigator/./node_modules/use-resize-observer/dist/bundle.esm.js","webpack://quilt-navigator/./app/components/EChartsChart.tsx","webpack://quilt-navigator/./app/containers/Admin/Status/Stats.tsx","webpack://quilt-navigator/./app/containers/Admin/Status/gql/Status.generated.ts","webpack://quilt-navigator/./app/containers/Admin/Status/Status.tsx","webpack://quilt-navigator/./app/model/graphql/types.generated.ts","webpack://quilt-navigator/./app/model/index.ts","webpack://quilt-navigator/./app/utils/MetaTitle.tsx","webpack://quilt-navigator/./app/utils/types.ts"],"sourcesContent":["import * as M from '@material-ui/core'\nimport { fade } from '@material-ui/core/styles'\n\nexport const useDataGridStyles = M.makeStyles((t) => ({\n  root: {\n    position: 'relative',\n    width: '100%',\n    zIndex: 1, // to prevent receiveing shadow from footer\n  },\n  header: {\n    borderBottom: `1px solid ${t.palette.divider}`,\n    padding: t.spacing(2),\n  },\n  // TODO: move to components/DataGrid\n  '@global': {\n    '.MuiDataGridMenu-root': {\n      zIndex: t.zIndex.modal + 1, // show menu over modals\n    },\n  },\n  grid: {\n    border: 'none',\n\n    '& .MuiDataGrid-overlay': {\n      background: fade(t.palette.background.paper, 0.5),\n      zIndex: 1,\n    },\n    '& .MuiDataGrid-cell': {\n      outline: 'none !important',\n    },\n    '& .MuiDataGrid-colCell': {\n      '& .MuiDataGrid-colCellTitleContainer': {\n        flex: 'none',\n      },\n      '& .MuiDataGrid-sortIcon': {\n        fontSize: 20, // for consistency w/ other icons\n      },\n      '& .MuiDataGrid-columnSeparator': {\n        pointerEvents: 'none',\n      },\n      '&:last-child': {\n        justifyContent: 'flex-end',\n        '& .MuiDataGrid-colCellTitleContainer': {\n          order: 1,\n        },\n        '& .MuiDataGrid-colCellTitle': {\n          order: 1,\n        },\n        '& .MuiDataGrid-columnSeparator': {\n          display: 'none',\n        },\n      },\n    },\n  },\n}))\n","import * as R from 'ramda'\nimport * as React from 'react'\nimport type { ResultOf } from '@graphql-typed-document-node/core'\nimport * as M from '@material-ui/core'\nimport { fade } from '@material-ui/core/styles'\nimport * as MDG from '@material-ui/data-grid'\n\nimport * as DG from 'components/DataGrid'\n\nimport { useDataGridStyles } from './DataGrid'\nimport type STATUS_QUERY from './gql/Status.generated'\n\ntype StatusResult = Extract<\n  ResultOf<typeof STATUS_QUERY>['status'],\n  { __typename: 'Status' }\n>\ntype Canary = StatusResult['canaries'][number]\n\ninterface State {\n  rows: {\n    allRows: string[]\n    idRowsLookup: Record<string, Canary>\n  }\n}\n\nconst countsByStateSelector = (state: State) =>\n  state.rows.allRows.reduce(\n    (acc, id) => {\n      const prop = {\n        true: 'passed',\n        false: 'failed',\n        null: 'running',\n      }[`${state.rows.idRowsLookup[id].ok}`]\n      return R.evolve({ [prop]: R.inc }, acc)\n    },\n    { passed: 0, failed: 0, running: 0 },\n  )\n\nconst useCountsByStateStyles = M.makeStyles((t) => ({\n  root: {\n    display: 'flex',\n    paddingLeft: t.spacing(2),\n  },\n  item: {\n    alignItems: 'center',\n    display: 'flex',\n\n    '& + &': {\n      marginLeft: t.spacing(2),\n    },\n  },\n  count: {\n    marginLeft: t.spacing(1),\n  },\n}))\n\nfunction CountsByState() {\n  const classes = useCountsByStateStyles()\n  const apiRef = React.useContext(MDG.GridApiContext)\n  const counts = MDG.useGridSelector(apiRef, countsByStateSelector)\n\n  const renderItem = (count: number, label: string, ok: boolean | null) =>\n    !!count && (\n      <M.Tooltip arrow title={label}>\n        <span className={classes.item}>\n          <StateIcon ok={ok} />\n          <span className={classes.count}>{count}</span>\n        </span>\n      </M.Tooltip>\n    )\n\n  return (\n    <div className={classes.root}>\n      {renderItem(counts.failed, 'Failed', false)}\n      {renderItem(counts.running, 'Running', null)}\n      {renderItem(counts.passed, 'Passed', true)}\n    </div>\n  )\n}\n\nconst Footer = React.forwardRef<HTMLDivElement, MDG.GridFooterContainerProps>(\n  function Footer(props, ref) {\n    const apiRef = React.useContext(MDG.GridApiContext)\n    const pagination = MDG.useGridSelector(apiRef, MDG.gridPaginationSelector)\n\n    const PaginationComponent =\n      pagination.pageSize != null && apiRef?.current.components.Pagination\n\n    const PaginationElement = PaginationComponent && (\n      <PaginationComponent {...apiRef?.current.componentsProps?.pagination} />\n    )\n\n    return (\n      <MDG.GridFooterContainer ref={ref} {...props}>\n        <CountsByState />\n        {PaginationElement}\n      </MDG.GridFooterContainer>\n    )\n  },\n)\n\nconst useStateIconStyles = M.makeStyles((t) => ({\n  ok_true: {\n    color: t.palette.info.main,\n  },\n  ok_false: {\n    color: t.palette.error.main,\n  },\n  ok_null: {\n    color: t.palette.text.secondary,\n  },\n}))\n\nfunction StateIcon({ ok }: { ok: boolean | null }) {\n  const classes = useStateIconStyles()\n  const icon = { true: 'check', false: 'error', null: 'watch_later' }[`${ok}`]\n  return <M.Icon className={classes[`ok_${ok}`]}>{icon}</M.Icon>\n}\n\nconst columns: DG.GridColumns = [\n  {\n    field: 'group',\n    headerName: 'Group',\n    width: 150,\n  },\n  {\n    field: 'title',\n    headerName: 'Title',\n    flex: 1,\n    renderCell: (params: DG.GridCellParams) => {\n      const c = params.row as Canary\n      const url = `https://${c.region}.console.aws.amazon.com/synthetics/cw?region=${c.region}#canary/detail/${c.name}`\n      return (\n        <M.Tooltip\n          arrow\n          title={\n            <>\n              {!!c.description && (\n                <>\n                  {c.description}\n                  <br />\n                  <br />\n                </>\n              )}\n              Click to go to AWS console\n            </>\n          }\n        >\n          <M.Link href={url} rel=\"noreferrer\" target=\"_blank\">\n            {params.value}\n          </M.Link>\n        </M.Tooltip>\n      )\n    },\n  },\n  {\n    field: 'schedule',\n    headerName: 'Schedule',\n    width: 160,\n  },\n  {\n    field: 'ok',\n    headerName: 'State',\n    width: 140,\n    valueGetter: (params) => {\n      const c = params.row as Canary\n      if (c.ok) return 'Passed'\n      if (c.ok === false) return 'Failed'\n      return 'Running'\n    },\n    renderCell: (params: DG.GridCellParams) => {\n      const c = params.row as Canary\n      return (\n        <>\n          <StateIcon ok={c.ok} />\n          <M.Box component=\"span\" ml={1}>\n            {params.value}\n          </M.Box>\n        </>\n      )\n    },\n  },\n  {\n    field: 'lastRun',\n    headerName: 'Last Run',\n    type: 'dateTime',\n    width: 200,\n    align: 'right',\n    renderCell: (params: DG.GridCellParams) => {\n      const c = params.row as Canary\n      return <>{c.lastRun?.toLocaleString() || 'N/A'}</>\n    },\n  },\n]\n\nconst useStyles = M.makeStyles((t) => ({\n  rowOk_true: {\n    background: fade(t.palette.info.light, 0.5),\n    '.MuiDataGrid-root &.MuiDataGrid-row:hover': {\n      background: t.palette.info.light,\n    },\n  },\n  rowOk_false: {\n    background: fade(t.palette.error.light, 0.2),\n    '.MuiDataGrid-root &.MuiDataGrid-row:hover': {\n      background: fade(t.palette.error.light, 0.3),\n    },\n  },\n  rowOk_null: {},\n}))\n\ninterface CanariesProps {\n  canaries: readonly Canary[]\n}\n\nexport default function Canaries({ canaries }: CanariesProps) {\n  const rowClasses = useStyles()\n  const classes = useDataGridStyles()\n\n  const canariesSorted = React.useMemo(\n    () =>\n      R.sortWith(\n        [\n          R.ascend((c) => ({ true: 2, false: 1, null: 0 }[`${c.ok}`])),\n          R.ascend(R.prop('title')),\n        ],\n        canaries,\n      ),\n    [canaries],\n  )\n\n  return (\n    <M.Paper className={classes.root}>\n      <div className={classes.header}>\n        <M.Typography variant=\"h6\">Canaries</M.Typography>\n      </div>\n      <DG.DataGrid\n        className={classes.grid}\n        rows={canariesSorted}\n        columns={columns}\n        getRowId={(r) => r.name}\n        autoHeight\n        components={{ Footer }}\n        getRowClassName={({ row }) => rowClasses[`rowOk_${row.ok as boolean | null}`]}\n        pagination\n        disableSelectionOnClick\n        disableColumnSelector\n        disableColumnResize\n        disableColumnReorder\n        disableMultipleSelection\n        disableMultipleColumnsSorting\n        localeText={{\n          columnMenuSortAsc: 'Sort ascending',\n          columnMenuSortDesc: 'Sort descending',\n        }}\n      />\n    </M.Paper>\n  )\n}\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type containers_Admin_Status_gql_ReportsQueryVariables = Types.Exact<{\n  page: Types.Scalars['Int']\n  perPage: Types.Scalars['Int']\n  filter: Types.StatusReportListFilter\n  order: Types.StatusReportListOrder\n}>\n\nexport type containers_Admin_Status_gql_ReportsQuery = {\n  readonly __typename: 'Query'\n} & {\n  readonly status:\n    | ({ readonly __typename: 'Status' } & {\n        readonly reports: { readonly __typename: 'StatusReportList' } & Pick<\n          Types.StatusReportList,\n          'total'\n        > & {\n            readonly page: ReadonlyArray<\n              { readonly __typename: 'StatusReport' } & Pick<\n                Types.StatusReport,\n                'timestamp' | 'renderedReportLocation'\n              >\n            >\n          }\n      })\n    | { readonly __typename: 'Unavailable' }\n}\n\nexport const containers_Admin_Status_gql_ReportsDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'containers_Admin_Status_gql_Reports' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'page' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'perPage' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'filter' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'StatusReportListFilter' },\n            },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'order' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'StatusReportListOrder' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'status' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'Status' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'reports' },\n                        arguments: [\n                          {\n                            kind: 'Argument',\n                            name: { kind: 'Name', value: 'filter' },\n                            value: {\n                              kind: 'Variable',\n                              name: { kind: 'Name', value: 'filter' },\n                            },\n                          },\n                        ],\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'total' } },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'page' },\n                              arguments: [\n                                {\n                                  kind: 'Argument',\n                                  name: { kind: 'Name', value: 'number' },\n                                  value: {\n                                    kind: 'Variable',\n                                    name: { kind: 'Name', value: 'page' },\n                                  },\n                                },\n                                {\n                                  kind: 'Argument',\n                                  name: { kind: 'Name', value: 'perPage' },\n                                  value: {\n                                    kind: 'Variable',\n                                    name: { kind: 'Name', value: 'perPage' },\n                                  },\n                                },\n                                {\n                                  kind: 'Argument',\n                                  name: { kind: 'Name', value: 'order' },\n                                  value: {\n                                    kind: 'Variable',\n                                    name: { kind: 'Name', value: 'order' },\n                                  },\n                                },\n                              ],\n                              selectionSet: {\n                                kind: 'SelectionSet',\n                                selections: [\n                                  {\n                                    kind: 'Field',\n                                    name: { kind: 'Name', value: 'timestamp' },\n                                  },\n                                  {\n                                    kind: 'Field',\n                                    name: {\n                                      kind: 'Name',\n                                      value: 'renderedReportLocation',\n                                    },\n                                  },\n                                ],\n                              },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_Status_gql_ReportsQuery,\n  containers_Admin_Status_gql_ReportsQueryVariables\n>\n\nexport { containers_Admin_Status_gql_ReportsDocument as default }\n","import * as dateFns from 'date-fns'\nimport invariant from 'invariant'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RRDom from 'react-router-dom'\nimport type * as urql from 'urql'\nimport type { ResultOf } from '@graphql-typed-document-node/core'\nimport * as M from '@material-ui/core'\n\nimport * as DG from 'components/DataGrid'\nimport * as Model from 'model'\nimport * as AWS from 'utils/AWS'\nimport { useBucketExistence } from 'utils/BucketCache'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport useQuery from 'utils/useQuery'\n\nimport { useDataGridStyles } from './DataGrid'\nimport REPORTS_QUERY from './gql/Reports.generated'\nimport type STATUS_QUERY from './gql/Status.generated'\n\ntype StatusResult = Extract<\n  ResultOf<typeof STATUS_QUERY>['status'],\n  { __typename: 'Status' }\n>\ntype StatusReport = StatusResult['reports']['page'][number]\n\ninterface ReportLinkProps {\n  loc: Model.S3.S3ObjectLocation\n}\n\nfunction ActualDownloadLink({ loc }: ReportLinkProps) {\n  const stack = loc.bucket.replace(/-statusreportsbucket-.*$/, '')\n  const url = AWS.Signer.useDownloadUrl(loc, {\n    filename: `status-${stack}-${loc.key}`,\n    contentType: 'text/html',\n  })\n  return (\n    <M.IconButton component=\"a\" href={url} rel=\"noreferrer\" target=\"_blank\" edge=\"end\">\n      <M.Icon>save_alt</M.Icon>\n    </M.IconButton>\n  )\n}\n\nfunction DownloadLink({ loc }: ReportLinkProps) {\n  // populate bucket region cache to get working signed urls\n  return useBucketExistence(loc.bucket).case({\n    Ok: () => (\n      <M.Tooltip title=\"Download report\">\n        <ActualDownloadLink loc={loc} />\n      </M.Tooltip>\n    ),\n    Err: (e: Error | undefined) => (\n      <M.Tooltip title={`Couldn't get download link: ${e?.message || 'unknown error'}`}>\n        <M.IconButton edge=\"end\">\n          <M.Icon>error_outline</M.Icon>\n        </M.IconButton>\n      </M.Tooltip>\n    ),\n    _: () => (\n      <M.Tooltip title=\"Getting download link\">\n        <M.IconButton edge=\"end\">\n          <M.CircularProgress size={24} color=\"inherit\" style={{ padding: '2px' }} />\n        </M.IconButton>\n      </M.Tooltip>\n    ),\n  })\n}\n\nfunction PreviewLink({ loc }: ReportLinkProps) {\n  const { urls } = NamedRoutes.use()\n  const url = urls.bucketFile(loc.bucket, loc.key, { version: loc.version })\n  return (\n    <M.Tooltip title=\"Preview in catalog\">\n      <M.IconButton component={RRDom.Link} to={url}>\n        <M.Icon>visibility</M.Icon>\n      </M.IconButton>\n    </M.Tooltip>\n  )\n}\n\ninterface ErrorOverlayProps {\n  error: urql.CombinedError\n  resetState: () => void\n}\n\nfunction ErrorOverlay({ error, resetState }: ErrorOverlayProps) {\n  return (\n    <M.Box pt={3} pb={4}>\n      <M.Typography variant=\"h6\" align=\"center\" gutterBottom>\n        An error occured\n      </M.Typography>\n      <M.Typography align=\"center\">{error.message}</M.Typography>\n      <M.Box pt={3} display=\"flex\" justifyContent=\"center\">\n        <M.Button onClick={resetState} variant=\"contained\" color=\"primary\">\n          Reset table state\n        </M.Button>\n      </M.Box>\n    </M.Box>\n  )\n}\n\nconst columns: DG.GridColumns = [\n  {\n    field: 'timestamp',\n    headerName: 'Timestamp (UTC)',\n    type: 'dateTime',\n    flex: 1,\n    renderCell: (params: DG.GridCellParams) => {\n      const ts = params.value as Date\n      const iso = ts.toISOString()\n      const utcStr = `${iso.substring(0, 10)} ${iso.substring(11, 19)}`\n      return <>{utcStr}</>\n    },\n    filterOperators: DG.getGridDateOperators().filter((op) =>\n      ['onOrAfter', 'onOrBefore', 'is'].includes(op.value),\n    ),\n  },\n  {\n    field: 'renderedReportLocation',\n    headerName: 'Actions',\n    width: 150,\n    disableColumnMenu: true,\n    filterable: false,\n    sortable: false,\n    align: 'right',\n    renderCell: (params: DG.GridCellParams) => {\n      const loc = params.value as Model.S3.S3ObjectLocation\n      return (\n        <>\n          <PreviewLink loc={loc} />\n          <DownloadLink loc={loc} />\n        </>\n      )\n    },\n  },\n]\n\nconst sortModelToOrder = (sm: DG.GridSortModel): Model.GQLTypes.StatusReportListOrder =>\n  sm[0].sort === 'desc'\n    ? Model.GQLTypes.StatusReportListOrder.NEW_FIRST\n    : Model.GQLTypes.StatusReportListOrder.OLD_FIRST\n\nconst filterModelToFilter = ({\n  items: [filterItem],\n}: DG.GridFilterModel): Model.GQLTypes.StatusReportListFilter => {\n  if (!filterItem?.operatorValue || !filterItem?.value)\n    return { timestampFrom: null, timestampTo: null }\n\n  const ts = new Date(filterItem.value)\n  const eod = dateFns.add(ts, { days: 1, seconds: -1 })\n\n  switch (filterItem.operatorValue) {\n    case 'is':\n      return { timestampFrom: ts, timestampTo: eod }\n    case 'onOrAfter':\n      return { timestampFrom: ts, timestampTo: null }\n    case 'onOrBefore':\n      return { timestampFrom: null, timestampTo: eod }\n    default:\n      throw new Error(`Unsupported operator '${filterItem.operatorValue}'`)\n  }\n}\n\ninterface ReportsProps {\n  total: number\n  firstPage: readonly StatusReport[]\n  defaultPerPage: number\n  defaultOrder: Model.GQLTypes.StatusReportListOrder\n}\n\nexport default function Reports({\n  total,\n  firstPage,\n  defaultPerPage,\n  defaultOrder,\n}: ReportsProps) {\n  const classes = useDataGridStyles()\n\n  const defaults = {\n    page: 1,\n    perPage: defaultPerPage,\n    filter: { timestampFrom: null, timestampTo: null },\n    order: defaultOrder,\n  }\n\n  const { current: fallbacks } = React.useRef({\n    rows: firstPage,\n    rowCount: total,\n  })\n\n  const [page, setPage] = React.useState(defaults.page)\n  const handlePageChange = React.useCallback((params: DG.GridPageChangeParams) => {\n    setPage(params.page + 1)\n  }, [])\n\n  const [pageSize, setPageSize] = React.useState(defaults.perPage)\n  const handlePageSizeChange = React.useCallback(\n    (params: DG.GridPageChangeParams) => {\n      if (pageSize === params.pageSize) return\n      setPageSize(params.pageSize)\n      // reset page when changing page size\n      setPage(1)\n    },\n    [pageSize],\n  )\n\n  const initialSortModel: DG.GridSortModel = React.useMemo(\n    () => [\n      {\n        field: 'timestamp',\n        sort:\n          defaults.order === Model.GQLTypes.StatusReportListOrder.NEW_FIRST\n            ? 'desc'\n            : 'asc',\n      },\n    ],\n    [defaults.order],\n  )\n  const [sortModel, setSortModel] = React.useState<DG.GridSortModel>(initialSortModel)\n  const handleSortModelChange = React.useCallback(\n    (params: DG.GridSortModelParams) => {\n      if (R.equals(sortModel, params.sortModel)) return\n      setSortModel(params.sortModel)\n      // reset page when changing sort order\n      setPage(1)\n    },\n    [sortModel],\n  )\n  const order = React.useMemo(() => sortModelToOrder(sortModel), [sortModel])\n\n  const initialFilterModel: DG.GridFilterModel = React.useMemo(() => ({ items: [] }), [])\n  const [filterModel, setFilterModel] =\n    React.useState<DG.GridFilterModel>(initialFilterModel)\n  const handleFilterModelChange = React.useCallback(\n    (params: DG.GridFilterModelParams) => {\n      if (R.equals(filterModel, params.filterModel)) return\n      setFilterModel(params.filterModel)\n      // reset page when changing filtering\n      setPage(1)\n    },\n    [filterModel],\n  )\n  const filter = React.useMemo(() => filterModelToFilter(filterModel), [filterModel])\n\n  const resetState = React.useCallback(() => {\n    setPage(1)\n    setPageSize(defaultPerPage)\n    setFilterModel(initialFilterModel)\n    setSortModel(initialSortModel)\n  }, [defaultPerPage, initialFilterModel, initialSortModel])\n\n  const variables = {\n    page,\n    perPage: pageSize,\n    filter,\n    order,\n  }\n\n  const pause = R.equals(defaults, variables)\n\n  const queryResult = useQuery({\n    query: REPORTS_QUERY,\n    pause,\n    variables,\n  })\n\n  invariant(queryResult.data?.status?.__typename !== 'Unavailable', 'Status unavalable')\n\n  const rows = (\n    pause ? firstPage : queryResult.data?.status?.reports.page ?? fallbacks.rows\n  ) as StatusReport[]\n  if (rows !== fallbacks.rows) fallbacks.rows = rows\n\n  const isFiltered = !R.equals(defaults.filter, variables.filter)\n\n  const rowCount = isFiltered\n    ? queryResult.data?.status?.reports.total ?? fallbacks.rowCount\n    : total\n  if (rowCount !== fallbacks.rowCount) fallbacks.rowCount = rowCount\n\n  const loading = pause ? false : queryResult.fetching\n  const error =\n    !pause && !loading && queryResult.error ? { error: queryResult.error } : null\n\n  return (\n    <M.Paper className={classes.root}>\n      <div className={classes.header}>\n        <M.Typography variant=\"h6\">Reports</M.Typography>\n      </div>\n      <DG.DataGrid\n        className={classes.grid}\n        rows={rows}\n        columns={columns}\n        getRowId={(r) => (r as StatusReport).timestamp.toISOString()}\n        autoHeight\n        components={{ ErrorOverlay }}\n        componentsProps={{ errorOverlay: { resetState } }}\n        disableSelectionOnClick\n        disableColumnSelector\n        disableColumnResize\n        disableColumnReorder\n        disableMultipleSelection\n        disableMultipleColumnsSorting\n        disableMultipleColumnsFiltering\n        localeText={{\n          columnMenuSortAsc: 'Sort ascending',\n          columnMenuSortDesc: 'Sort descending',\n          noRowsLabel: 'No reports',\n          filterOperatorIs: 'is on',\n        }}\n        sortingMode=\"server\"\n        sortingOrder={['desc', 'asc']}\n        sortModel={sortModel}\n        onSortModelChange={handleSortModelChange}\n        filterMode=\"server\"\n        filterModel={filterModel}\n        onFilterModelChange={handleFilterModelChange}\n        pagination\n        paginationMode=\"server\"\n        rowCount={rowCount}\n        onPageChange={handlePageChange}\n        page={page - 1}\n        pageSize={pageSize}\n        onPageSizeChange={handlePageSizeChange}\n        loading={loading}\n        error={error}\n      />\n    </M.Paper>\n  )\n}\n","import { useRef, useEffect, useCallback, useState, useMemo } from 'react';\n\n// This could've been more streamlined with internal state instead of abusing\n// refs to such extent, but then composing hooks and components could not opt out of unnecessary renders.\nfunction useResolvedElement(subscriber, refOrElement) {\n  var lastReportRef = useRef(null);\n  var refOrElementRef = useRef(null);\n  refOrElementRef.current = refOrElement;\n  var cbElementRef = useRef(null); // Calling re-evaluation after each render without using a dep array,\n  // as the ref object's current value could've changed since the last render.\n\n  useEffect(function () {\n    evaluateSubscription();\n  });\n  var evaluateSubscription = useCallback(function () {\n    var cbElement = cbElementRef.current;\n    var refOrElement = refOrElementRef.current; // Ugly ternary. But smaller than an if-else block.\n\n    var element = cbElement ? cbElement : refOrElement ? refOrElement instanceof Element ? refOrElement : refOrElement.current : null;\n\n    if (lastReportRef.current && lastReportRef.current.element === element && lastReportRef.current.subscriber === subscriber) {\n      return;\n    }\n\n    if (lastReportRef.current && lastReportRef.current.cleanup) {\n      lastReportRef.current.cleanup();\n    }\n\n    lastReportRef.current = {\n      element: element,\n      subscriber: subscriber,\n      // Only calling the subscriber, if there's an actual element to report.\n      // Setting cleanup to undefined unless a subscriber returns one, as an existing cleanup function would've been just called.\n      cleanup: element ? subscriber(element) : undefined\n    };\n  }, [subscriber]); // making sure we call the cleanup function on unmount\n\n  useEffect(function () {\n    return function () {\n      if (lastReportRef.current && lastReportRef.current.cleanup) {\n        lastReportRef.current.cleanup();\n        lastReportRef.current = null;\n      }\n    };\n  }, []);\n  return useCallback(function (element) {\n    cbElementRef.current = element;\n    evaluateSubscription();\n  }, [evaluateSubscription]);\n}\n\n// We're only using the first element of the size sequences, until future versions of the spec solidify on how\n// exactly it'll be used for fragments in multi-column scenarios:\n// From the spec:\n// > The box size properties are exposed as FrozenArray in order to support elements that have multiple fragments,\n// > which occur in multi-column scenarios. However the current definitions of content rect and border box do not\n// > mention how those boxes are affected by multi-column layout. In this spec, there will only be a single\n// > ResizeObserverSize returned in the FrozenArray, which will correspond to the dimensions of the first column.\n// > A future version of this spec will extend the returned FrozenArray to contain the per-fragment size information.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-entry-interface)\n//\n// Also, testing these new box options revealed that in both Chrome and FF everything is returned in the callback,\n// regardless of the \"box\" option.\n// The spec states the following on this:\n// > This does not have any impact on which box dimensions are returned to the defined callback when the event\n// > is fired, it solely defines which box the author wishes to observe layout changes on.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// I'm not exactly clear on what this means, especially when you consider a later section stating the following:\n// > This section is non-normative. An author may desire to observe more than one CSS box.\n// > In this case, author will need to use multiple ResizeObservers.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.\n// For this reason I decided to only return the requested size,\n// even though it seems we have access to results for all box types.\n// This also means that we get to keep the current api, being able to return a simple { width, height } pair,\n// regardless of box option.\nfunction extractSize(entry, boxProp, sizeType) {\n  if (!entry[boxProp]) {\n    if (boxProp === \"contentBoxSize\") {\n      // The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.\n      // See the 6th step in the description for the RO algorithm:\n      // https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h\n      // > Set this.contentRect to logical this.contentBoxSize given target and observedBox of \"content-box\".\n      // In real browser implementations of course these objects differ, but the width/height values should be equivalent.\n      return entry.contentRect[sizeType === \"inlineSize\" ? \"width\" : \"height\"];\n    }\n\n    return undefined;\n  } // A couple bytes smaller than calling Array.isArray() and just as effective here.\n\n\n  return entry[boxProp][0] ? entry[boxProp][0][sizeType] : // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's current\n  // behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.\n  // @ts-ignore\n  entry[boxProp][sizeType];\n}\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver.\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize;\n  var round = opts.round || Math.round; // Using a single instance throughout the hook's lifetime\n\n  var resizeObserverRef = useRef();\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after\n  // the component unmounted.\n\n\n  var didUnmount = useRef(false);\n  useEffect(function () {\n    didUnmount.current = false;\n    return function () {\n      didUnmount.current = true;\n    };\n  }, []); // Using a ref to track the previous width / height to avoid unnecessary renders.\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  }); // This block is kinda like a useEffect, only it's called whenever a new\n  // element could be resolved based on the ref option. It also has a cleanup\n  // function.\n\n  var refCallback = useResolvedElement(useCallback(function (element) {\n    // We only use a single Resize Observer instance, and we're instantiating it on demand, only once there's something to observe.\n    // This instance is also recreated when the `box` option changes, so that a new observation is fired if there was a previously observed element with a different box option.\n    if (!resizeObserverRef.current || resizeObserverRef.current.box !== opts.box || resizeObserverRef.current.round !== round) {\n      resizeObserverRef.current = {\n        box: opts.box,\n        round: round,\n        instance: new ResizeObserver(function (entries) {\n          var entry = entries[0];\n          var boxProp = opts.box === \"border-box\" ? \"borderBoxSize\" : opts.box === \"device-pixel-content-box\" ? \"devicePixelContentBoxSize\" : \"contentBoxSize\";\n          var reportedWidth = extractSize(entry, boxProp, \"inlineSize\");\n          var reportedHeight = extractSize(entry, boxProp, \"blockSize\");\n          var newWidth = reportedWidth ? round(reportedWidth) : undefined;\n          var newHeight = reportedHeight ? round(reportedHeight) : undefined;\n\n          if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n            var newSize = {\n              width: newWidth,\n              height: newHeight\n            };\n            previous.current.width = newWidth;\n            previous.current.height = newHeight;\n\n            if (onResizeRef.current) {\n              onResizeRef.current(newSize);\n            } else {\n              if (!didUnmount.current) {\n                setSize(newSize);\n              }\n            }\n          }\n        })\n      };\n    }\n\n    resizeObserverRef.current.instance.observe(element, {\n      box: opts.box\n    });\n    return function () {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.instance.unobserve(element);\n      }\n    };\n  }, [opts.box, round]), opts.ref);\n  return useMemo(function () {\n    return {\n      ref: refCallback,\n      width: size.width,\n      height: size.height\n    };\n  }, [refCallback, size.width, size.height]);\n}\n\nexport { useResizeObserver as default };\n","import * as echarts from 'echarts'\nimport * as React from 'react'\nimport * as R from 'ramda'\nimport useResizeObserver from 'use-resize-observer'\nimport * as M from '@material-ui/core'\n\nimport { createBoundary } from 'utils/ErrorBoundary'\nimport useMemoEq from 'utils/useMemoEq'\n\nexport type DisposeHook = () => void\nexport type InitHook = (chart: echarts.ECharts) => DisposeHook | void\n\ninterface ChartInnerProps {\n  option: echarts.EChartsOption\n  resize?: boolean\n  theme?: Parameters<typeof echarts.init>[1]\n  initOptions?: Parameters<typeof echarts.init>[2]\n  onInit?: InitHook\n}\n\nfunction ChartInner({\n  option,\n  resize = true,\n  theme = undefined,\n  initOptions = undefined,\n  onInit = undefined,\n  ...props\n}: ChartInnerProps & M.BoxProps) {\n  const [error, setError] = React.useState<unknown>(null)\n  if (error) throw error\n\n  const containerRef = React.useRef<HTMLDivElement | null>(null)\n  const chartRef = React.useRef<echarts.ECharts | null>(null)\n  const initArgs = useMemoEq([theme, initOptions] as const, R.identity)\n  const optionMemo = useMemoEq(option, R.identity)\n  const onInitRef = React.useRef<InitHook | undefined>()\n  onInitRef.current = onInit\n\n  React.useEffect(() => {\n    if (!containerRef.current) return\n    try {\n      const chart = echarts.init(containerRef.current, ...initArgs)\n      // XXX: consider accepting setOption opts via props (notMerge, replaceMerge, lazyUpdate)\n      chart.setOption(optionMemo)\n      const { current: onInitCur } = onInitRef\n      let dispose: DisposeHook | void = undefined\n      if (onInitCur) dispose = onInitCur(chart)\n      chartRef.current = chart\n      return () => {\n        if (chartRef.current === chart) chartRef.current = null\n        if (dispose) dispose()\n        chart.dispose()\n      }\n    } catch (e) {\n      setError(e)\n    }\n  }, [containerRef, initArgs, optionMemo, onInitRef])\n\n  const size = useResizeObserver({ ref: containerRef })\n  const sizeStr =\n    size.width != null && size.height != null ? `${size.width}x${size.height}` : ''\n\n  React.useEffect(() => {\n    if (resize && sizeStr) chartRef.current?.resize()\n  }, [resize, sizeStr, chartRef])\n\n  return <M.Box ref={containerRef} {...props} />\n}\n\n// XXX: consider using react-error-boundary package\n// TODO: log error\n// TODO: nice customizable display\nconst ChartErrorBoundary = createBoundary(\n  (props: $TSFixMe /* , { reset }: $TSFixMe */) =>\n    (/* error: $TSFixMe, info: $TSFixMe */) =>\n      (\n        // console.log('ChartErrorBoundary', { error, info }),\n        <M.Typography variant=\"h6\" {...props}>\n          Unexpected Error\n        </M.Typography>\n      ),\n  'ChartErrorBoundary',\n)\n\nexport type ChartProps = ChartInnerProps & M.BoxProps\n\nexport function Chart({ option, ...props }: ChartProps) {\n  // TODO: pass props to error boundary, make it customizable\n  return (\n    <ChartErrorBoundary>\n      <ChartInner option={option} {...props} />\n    </ChartErrorBoundary>\n  )\n}\n\nexport default Chart\n","import * as React from 'react'\nimport type { ResultOf } from '@graphql-typed-document-node/core'\nimport * as M from '@material-ui/core'\n\nimport * as Chart from 'components/EChartsChart'\n\nimport type STATUS_QUERY from './gql/Status.generated'\n\ntype StatusResult = Extract<\n  ResultOf<typeof STATUS_QUERY>['status'],\n  { __typename: 'Status' }\n>\n\nconst CHART_COLORS = [M.colors.red[300], M.colors.lightBlue[300], M.colors.grey[400]]\n\nconst useStyles = M.makeStyles({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  donut: {\n    height: '300px',\n    width: '300px',\n  },\n  history: {\n    flex: 1,\n    height: '300px',\n    minWidth: '350px',\n    width: 'calc(100% - 300px)',\n  },\n})\n\ninterface StatsProps {\n  latest: StatusResult['latestStats']\n  stats: StatusResult['stats']\n  statsWindow: number\n}\n\nexport default function Stats({ latest, stats, statsWindow }: StatsProps) {\n  const classes = useStyles()\n  const t = M.useTheme()\n  const titleTextProps = {\n    textStyle: {\n      fontFamily: t.typography.h6.fontFamily,\n      fontSize: t.typography.h6.fontSize,\n      fontWeight: t.typography.h6.fontWeight,\n    },\n    left: 'center',\n    top: 16,\n  }\n  const total = latest.passed + latest.failed\n\n  const handleInit: Chart.InitHook = (chart) => {\n    // highlight passed tests data by default\n    const passedIndex = 1\n    const hlDefault = () =>\n      chart.dispatchAction({ type: 'highlight', dataIndex: passedIndex })\n\n    hlDefault()\n\n    chart.on('mouseover', (e) => {\n      if (e.dataIndex === passedIndex) return\n      chart.dispatchAction({ type: 'downplay', dataIndex: passedIndex })\n    })\n\n    chart.on('mouseout', hlDefault)\n\n    return () => {\n      chart.off('mouseover')\n      chart.off('mouseout')\n    }\n  }\n\n  return (\n    <M.Paper className={classes.root}>\n      <Chart.Chart\n        className={classes.donut}\n        onInit={handleInit}\n        option={{\n          // @ts-expect-error\n          title: {\n            text: 'Current Operational Status',\n            ...titleTextProps,\n          },\n          color: CHART_COLORS,\n          series: [\n            {\n              type: 'pie',\n              radius: ['30%', '60%'],\n              label: {\n                formatter: `{main|{b}}\\n{sub|{c}/${total} tests}`,\n                show: false,\n                position: 'center',\n                fontFamily: t.typography.subtitle1.fontFamily,\n                rich: {\n                  main: {\n                    fontSize: t.typography.subtitle1.fontSize,\n                    // @ts-expect-error\n                    fontWeight: t.typography.subtitle1.fontWeight,\n                    lineHeight: 24,\n                  },\n                  sub: {\n                    fontSize: t.typography.subtitle2.fontSize,\n                    // @ts-expect-error\n                    fontWeight: t.typography.subtitle2.fontWeight,\n                    lineHeight: 16,\n                  },\n                },\n              },\n              emphasis: {\n                label: {\n                  show: true,\n                },\n              },\n              data: [\n                { value: latest.failed, name: 'Failed' },\n                { value: latest.passed, name: 'Passed' },\n                { value: latest.running, name: 'Running' },\n              ],\n            },\n          ],\n        }}\n      />\n      <Chart.Chart\n        className={classes.history}\n        resize\n        option={{\n          // @ts-expect-error\n          title: {\n            text: `Operational Statistics for Past ${statsWindow} Days`,\n            ...titleTextProps,\n          },\n          color: CHART_COLORS,\n          tooltip: { trigger: 'axis' },\n          xAxis: [\n            {\n              data: stats.datetimes.map((d) =>\n                d.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }),\n              ),\n            },\n          ],\n          yAxis: [{ type: 'value' }],\n          series: [\n            {\n              type: 'line',\n              name: 'Failed',\n              stack: 'Total',\n              areaStyle: {},\n              data: stats.failed as number[],\n            },\n            {\n              type: 'line',\n              name: 'Passed',\n              stack: 'Total',\n              areaStyle: {},\n              data: stats.passed as number[],\n            },\n          ],\n        }}\n      />\n    </M.Paper>\n  )\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type containers_Admin_Status_gql_StatusQueryVariables = Types.Exact<{\n  statsWindow: Types.Scalars['Int']\n  reportsPerPage: Types.Scalars['Int']\n  reportsOrder: Types.StatusReportListOrder\n}>\n\nexport type containers_Admin_Status_gql_StatusQuery = { readonly __typename: 'Query' } & {\n  readonly status:\n    | ({ readonly __typename: 'Status' } & {\n        readonly canaries: ReadonlyArray<\n          { readonly __typename: 'Canary' } & Pick<\n            Types.Canary,\n            | 'name'\n            | 'region'\n            | 'group'\n            | 'title'\n            | 'description'\n            | 'schedule'\n            | 'ok'\n            | 'lastRun'\n          >\n        >\n        readonly latestStats: { readonly __typename: 'TestStats' } & Pick<\n          Types.TestStats,\n          'passed' | 'failed' | 'running'\n        >\n        readonly stats: { readonly __typename: 'TestStatsTimeSeries' } & Pick<\n          Types.TestStatsTimeSeries,\n          'datetimes' | 'passed' | 'failed'\n        >\n        readonly reports: { readonly __typename: 'StatusReportList' } & Pick<\n          Types.StatusReportList,\n          'total'\n        > & {\n            readonly page: ReadonlyArray<\n              { readonly __typename: 'StatusReport' } & Pick<\n                Types.StatusReport,\n                'timestamp' | 'renderedReportLocation'\n              >\n            >\n          }\n      })\n    | { readonly __typename: 'Unavailable' }\n}\n\nexport const containers_Admin_Status_gql_StatusDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'containers_Admin_Status_gql_Status' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'statsWindow' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'reportsPerPage' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'reportsOrder' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'StatusReportListOrder' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'status' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'Status' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'canaries' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'region' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'group' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'title' } },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'description' },\n                            },\n                            { kind: 'Field', name: { kind: 'Name', value: 'schedule' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'ok' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'lastRun' } },\n                          ],\n                        },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'latestStats' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'passed' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'failed' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'running' } },\n                          ],\n                        },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'stats' },\n                        arguments: [\n                          {\n                            kind: 'Argument',\n                            name: { kind: 'Name', value: 'window' },\n                            value: {\n                              kind: 'Variable',\n                              name: { kind: 'Name', value: 'statsWindow' },\n                            },\n                          },\n                        ],\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'datetimes' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'passed' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'failed' } },\n                          ],\n                        },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'reports' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'total' } },\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'page' },\n                              arguments: [\n                                {\n                                  kind: 'Argument',\n                                  name: { kind: 'Name', value: 'perPage' },\n                                  value: {\n                                    kind: 'Variable',\n                                    name: { kind: 'Name', value: 'reportsPerPage' },\n                                  },\n                                },\n                                {\n                                  kind: 'Argument',\n                                  name: { kind: 'Name', value: 'order' },\n                                  value: {\n                                    kind: 'Variable',\n                                    name: { kind: 'Name', value: 'reportsOrder' },\n                                  },\n                                },\n                              ],\n                              selectionSet: {\n                                kind: 'SelectionSet',\n                                selections: [\n                                  {\n                                    kind: 'Field',\n                                    name: { kind: 'Name', value: 'timestamp' },\n                                  },\n                                  {\n                                    kind: 'Field',\n                                    name: {\n                                      kind: 'Name',\n                                      value: 'renderedReportLocation',\n                                    },\n                                  },\n                                ],\n                              },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_Status_gql_StatusQuery,\n  containers_Admin_Status_gql_StatusQueryVariables\n>\n\nexport { containers_Admin_Status_gql_StatusDocument as default }\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nimport * as Model from 'model'\nimport MetaTitle from 'utils/MetaTitle'\nimport useQuery from 'utils/useQuery'\n\nimport Canaries from './Canaries'\nimport Reports from './Reports'\nimport Stats from './Stats'\nimport STATUS_QUERY from './gql/Status.generated'\n\nconst STATS_WINDOW = 30\nconst DEFAULT_REPORTS_PER_PAGE = 25\nconst DEFAULT_REPORTS_ORDER = Model.GQLTypes.StatusReportListOrder.NEW_FIRST\n\nexport default function Status() {\n  const { status } = useQuery({\n    query: STATUS_QUERY,\n    variables: {\n      statsWindow: STATS_WINDOW,\n      reportsPerPage: DEFAULT_REPORTS_PER_PAGE,\n      reportsOrder: DEFAULT_REPORTS_ORDER,\n    },\n    suspend: true,\n  }).data!\n\n  return (\n    <M.Box my={2}>\n      <MetaTitle>{['Status', 'Admin']}</MetaTitle>\n      {status.__typename === 'Status' ? (\n        <>\n          <Stats\n            latest={status.latestStats}\n            stats={status.stats}\n            statsWindow={STATS_WINDOW}\n          />\n          <M.Box pt={2} />\n          <Canaries canaries={status.canaries} />\n          <M.Box pt={2} />\n          <Reports\n            total={status.reports.total}\n            firstPage={status.reports.page}\n            defaultPerPage={DEFAULT_REPORTS_PER_PAGE}\n            defaultOrder={DEFAULT_REPORTS_ORDER}\n          />\n        </>\n      ) : (\n        <M.Box py={2}>\n          <M.Typography variant=\"h4\" align=\"center\" gutterBottom>\n            No Data\n          </M.Typography>\n          <M.Typography align=\"center\">\n            Status monitoring is not enabled for this stack\n          </M.Typography>\n        </M.Box>\n      )}\n    </M.Box>\n  )\n}\n","import type { Json, JsonRecord } from 'utils/types'\nimport type { PackageContentsFlatMap } from 'model'\nimport type { S3ObjectLocation } from 'model/S3'\n\nexport type Maybe<T> = T | null\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>\n}\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>\n}\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  Datetime: Date\n  Json: Json\n  JsonRecord: JsonRecord\n  PackageContentsFlatMap: PackageContentsFlatMap\n  S3ObjectLocation: S3ObjectLocation\n}\n\nexport interface AccessCountForDate {\n  readonly __typename: 'AccessCountForDate'\n  readonly date: Scalars['Datetime']\n  readonly value: Scalars['Int']\n}\n\nexport interface AccessCounts {\n  readonly __typename: 'AccessCounts'\n  readonly total: Scalars['Int']\n  readonly counts: ReadonlyArray<AccessCountForDate>\n}\n\nexport interface BucketAddInput {\n  readonly name: Scalars['String']\n  readonly title: Scalars['String']\n  readonly iconUrl: Maybe<Scalars['String']>\n  readonly description: Maybe<Scalars['String']>\n  readonly linkedData: Maybe<Scalars['Json']>\n  readonly overviewUrl: Maybe<Scalars['String']>\n  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly relevanceScore: Maybe<Scalars['Int']>\n  readonly snsNotificationArn: Maybe<Scalars['String']>\n  readonly scannerParallelShardsDepth: Maybe<Scalars['Int']>\n  readonly skipMetaDataIndexing: Maybe<Scalars['Boolean']>\n  readonly fileExtensionsToIndex: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly indexContentBytes: Maybe<Scalars['Int']>\n  readonly delayScan: Maybe<Scalars['Boolean']>\n}\n\nexport type BucketAddResult =\n  | BucketAddSuccess\n  | BucketAlreadyAdded\n  | BucketDoesNotExist\n  | BucketFileExtensionsToIndexInvalid\n  | BucketIndexContentBytesInvalid\n  | InsufficientPermissions\n  | NotificationConfigurationError\n  | NotificationTopicNotFound\n  | SnsInvalid\n\nexport interface BucketAddSuccess {\n  readonly __typename: 'BucketAddSuccess'\n  readonly bucketConfig: BucketConfig\n}\n\nexport interface BucketAlreadyAdded {\n  readonly __typename: 'BucketAlreadyAdded'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketConfig {\n  readonly __typename: 'BucketConfig'\n  readonly name: Scalars['String']\n  readonly title: Scalars['String']\n  readonly iconUrl: Maybe<Scalars['String']>\n  readonly description: Maybe<Scalars['String']>\n  readonly linkedData: Maybe<Scalars['Json']>\n  readonly overviewUrl: Maybe<Scalars['String']>\n  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly relevanceScore: Scalars['Int']\n  readonly lastIndexed: Maybe<Scalars['Datetime']>\n  readonly snsNotificationArn: Maybe<Scalars['String']>\n  readonly scannerParallelShardsDepth: Maybe<Scalars['Int']>\n  readonly skipMetaDataIndexing: Maybe<Scalars['Boolean']>\n  readonly fileExtensionsToIndex: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly indexContentBytes: Maybe<Scalars['Int']>\n  readonly associatedPolicies: ReadonlyArray<PolicyBucketPermission>\n  readonly associatedRoles: ReadonlyArray<RoleBucketPermission>\n  readonly collaborators: ReadonlyArray<CollaboratorBucketConnection>\n}\n\nexport interface BucketDoesNotExist {\n  readonly __typename: 'BucketDoesNotExist'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketFileExtensionsToIndexInvalid {\n  readonly __typename: 'BucketFileExtensionsToIndexInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketIndexContentBytesInvalid {\n  readonly __typename: 'BucketIndexContentBytesInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketNotFound {\n  readonly __typename: 'BucketNotFound'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketPermission {\n  readonly bucket: BucketConfig\n  readonly level: BucketPermissionLevel\n}\n\nexport enum BucketPermissionLevel {\n  READ = 'READ',\n  READ_WRITE = 'READ_WRITE',\n}\n\nexport type BucketRemoveResult = BucketRemoveSuccess | BucketNotFound | IndexingInProgress\n\nexport interface BucketRemoveSuccess {\n  readonly __typename: 'BucketRemoveSuccess'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketUpdateInput {\n  readonly title: Scalars['String']\n  readonly iconUrl: Maybe<Scalars['String']>\n  readonly description: Maybe<Scalars['String']>\n  readonly linkedData: Maybe<Scalars['Json']>\n  readonly overviewUrl: Maybe<Scalars['String']>\n  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly relevanceScore: Maybe<Scalars['Int']>\n  readonly snsNotificationArn: Maybe<Scalars['String']>\n  readonly scannerParallelShardsDepth: Maybe<Scalars['Int']>\n  readonly skipMetaDataIndexing: Maybe<Scalars['Boolean']>\n  readonly fileExtensionsToIndex: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly indexContentBytes: Maybe<Scalars['Int']>\n}\n\nexport type BucketUpdateResult =\n  | BucketUpdateSuccess\n  | BucketFileExtensionsToIndexInvalid\n  | BucketIndexContentBytesInvalid\n  | BucketNotFound\n  | NotificationConfigurationError\n  | NotificationTopicNotFound\n  | SnsInvalid\n\nexport interface BucketUpdateSuccess {\n  readonly __typename: 'BucketUpdateSuccess'\n  readonly bucketConfig: BucketConfig\n}\n\nexport interface Canary {\n  readonly __typename: 'Canary'\n  readonly name: Scalars['String']\n  readonly region: Scalars['String']\n  readonly group: Scalars['String']\n  readonly title: Scalars['String']\n  readonly description: Scalars['String']\n  readonly schedule: Scalars['String']\n  readonly ok: Maybe<Scalars['Boolean']>\n  readonly lastRun: Maybe<Scalars['Datetime']>\n}\n\nexport interface Collaborator {\n  readonly __typename: 'Collaborator'\n  readonly email: Scalars['String']\n  readonly username: Scalars['String']\n}\n\nexport interface CollaboratorBucketConnection {\n  readonly __typename: 'CollaboratorBucketConnection'\n  readonly collaborator: Collaborator\n  readonly permissionLevel: BucketPermissionLevel\n}\n\nexport interface Config {\n  readonly __typename: 'Config'\n  readonly contentIndexingSettings: ContentIndexingSettings\n}\n\nexport interface ContentIndexingSettings {\n  readonly __typename: 'ContentIndexingSettings'\n  readonly extensions: ReadonlyArray<Scalars['String']>\n  readonly bytesDefault: Scalars['Int']\n  readonly bytesMin: Scalars['Int']\n  readonly bytesMax: Scalars['Int']\n}\n\nexport interface IndexingInProgress {\n  readonly __typename: 'IndexingInProgress'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface InputError {\n  readonly __typename: 'InputError'\n  readonly path: Maybe<Scalars['String']>\n  readonly message: Scalars['String']\n  readonly name: Scalars['String']\n  readonly context: Maybe<Scalars['JsonRecord']>\n}\n\nexport interface InsufficientPermissions {\n  readonly __typename: 'InsufficientPermissions'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface InvalidInput {\n  readonly __typename: 'InvalidInput'\n  readonly errors: ReadonlyArray<InputError>\n}\n\nexport interface ManagedPolicyInput {\n  readonly title: Scalars['String']\n  readonly permissions: ReadonlyArray<PermissionInput>\n  readonly roles: ReadonlyArray<Scalars['ID']>\n}\n\nexport interface ManagedRole {\n  readonly __typename: 'ManagedRole'\n  readonly id: Scalars['ID']\n  readonly name: Scalars['String']\n  readonly arn: Scalars['String']\n  readonly policies: ReadonlyArray<Policy>\n  readonly permissions: ReadonlyArray<RoleBucketPermission>\n}\n\nexport interface ManagedRoleInput {\n  readonly name: Scalars['String']\n  readonly policies: ReadonlyArray<Scalars['ID']>\n}\n\nexport interface Mutation {\n  readonly __typename: 'Mutation'\n  readonly packageConstruct: PackageConstructResult\n  readonly packagePromote: PackagePromoteResult\n  readonly packageFromFolder: PackageFromFolderResult\n  readonly packageRevisionDelete: PackageRevisionDeleteResult\n  readonly bucketAdd: BucketAddResult\n  readonly bucketUpdate: BucketUpdateResult\n  readonly bucketRemove: BucketRemoveResult\n  readonly policyCreateManaged: PolicyResult\n  readonly policyCreateUnmanaged: PolicyResult\n  readonly policyUpdateManaged: PolicyResult\n  readonly policyUpdateUnmanaged: PolicyResult\n  readonly policyDelete: PolicyDeleteResult\n  readonly roleCreateManaged: RoleCreateResult\n  readonly roleCreateUnmanaged: RoleCreateResult\n  readonly roleUpdateManaged: RoleUpdateResult\n  readonly roleUpdateUnmanaged: RoleUpdateResult\n  readonly roleDelete: RoleDeleteResult\n  readonly roleSetDefault: RoleSetDefaultResult\n}\n\nexport interface MutationpackageConstructArgs {\n  params: PackagePushParams\n  src: PackageConstructSource\n}\n\nexport interface MutationpackagePromoteArgs {\n  params: PackagePushParams\n  src: PackagePromoteSource\n}\n\nexport interface MutationpackageFromFolderArgs {\n  params: PackagePushParams\n  src: PackageFromFolderSource\n}\n\nexport interface MutationpackageRevisionDeleteArgs {\n  bucket: Scalars['String']\n  name: Scalars['String']\n  hash: Scalars['String']\n}\n\nexport interface MutationbucketAddArgs {\n  input: BucketAddInput\n}\n\nexport interface MutationbucketUpdateArgs {\n  name: Scalars['String']\n  input: BucketUpdateInput\n}\n\nexport interface MutationbucketRemoveArgs {\n  name: Scalars['String']\n}\n\nexport interface MutationpolicyCreateManagedArgs {\n  input: ManagedPolicyInput\n}\n\nexport interface MutationpolicyCreateUnmanagedArgs {\n  input: UnmanagedPolicyInput\n}\n\nexport interface MutationpolicyUpdateManagedArgs {\n  id: Scalars['ID']\n  input: ManagedPolicyInput\n}\n\nexport interface MutationpolicyUpdateUnmanagedArgs {\n  id: Scalars['ID']\n  input: UnmanagedPolicyInput\n}\n\nexport interface MutationpolicyDeleteArgs {\n  id: Scalars['ID']\n}\n\nexport interface MutationroleCreateManagedArgs {\n  input: ManagedRoleInput\n}\n\nexport interface MutationroleCreateUnmanagedArgs {\n  input: UnmanagedRoleInput\n}\n\nexport interface MutationroleUpdateManagedArgs {\n  id: Scalars['ID']\n  input: ManagedRoleInput\n}\n\nexport interface MutationroleUpdateUnmanagedArgs {\n  id: Scalars['ID']\n  input: UnmanagedRoleInput\n}\n\nexport interface MutationroleDeleteArgs {\n  id: Scalars['ID']\n}\n\nexport interface MutationroleSetDefaultArgs {\n  id: Scalars['ID']\n}\n\nexport interface NotificationConfigurationError {\n  readonly __typename: 'NotificationConfigurationError'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface NotificationTopicNotFound {\n  readonly __typename: 'NotificationTopicNotFound'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface Ok {\n  readonly __typename: 'Ok'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface OperationError {\n  readonly __typename: 'OperationError'\n  readonly message: Scalars['String']\n  readonly name: Scalars['String']\n  readonly context: Maybe<Scalars['JsonRecord']>\n}\n\nexport interface Package {\n  readonly __typename: 'Package'\n  readonly bucket: Scalars['String']\n  readonly name: Scalars['String']\n  readonly modified: Scalars['Datetime']\n  readonly revisions: PackageRevisionList\n  readonly revision: Maybe<PackageRevision>\n  readonly accessCounts: Maybe<AccessCounts>\n}\n\nexport interface PackagerevisionArgs {\n  hashOrTag?: Maybe<Scalars['String']>\n}\n\nexport interface PackageaccessCountsArgs {\n  window?: Maybe<Scalars['Int']>\n}\n\nexport interface PackageConstructEntry {\n  readonly logicalKey: Scalars['String']\n  readonly physicalKey: Scalars['String']\n  readonly hash: Maybe<Scalars['String']>\n  readonly size: Maybe<Scalars['Float']>\n  readonly meta: Maybe<Scalars['JsonRecord']>\n}\n\nexport type PackageConstructResult = PackagePushSuccess | InvalidInput | OperationError\n\nexport interface PackageConstructSource {\n  readonly entries: ReadonlyArray<PackageConstructEntry>\n}\n\nexport interface PackageDir {\n  readonly __typename: 'PackageDir'\n  readonly path: Scalars['String']\n  readonly metadata: Maybe<Scalars['JsonRecord']>\n  readonly size: Scalars['Float']\n  readonly children: ReadonlyArray<PackageEntry>\n}\n\nexport type PackageEntry = PackageFile | PackageDir\n\nexport interface PackageFile {\n  readonly __typename: 'PackageFile'\n  readonly path: Scalars['String']\n  readonly metadata: Maybe<Scalars['JsonRecord']>\n  readonly size: Scalars['Float']\n  readonly physicalKey: Scalars['String']\n}\n\nexport interface PackageFromFolderEntry {\n  readonly isDir: Scalars['Boolean']\n  readonly logicalKey: Scalars['String']\n  readonly path: Scalars['String']\n}\n\nexport type PackageFromFolderResult = PackagePushSuccess | InvalidInput | OperationError\n\nexport interface PackageFromFolderSource {\n  readonly bucket: Scalars['String']\n  readonly entries: ReadonlyArray<PackageFromFolderEntry>\n}\n\nexport interface PackageList {\n  readonly __typename: 'PackageList'\n  readonly total: Scalars['Int']\n  readonly page: ReadonlyArray<Package>\n}\n\nexport interface PackageListpageArgs {\n  number?: Maybe<Scalars['Int']>\n  perPage?: Maybe<Scalars['Int']>\n  order?: Maybe<PackageListOrder>\n}\n\nexport enum PackageListOrder {\n  NAME = 'NAME',\n  MODIFIED = 'MODIFIED',\n}\n\nexport type PackagePromoteResult = PackagePushSuccess | InvalidInput | OperationError\n\nexport interface PackagePromoteSource {\n  readonly bucket: Scalars['String']\n  readonly name: Scalars['String']\n  readonly hash: Scalars['String']\n}\n\nexport interface PackagePushParams {\n  readonly message: Maybe<Scalars['String']>\n  readonly userMeta: Maybe<Scalars['JsonRecord']>\n  readonly workflow: Maybe<Scalars['String']>\n  readonly bucket: Scalars['String']\n  readonly name: Scalars['String']\n}\n\nexport interface PackagePushSuccess {\n  readonly __typename: 'PackagePushSuccess'\n  readonly package: Package\n  readonly revision: PackageRevision\n}\n\nexport interface PackageRevision {\n  readonly __typename: 'PackageRevision'\n  readonly hash: Scalars['String']\n  readonly modified: Scalars['Datetime']\n  readonly message: Maybe<Scalars['String']>\n  readonly metadata: Scalars['JsonRecord']\n  readonly userMeta: Maybe<Scalars['JsonRecord']>\n  readonly workflow: Maybe<PackageWorkflow>\n  readonly totalEntries: Maybe<Scalars['Int']>\n  readonly totalBytes: Maybe<Scalars['Float']>\n  readonly dir: Maybe<PackageDir>\n  readonly file: Maybe<PackageFile>\n  readonly accessCounts: Maybe<AccessCounts>\n  readonly contentsFlatMap: Maybe<Scalars['PackageContentsFlatMap']>\n}\n\nexport interface PackageRevisiondirArgs {\n  path: Scalars['String']\n}\n\nexport interface PackageRevisionfileArgs {\n  path: Scalars['String']\n}\n\nexport interface PackageRevisionaccessCountsArgs {\n  window?: Maybe<Scalars['Int']>\n}\n\nexport interface PackageRevisioncontentsFlatMapArgs {\n  max?: Maybe<Scalars['Int']>\n}\n\nexport type PackageRevisionDeleteResult = PackageRevisionDeleteSuccess | OperationError\n\nexport interface PackageRevisionDeleteSuccess {\n  readonly __typename: 'PackageRevisionDeleteSuccess'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface PackageRevisionList {\n  readonly __typename: 'PackageRevisionList'\n  readonly total: Scalars['Int']\n  readonly page: ReadonlyArray<PackageRevision>\n}\n\nexport interface PackageRevisionListpageArgs {\n  number?: Maybe<Scalars['Int']>\n  perPage?: Maybe<Scalars['Int']>\n}\n\nexport interface PackageWorkflow {\n  readonly __typename: 'PackageWorkflow'\n  readonly config: Scalars['String']\n  readonly id: Maybe<Scalars['String']>\n}\n\nexport interface PermissionInput {\n  readonly bucket: Scalars['String']\n  readonly level: BucketPermissionLevel\n}\n\nexport interface Policy {\n  readonly __typename: 'Policy'\n  readonly id: Scalars['ID']\n  readonly title: Scalars['String']\n  readonly arn: Scalars['String']\n  readonly managed: Scalars['Boolean']\n  readonly permissions: ReadonlyArray<PolicyBucketPermission>\n  readonly roles: ReadonlyArray<ManagedRole>\n}\n\nexport interface PolicyBucketPermission extends BucketPermission {\n  readonly __typename: 'PolicyBucketPermission'\n  readonly policy: Policy\n  readonly bucket: BucketConfig\n  readonly level: BucketPermissionLevel\n}\n\nexport type PolicyDeleteResult = Ok | InvalidInput | OperationError\n\nexport type PolicyResult = Policy | InvalidInput | OperationError\n\nexport interface Query {\n  readonly __typename: 'Query'\n  readonly config: Config\n  readonly bucketConfigs: ReadonlyArray<BucketConfig>\n  readonly bucketConfig: Maybe<BucketConfig>\n  readonly potentialCollaborators: ReadonlyArray<Collaborator>\n  readonly packages: Maybe<PackageList>\n  readonly package: Maybe<Package>\n  readonly policies: ReadonlyArray<Policy>\n  readonly policy: Maybe<Policy>\n  readonly roles: ReadonlyArray<Role>\n  readonly role: Maybe<Role>\n  readonly defaultRole: Maybe<Role>\n  readonly status: StatusResult\n}\n\nexport interface QuerybucketConfigArgs {\n  name: Scalars['String']\n}\n\nexport interface QuerypackagesArgs {\n  bucket: Scalars['String']\n  filter: Maybe<Scalars['String']>\n}\n\nexport interface QuerypackageArgs {\n  bucket: Scalars['String']\n  name: Scalars['String']\n}\n\nexport interface QuerypolicyArgs {\n  id: Scalars['ID']\n}\n\nexport interface QueryroleArgs {\n  id: Scalars['ID']\n}\n\nexport type Role = UnmanagedRole | ManagedRole\n\nexport interface RoleAssigned {\n  readonly __typename: 'RoleAssigned'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleBucketPermission extends BucketPermission {\n  readonly __typename: 'RoleBucketPermission'\n  readonly role: Role\n  readonly bucket: BucketConfig\n  readonly level: BucketPermissionLevel\n}\n\nexport type RoleCreateResult =\n  | RoleCreateSuccess\n  | RoleNameReserved\n  | RoleNameExists\n  | RoleNameInvalid\n  | RoleHasTooManyPoliciesToAttach\n\nexport interface RoleCreateSuccess {\n  readonly __typename: 'RoleCreateSuccess'\n  readonly role: Role\n}\n\nexport type RoleDeleteResult =\n  | RoleDeleteSuccess\n  | RoleDoesNotExist\n  | RoleNameReserved\n  | RoleAssigned\n\nexport interface RoleDeleteSuccess {\n  readonly __typename: 'RoleDeleteSuccess'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleDoesNotExist {\n  readonly __typename: 'RoleDoesNotExist'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleHasTooManyPoliciesToAttach {\n  readonly __typename: 'RoleHasTooManyPoliciesToAttach'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleIsManaged {\n  readonly __typename: 'RoleIsManaged'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleIsUnmanaged {\n  readonly __typename: 'RoleIsUnmanaged'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleNameExists {\n  readonly __typename: 'RoleNameExists'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleNameInvalid {\n  readonly __typename: 'RoleNameInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleNameReserved {\n  readonly __typename: 'RoleNameReserved'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport type RoleSetDefaultResult = RoleSetDefaultSuccess | RoleDoesNotExist\n\nexport interface RoleSetDefaultSuccess {\n  readonly __typename: 'RoleSetDefaultSuccess'\n  readonly role: Role\n}\n\nexport type RoleUpdateResult =\n  | RoleUpdateSuccess\n  | RoleNameReserved\n  | RoleNameExists\n  | RoleNameInvalid\n  | RoleIsManaged\n  | RoleIsUnmanaged\n  | RoleHasTooManyPoliciesToAttach\n\nexport interface RoleUpdateSuccess {\n  readonly __typename: 'RoleUpdateSuccess'\n  readonly role: Role\n}\n\nexport interface SnsInvalid {\n  readonly __typename: 'SnsInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface Status {\n  readonly __typename: 'Status'\n  readonly canaries: ReadonlyArray<Canary>\n  readonly latestStats: TestStats\n  readonly stats: TestStatsTimeSeries\n  readonly reports: StatusReportList\n  readonly reportsBucket: Scalars['String']\n}\n\nexport interface StatusstatsArgs {\n  window?: Maybe<Scalars['Int']>\n}\n\nexport interface StatusreportsArgs {\n  filter: Maybe<StatusReportListFilter>\n}\n\nexport interface StatusReport {\n  readonly __typename: 'StatusReport'\n  readonly timestamp: Scalars['Datetime']\n  readonly renderedReportLocation: Scalars['S3ObjectLocation']\n}\n\nexport interface StatusReportList {\n  readonly __typename: 'StatusReportList'\n  readonly total: Scalars['Int']\n  readonly page: ReadonlyArray<StatusReport>\n}\n\nexport interface StatusReportListpageArgs {\n  number?: Scalars['Int']\n  perPage?: Scalars['Int']\n  order?: StatusReportListOrder\n}\n\nexport interface StatusReportListFilter {\n  readonly timestampFrom: Maybe<Scalars['Datetime']>\n  readonly timestampTo: Maybe<Scalars['Datetime']>\n}\n\nexport enum StatusReportListOrder {\n  NEW_FIRST = 'NEW_FIRST',\n  OLD_FIRST = 'OLD_FIRST',\n}\n\nexport type StatusResult = Status | Unavailable\n\nexport interface TestStats {\n  readonly __typename: 'TestStats'\n  readonly passed: Scalars['Int']\n  readonly failed: Scalars['Int']\n  readonly running: Scalars['Int']\n}\n\nexport interface TestStatsTimeSeries {\n  readonly __typename: 'TestStatsTimeSeries'\n  readonly datetimes: ReadonlyArray<Scalars['Datetime']>\n  readonly passed: ReadonlyArray<Scalars['Int']>\n  readonly failed: ReadonlyArray<Scalars['Int']>\n}\n\nexport interface Unavailable {\n  readonly __typename: 'Unavailable'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface UnmanagedPolicyInput {\n  readonly title: Scalars['String']\n  readonly arn: Scalars['String']\n  readonly roles: ReadonlyArray<Scalars['ID']>\n}\n\nexport interface UnmanagedRole {\n  readonly __typename: 'UnmanagedRole'\n  readonly id: Scalars['ID']\n  readonly name: Scalars['String']\n  readonly arn: Scalars['String']\n}\n\nexport interface UnmanagedRoleInput {\n  readonly name: Scalars['String']\n  readonly arn: Scalars['String']\n}\n","import * as IO from 'io-ts'\n\nimport assertNever from 'utils/assertNever'\nimport * as Types from 'utils/types'\n\nimport * as GQLTypes from './graphql/types.generated'\n\nexport * as GQLTypes from './graphql/types.generated'\n\nexport * as S3 from './S3'\n\nexport const BucketPermissionLevel = Types.enum(\n  GQLTypes.BucketPermissionLevel,\n  'BucketPermissionLevel',\n)\n\nexport const BucketPermissionLevelStrings = ['Read', 'ReadWrite'] as const\n\nexport type BucketPermissionLevelString = typeof BucketPermissionLevelStrings[number]\n\nexport const BucketPermissionLevelFromString = new IO.Type<\n  GQLTypes.BucketPermissionLevel,\n  BucketPermissionLevelString\n>(\n  'BucketPermissionLevelFromString',\n  BucketPermissionLevel.is,\n  (u, c) => {\n    if (u === 'Read') return IO.success(GQLTypes.BucketPermissionLevel.READ)\n    if (u === 'ReadWrite') return IO.success(GQLTypes.BucketPermissionLevel.READ_WRITE)\n    return IO.failure(u, c)\n  },\n  (a) => {\n    if (a === GQLTypes.BucketPermissionLevel.READ) return 'Read' as const\n    if (a === GQLTypes.BucketPermissionLevel.READ_WRITE) return 'ReadWrite' as const\n    return assertNever(a)\n  },\n)\n\nexport type PotentialCollaborator = {\n  collaborator: GQLTypes.Collaborator\n  permissionLevel?: undefined\n}\n\nexport type Collaborators = ReadonlyArray<\n  GQLTypes.CollaboratorBucketConnection | PotentialCollaborator\n>\n\nexport interface PackageEntry {\n  physicalKey: string\n  hash: string\n  meta: Types.JsonRecord | null\n  size: number\n}\n\nexport type PackageContentsFlatMap = Record<string, PackageEntry>\n\nexport interface S3File {\n  bucket: string\n  key: string\n  meta?: Types.JsonRecord // TODO: make it the same as in PackageEntry\n  size: number\n  version?: string\n}\n","import * as React from 'react'\nimport { Helmet } from 'react-helmet'\n\nconst BASE = 'Quilt is a versioned data hub for AWS'\n\nconst DIVIDER = ' • '\n\ninterface MetaTitleProps {\n  children?: string | string[]\n  base?: string\n}\n\nfunction getTitleSegments(base: string, children?: string | string[]) {\n  if (!children) return [base]\n\n  if (Array.isArray(children)) return [...children, base]\n\n  return [children, base]\n}\n\nexport function getTitle(base: string, children?: string | string[]) {\n  return getTitleSegments(base, children).join(DIVIDER)\n}\n\nexport default function MetaTitle({ children, base = BASE }: MetaTitleProps) {\n  return (\n    <Helmet>\n      <title>{getTitle(base, children)}</title>\n    </Helmet>\n  )\n}\n","import * as FP from 'fp-ts'\nimport * as IO from 'io-ts'\nimport { formatValidationErrors } from 'io-ts-reporters'\nimport * as R from 'ramda'\n\nimport { BaseError } from 'utils/error'\n\nexport * from 'io-ts-types'\n\nexport class ValidationError extends BaseError {\n  constructor(e: IO.Errors) {\n    const formatted = formatValidationErrors(e).join('\\n')\n    super(`ValidationError\\n${formatted}`)\n  }\n}\n\nexport const decode = <T>(codec: IO.Type<T, any, any>) =>\n  R.pipe(\n    codec.decode,\n    FP.either.fold(\n      (e) => {\n        throw new ValidationError(e)\n      },\n      (a) => a,\n    ),\n  ) as (i: unknown) => T\n\nexport interface NullableC<C extends IO.Mixed>\n  extends IO.Type<IO.TypeOf<C> | null, IO.OutputOf<C> | null, unknown> {}\n\nexport type Nullable<T> = T | null\n\nexport const nullable = <C extends IO.Mixed>(\n  codec: C,\n  name: string = `Nullable<${codec.name}>`,\n) =>\n  new IO.Type(\n    name,\n    (i): i is Nullable<IO.TypeOf<C>> => i === null || codec.is(i),\n    (u, c) => (u == null ? IO.success(null) : codec.validate(u, c)),\n    (a) => a,\n  ) as NullableC<C>\n\n// enum implementation taken from https://github.com/gcanti/io-ts/pull/366\nenum Enum {}\n\nexport class EnumType<E extends typeof Enum> extends IO.Type<E[keyof E]> {\n  readonly _tag: 'EnumType' = 'EnumType'\n\n  private readonly enum: E\n\n  private readonly enumValues: Set<string | number>\n\n  constructor(e: E, name: string) {\n    super(\n      name,\n      (u): u is E[keyof E] => {\n        if (!this.enumValues.has(u as any)) return false\n        // Don't allow key names from number enum reverse mapping\n        if (typeof (this.enum as any)[u as string] === 'number') return false\n        return true\n      },\n      (u, c) => (this.is(u) ? IO.success(u) : IO.failure(u, c)),\n      IO.identity,\n    )\n    this.enum = e\n    this.enumValues = new Set(Object.values(e))\n  }\n}\n\nexport const enumType = <E extends typeof Enum>(e: E, name: string = 'enum') =>\n  new EnumType<E>(e, name)\n\nexport { enumType as enum }\n\nexport type AtLeast<T, K extends keyof T> = Partial<T> & Pick<T, K>\n"],"names":["useDataGridStyles","t","root","position","width","zIndex","header","borderBottom","palette","divider","padding","spacing","modal","grid","border","background","paper","outline","flex","fontSize","pointerEvents","justifyContent","order","display","countsByStateSelector","state","rows","allRows","reduce","acc","id","prop","true","false","null","idRowsLookup","ok","passed","failed","running","useCountsByStateStyles","paddingLeft","item","alignItems","marginLeft","count","CountsByState","classes","apiRef","counts","renderItem","label","arrow","title","className","StateIcon","Footer","props","ref","PaginationComponent","pageSize","current","components","Pagination","PaginationElement","componentsProps","pagination","useStateIconStyles","ok_true","color","info","main","ok_false","error","ok_null","text","secondary","icon","columns","field","headerName","renderCell","params","c","row","url","region","name","description","href","rel","target","value","valueGetter","component","ml","type","align","lastRun","toLocaleString","useStyles","rowOk_true","light","rowOk_false","rowOk_null","Canaries","canaries","rowClasses","canariesSorted","variant","getRowId","r","autoHeight","getRowClassName","disableSelectionOnClick","disableColumnSelector","disableColumnResize","disableColumnReorder","disableMultipleSelection","disableMultipleColumnsSorting","localeText","columnMenuSortAsc","columnMenuSortDesc","addMonths","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","_typeof","obj","Symbol","iterator","constructor","prototype","containers_Admin_Status_gql_ReportsDocument","kind","definitions","operation","variableDefinitions","variable","selectionSet","selections","typeCondition","ActualDownloadLink","loc","stack","bucket","replace","AWS","filename","key","contentType","edge","DownloadLink","case","Ok","Err","e","message","_","size","style","PreviewLink","NamedRoutes","bucketFile","version","to","ErrorOverlay","resetState","pt","pb","gutterBottom","onClick","iso","toISOString","utcStr","substring","filterOperators","filter","op","includes","disableColumnMenu","filterable","sortable","filterModelToFilter","filterItem","operatorValue","timestampFrom","timestampTo","ts","eod","duration","years","months","weeks","days","hours","minutes","seconds","dateWithMonths","dateWithDays","addDays","msToAdd","Error","Reports","total","firstPage","defaultPerPage","defaultOrder","defaults","page","perPage","fallbacks","rowCount","setPage","handlePageChange","setPageSize","handlePageSizeChange","initialSortModel","sort","sortModel","setSortModel","handleSortModelChange","initialFilterModel","items","filterModel","setFilterModel","handleFilterModelChange","variables","pause","queryResult","useQuery","query","data","status","__typename","reports","loading","fetching","timestamp","errorOverlay","disableMultipleColumnsFiltering","noRowsLabel","filterOperatorIs","sortingMode","sortingOrder","onSortModelChange","filterMode","onFilterModelChange","paginationMode","onPageChange","onPageSizeChange","extractSize","entry","boxProp","sizeType","contentRect","useResizeObserver","opts","onResize","onResizeRef","useRef","undefined","round","Math","resizeObserverRef","_useState","useState","height","setSize","didUnmount","useEffect","previous","refCallback","subscriber","refOrElement","lastReportRef","refOrElementRef","cbElementRef","evaluateSubscription","useCallback","cbElement","element","Element","cleanup","useResolvedElement","box","instance","ResizeObserver","entries","reportedWidth","reportedHeight","newWidth","newHeight","newSize","observe","unobserve","useMemo","ChartInner","option","resize","theme","initOptions","onInit","setError","containerRef","chartRef","initArgs","useMemoEq","optionMemo","onInitRef","echarts","init","setOption","onInitCur","dispose","sizeStr","ChartErrorBoundary","Chart","CHART_COLORS","flexWrap","donut","history","minWidth","Stats","latest","stats","statsWindow","titleTextProps","textStyle","fontFamily","typography","h6","fontWeight","left","top","chart","hlDefault","dispatchAction","dataIndex","on","off","series","radius","formatter","show","subtitle1","rich","lineHeight","sub","subtitle2","emphasis","tooltip","trigger","xAxis","datetimes","map","d","toLocaleDateString","month","day","yAxis","areaStyle","containers_Admin_Status_gql_StatusDocument","DEFAULT_REPORTS_ORDER","Status","reportsPerPage","reportsOrder","suspend","my","MetaTitle","latestStats","py","BucketPermissionLevel","PackageListOrder","StatusReportListOrder","is","u","a","assertNever","getTitle","base","children","Array","isArray","getTitleSegments","join","Enum","formatted","formatValidationErrors","decode","codec","ValidationError","nullable","i","validate","enumValues","has","enum","_tag","Set","Object","values","enumType","EnumType"],"sourceRoot":""}