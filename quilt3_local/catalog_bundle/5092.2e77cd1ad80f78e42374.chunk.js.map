{"version":3,"file":"5092.2e77cd1ad80f78e42374.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./node_modules/brace/mode/swift.js"],"sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/swift_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SwiftHighlightRules = function() {\n   var keywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"\",\n        \"keyword\": \"__COLUMN__|__FILE__|__FUNCTION__|__LINE__\"\n            + \"|as|associativity|break|case|class|continue|default|deinit|didSet\"\n            + \"|do|dynamicType|else|enum|extension|fallthrough|for|func|get|if|import\"\n            + \"|in|infix|init|inout|is|left|let|let|mutating|new|none|nonmutating\"\n            + \"|operator|override|postfix|precedence|prefix|protocol|return|right\"\n            + \"|safe|Self|self|set|struct|subscript|switch|Type|typealias\"\n            + \"|unowned|unsafe|var|weak|where|while|willSet\"\n            + \"|convenience|dynamic|final|infix|lazy|mutating|nonmutating|optional|override|postfix\"\n            + \"|prefix|acequired|static|guard|defer\",\n        \"storage.type\": \"bool|double|Double\"\n            + \"|extension|float|Float|int|Int|private|public|string|String\",\n        \"constant.language\":\n            \"false|Infinity|NaN|nil|no|null|null|off|on|super|this|true|undefined|yes\",\n        \"support.function\":\n            \"\"\n    }, \"identifier\");\n    \n    function string(start, options) {\n        var nestable = options.nestable || options.interpolation;\n        var interpStart = options.interpolation && options.interpolation.nextState || \"start\";\n        var mainRule = {\n            regex: start + (options.multiline ? \"\" : \"(?=.)\"),\n            token: \"string.start\"\n        };\n        var nextState = [\n            options.escape && {\n                regex: options.escape,\n                token: \"character.escape\"\n            },\n            options.interpolation && {\n                token : \"paren.quasi.start\",\n                regex : lang.escapeRegExp(options.interpolation.lead + options.interpolation.open),\n                push  : interpStart\n            },\n            options.error && {\n                regex: options.error,\n                token: \"error.invalid\"\n            }, \n            {\n                regex: start + (options.multiline ? \"\" : \"|$\"),\n                token: \"string.end\",\n                next: nestable ? \"pop\" : \"start\"\n            }, {\n                defaultToken: \"string\"\n            }\n        ].filter(Boolean);\n        \n        if (nestable)\n            mainRule.push = nextState;\n        else\n            mainRule.next = nextState;\n        \n        if (!options.interpolation)\n            return mainRule;\n        \n        var open = options.interpolation.open;\n        var close = options.interpolation.close;\n        var counter = {\n            regex: \"[\" + lang.escapeRegExp(open + close) + \"]\",\n            onMatch: function(val, state, stack) {\n                this.next = val == open ? this.nextState : \"\";\n                if (val == open && stack.length) {\n                    stack.unshift(\"start\", state);\n                    return \"paren\";\n                }\n                if (val == close && stack.length) {\n                    stack.shift();\n                    this.next = stack.shift();\n                    if (this.next.indexOf(\"string\") != -1)\n                        return \"paren.quasi.end\";\n                }\n                return val == open ? \"paren.lparen\" : \"paren.rparen\";\n            },\n            nextState: interpStart\n        };\n        return [counter, mainRule];\n    }\n    \n    function comments() {\n        return [{\n                token : \"comment\",\n                regex : \"\\\\/\\\\/(?=.)\",\n                next : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment\", regex : \"$|^\", next: \"start\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment.start\",\n                regex : /\\/\\*/,\n                stateName: \"nested_comment\",\n                push : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment.start\", regex : /\\/\\*/, push: \"nested_comment\"},\n                    {token : \"comment.end\", regex : \"\\\\*\\\\/\", next : \"pop\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            }\n        ];\n    }\n    \n\n    this.$rules = {\n        start: [\n            string('\"', {\n                escape: /\\\\(?:[0\\\\tnr\"']|u{[a-fA-F1-9]{0,8}})/,\n                interpolation: {lead: \"\\\\\", open: \"(\", close: \")\"},\n                error: /\\\\./,\n                multiline: false\n            }),\n            comments({type: \"c\", nestable: true}),\n            {\n                 regex: /@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                 token: \"variable.parameter\"\n            },\n            {\n                regex: /[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                token: keywordMapper\n            },  \n            {\n                token : \"constant.numeric\", \n                regex : /[+-]?(?:0(?:b[01]+|o[0-7]+|x[\\da-fA-F])|\\d+(?:(?:\\.\\d*)?(?:[PpEe][+-]?\\d+)?)\\b)/\n            }, {\n                token : \"keyword.operator\",\n                regex : /--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?:|[!$%&*+\\-~\\/^]=?/,\n                next  : \"start\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : /[?:,;.]/,\n                next  : \"start\"\n            }, {\n                token : \"paren.lparen\",\n                regex : /[\\[({]/,\n                next  : \"start\"\n            }, {\n                token : \"paren.rparen\",\n                regex : /[\\])}]/\n            } \n            \n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    \n    this.normalizeRules();\n};\n\n\noop.inherits(SwiftHighlightRules, TextHighlightRules);\n\nexports.HighlightRules = SwiftHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/swift\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/swift_highlight_rules\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar HighlightRules = acequire(\"./swift_highlight_rules\").HighlightRules;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = new CstyleBehaviour();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\", nestable: true};\n    \n    this.$id = \"ace/mode/swift\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","lang","SwiftHighlightRules","keywordMapper","createKeywordMapper","options","nestable","interpolation","interpStart","nextState","mainRule","multiline","escape","escapeRegExp","lead","open","push","error","filter","Boolean","close","onMatch","val","state","stack","length","unshift","shift","indexOf","string","stateName","embedRules","normalizeRules","HighlightRules","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CstyleBehaviour","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"sourceRoot":""}