{"version":3,"file":"6399.fc148af3f0269e1cc85e.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./app/containers/Admin/Form.tsx","webpack://quilt-navigator/./app/model/graphql/types.generated.ts","webpack://quilt-navigator/./app/model/index.ts","webpack://quilt-navigator/./app/utils/MetaTitle.tsx","webpack://quilt-navigator/./app/utils/format.tsx","webpack://quilt-navigator/./app/utils/types.ts","webpack://quilt-navigator/./app/components/Pagination/Controls.js","webpack://quilt-navigator/./app/components/Pagination/Pagination.js","webpack://quilt-navigator/./app/containers/Admin/Table.js","webpack://quilt-navigator/./app/containers/Admin/RFForm.tsx","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/shared.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/BucketPermissionSelection.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/PolicySelection.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/Policies.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/AttachedPolicies.tsx","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/RoleSelection.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/Roles.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/RoleCreateManaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/RoleCreateUnmanaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/RoleUpdateManaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/RoleUpdateUnmanaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/RoleDelete.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/RoleSetDefault.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/Roles.tsx","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/AssociatedRoles.tsx","webpack://quilt-navigator/./node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/Buckets.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/BucketsPermissions.tsx","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/PolicyResultSelection.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/PolicyCreateManaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/PolicyCreateUnmanaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/PolicyUpdateManaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/PolicyUpdateUnmanaged.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/gql/PolicyDelete.generated.ts","webpack://quilt-navigator/./app/containers/Admin/RolesAndPolicies/Policies.tsx","webpack://quilt-navigator/./app/containers/Admin/data.js","webpack://quilt-navigator/./app/containers/Admin/Users/gql/Roles.generated.ts","webpack://quilt-navigator/./app/containers/Admin/Users/Users.js","webpack://quilt-navigator/./app/containers/Admin/UsersAndRoles.js"],"sourcesContent":["import * as React from 'react'\nimport type * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nexport interface FieldProps {\n  errors: Record<string, React.ReactNode>\n  input: RF.FieldInputProps<string>\n  meta: RF.FieldMetaState<string>\n}\n\n// TODO: re-use components/Form/TextField\nexport function Field({\n  input,\n  meta,\n  errors,\n  helperText,\n  InputLabelProps,\n  ...rest\n}: FieldProps & M.TextFieldProps) {\n  const error = meta.submitFailed && (meta.error || meta.submitError)\n  const props = {\n    error: !!error,\n    helperText: error ? errors[error] || error : helperText,\n    disabled: meta.submitting || meta.submitSucceeded,\n    InputLabelProps: { shrink: true, ...InputLabelProps },\n    ...input,\n    ...rest,\n  }\n  return <M.TextField {...props} />\n}\n\nconst useCheckboxStyles = M.makeStyles({\n  root: {\n    marginBottom: -9,\n    marginTop: -9,\n  },\n})\n\ninterface CheckboxProps {\n  errors?: Record<string, React.ReactNode>\n  input?: RF.FieldInputProps<boolean>\n  meta: RF.FieldMetaState<string | Symbol>\n  label?: string\n  FormControlLabelProps?: M.FormControlLabelProps\n}\n\n// Re-use components/Form/Checkbox\nexport function Checkbox({\n  input = {} as RF.FieldInputProps<boolean>,\n  meta,\n  errors = undefined, // eslint-disable-line @typescript-eslint/no-unused-vars\n  label = undefined,\n  FormControlLabelProps = {} as M.FormControlLabelProps,\n  ...rest\n}: CheckboxProps & M.CheckboxProps) {\n  const classes = useCheckboxStyles()\n  return (\n    <M.FormControlLabel\n      {...FormControlLabelProps}\n      control={\n        <M.Checkbox\n          classes={classes}\n          disabled={meta.submitting || meta.submitSucceeded}\n          {...input}\n          {...rest}\n        />\n      }\n      label={label}\n    />\n  )\n}\n\nconst useFormErrorStyles = M.makeStyles((t) => ({\n  root: {\n    marginTop: t.spacing(3),\n\n    '& a': {\n      textDecoration: 'underline',\n    },\n  },\n}))\n\ninterface FormErrorProps {\n  errors: Record<string, React.ReactNode>\n  error?: string\n}\n\nexport function FormError({\n  error,\n  errors,\n  ...rest\n}: FormErrorProps & M.TypographyProps) {\n  const classes = useFormErrorStyles()\n  if (!error) return null\n  return (\n    <M.Typography color=\"error\" classes={classes} {...rest}>\n      {errors[error] || error}\n    </M.Typography>\n  )\n}\n","import type { Json, JsonRecord } from 'utils/types'\nimport type { PackageContentsFlatMap } from 'model'\nimport type { S3ObjectLocation } from 'model/S3'\n\nexport type Maybe<T> = T | null\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>\n}\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>\n}\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  Datetime: Date\n  Json: Json\n  JsonRecord: JsonRecord\n  PackageContentsFlatMap: PackageContentsFlatMap\n  S3ObjectLocation: S3ObjectLocation\n}\n\nexport interface AccessCountForDate {\n  readonly __typename: 'AccessCountForDate'\n  readonly date: Scalars['Datetime']\n  readonly value: Scalars['Int']\n}\n\nexport interface AccessCounts {\n  readonly __typename: 'AccessCounts'\n  readonly total: Scalars['Int']\n  readonly counts: ReadonlyArray<AccessCountForDate>\n}\n\nexport interface BucketAddInput {\n  readonly name: Scalars['String']\n  readonly title: Scalars['String']\n  readonly iconUrl: Maybe<Scalars['String']>\n  readonly description: Maybe<Scalars['String']>\n  readonly linkedData: Maybe<Scalars['Json']>\n  readonly overviewUrl: Maybe<Scalars['String']>\n  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly relevanceScore: Maybe<Scalars['Int']>\n  readonly snsNotificationArn: Maybe<Scalars['String']>\n  readonly scannerParallelShardsDepth: Maybe<Scalars['Int']>\n  readonly skipMetaDataIndexing: Maybe<Scalars['Boolean']>\n  readonly fileExtensionsToIndex: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly indexContentBytes: Maybe<Scalars['Int']>\n  readonly delayScan: Maybe<Scalars['Boolean']>\n}\n\nexport type BucketAddResult =\n  | BucketAddSuccess\n  | BucketAlreadyAdded\n  | BucketDoesNotExist\n  | BucketFileExtensionsToIndexInvalid\n  | BucketIndexContentBytesInvalid\n  | InsufficientPermissions\n  | NotificationConfigurationError\n  | NotificationTopicNotFound\n  | SnsInvalid\n\nexport interface BucketAddSuccess {\n  readonly __typename: 'BucketAddSuccess'\n  readonly bucketConfig: BucketConfig\n}\n\nexport interface BucketAlreadyAdded {\n  readonly __typename: 'BucketAlreadyAdded'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketConfig {\n  readonly __typename: 'BucketConfig'\n  readonly name: Scalars['String']\n  readonly title: Scalars['String']\n  readonly iconUrl: Maybe<Scalars['String']>\n  readonly description: Maybe<Scalars['String']>\n  readonly linkedData: Maybe<Scalars['Json']>\n  readonly overviewUrl: Maybe<Scalars['String']>\n  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly relevanceScore: Scalars['Int']\n  readonly lastIndexed: Maybe<Scalars['Datetime']>\n  readonly snsNotificationArn: Maybe<Scalars['String']>\n  readonly scannerParallelShardsDepth: Maybe<Scalars['Int']>\n  readonly skipMetaDataIndexing: Maybe<Scalars['Boolean']>\n  readonly fileExtensionsToIndex: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly indexContentBytes: Maybe<Scalars['Int']>\n  readonly associatedPolicies: ReadonlyArray<PolicyBucketPermission>\n  readonly associatedRoles: ReadonlyArray<RoleBucketPermission>\n  readonly collaborators: ReadonlyArray<CollaboratorBucketConnection>\n}\n\nexport interface BucketDoesNotExist {\n  readonly __typename: 'BucketDoesNotExist'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketFileExtensionsToIndexInvalid {\n  readonly __typename: 'BucketFileExtensionsToIndexInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketIndexContentBytesInvalid {\n  readonly __typename: 'BucketIndexContentBytesInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketNotFound {\n  readonly __typename: 'BucketNotFound'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketPermission {\n  readonly bucket: BucketConfig\n  readonly level: BucketPermissionLevel\n}\n\nexport enum BucketPermissionLevel {\n  READ = 'READ',\n  READ_WRITE = 'READ_WRITE',\n}\n\nexport type BucketRemoveResult = BucketRemoveSuccess | BucketNotFound | IndexingInProgress\n\nexport interface BucketRemoveSuccess {\n  readonly __typename: 'BucketRemoveSuccess'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface BucketUpdateInput {\n  readonly title: Scalars['String']\n  readonly iconUrl: Maybe<Scalars['String']>\n  readonly description: Maybe<Scalars['String']>\n  readonly linkedData: Maybe<Scalars['Json']>\n  readonly overviewUrl: Maybe<Scalars['String']>\n  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly relevanceScore: Maybe<Scalars['Int']>\n  readonly snsNotificationArn: Maybe<Scalars['String']>\n  readonly scannerParallelShardsDepth: Maybe<Scalars['Int']>\n  readonly skipMetaDataIndexing: Maybe<Scalars['Boolean']>\n  readonly fileExtensionsToIndex: Maybe<ReadonlyArray<Scalars['String']>>\n  readonly indexContentBytes: Maybe<Scalars['Int']>\n}\n\nexport type BucketUpdateResult =\n  | BucketUpdateSuccess\n  | BucketFileExtensionsToIndexInvalid\n  | BucketIndexContentBytesInvalid\n  | BucketNotFound\n  | NotificationConfigurationError\n  | NotificationTopicNotFound\n  | SnsInvalid\n\nexport interface BucketUpdateSuccess {\n  readonly __typename: 'BucketUpdateSuccess'\n  readonly bucketConfig: BucketConfig\n}\n\nexport interface Canary {\n  readonly __typename: 'Canary'\n  readonly name: Scalars['String']\n  readonly region: Scalars['String']\n  readonly group: Scalars['String']\n  readonly title: Scalars['String']\n  readonly description: Scalars['String']\n  readonly schedule: Scalars['String']\n  readonly ok: Maybe<Scalars['Boolean']>\n  readonly lastRun: Maybe<Scalars['Datetime']>\n}\n\nexport interface Collaborator {\n  readonly __typename: 'Collaborator'\n  readonly email: Scalars['String']\n  readonly username: Scalars['String']\n}\n\nexport interface CollaboratorBucketConnection {\n  readonly __typename: 'CollaboratorBucketConnection'\n  readonly collaborator: Collaborator\n  readonly permissionLevel: BucketPermissionLevel\n}\n\nexport interface Config {\n  readonly __typename: 'Config'\n  readonly contentIndexingSettings: ContentIndexingSettings\n}\n\nexport interface ContentIndexingSettings {\n  readonly __typename: 'ContentIndexingSettings'\n  readonly extensions: ReadonlyArray<Scalars['String']>\n  readonly bytesDefault: Scalars['Int']\n  readonly bytesMin: Scalars['Int']\n  readonly bytesMax: Scalars['Int']\n}\n\nexport interface IndexingInProgress {\n  readonly __typename: 'IndexingInProgress'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface InputError {\n  readonly __typename: 'InputError'\n  readonly path: Maybe<Scalars['String']>\n  readonly message: Scalars['String']\n  readonly name: Scalars['String']\n  readonly context: Maybe<Scalars['JsonRecord']>\n}\n\nexport interface InsufficientPermissions {\n  readonly __typename: 'InsufficientPermissions'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface InvalidInput {\n  readonly __typename: 'InvalidInput'\n  readonly errors: ReadonlyArray<InputError>\n}\n\nexport interface ManagedPolicyInput {\n  readonly title: Scalars['String']\n  readonly permissions: ReadonlyArray<PermissionInput>\n  readonly roles: ReadonlyArray<Scalars['ID']>\n}\n\nexport interface ManagedRole {\n  readonly __typename: 'ManagedRole'\n  readonly id: Scalars['ID']\n  readonly name: Scalars['String']\n  readonly arn: Scalars['String']\n  readonly policies: ReadonlyArray<Policy>\n  readonly permissions: ReadonlyArray<RoleBucketPermission>\n}\n\nexport interface ManagedRoleInput {\n  readonly name: Scalars['String']\n  readonly policies: ReadonlyArray<Scalars['ID']>\n}\n\nexport interface Mutation {\n  readonly __typename: 'Mutation'\n  readonly packageConstruct: PackageConstructResult\n  readonly packagePromote: PackagePromoteResult\n  readonly packageFromFolder: PackageFromFolderResult\n  readonly packageRevisionDelete: PackageRevisionDeleteResult\n  readonly bucketAdd: BucketAddResult\n  readonly bucketUpdate: BucketUpdateResult\n  readonly bucketRemove: BucketRemoveResult\n  readonly policyCreateManaged: PolicyResult\n  readonly policyCreateUnmanaged: PolicyResult\n  readonly policyUpdateManaged: PolicyResult\n  readonly policyUpdateUnmanaged: PolicyResult\n  readonly policyDelete: PolicyDeleteResult\n  readonly roleCreateManaged: RoleCreateResult\n  readonly roleCreateUnmanaged: RoleCreateResult\n  readonly roleUpdateManaged: RoleUpdateResult\n  readonly roleUpdateUnmanaged: RoleUpdateResult\n  readonly roleDelete: RoleDeleteResult\n  readonly roleSetDefault: RoleSetDefaultResult\n}\n\nexport interface MutationpackageConstructArgs {\n  params: PackagePushParams\n  src: PackageConstructSource\n}\n\nexport interface MutationpackagePromoteArgs {\n  params: PackagePushParams\n  src: PackagePromoteSource\n}\n\nexport interface MutationpackageFromFolderArgs {\n  params: PackagePushParams\n  src: PackageFromFolderSource\n}\n\nexport interface MutationpackageRevisionDeleteArgs {\n  bucket: Scalars['String']\n  name: Scalars['String']\n  hash: Scalars['String']\n}\n\nexport interface MutationbucketAddArgs {\n  input: BucketAddInput\n}\n\nexport interface MutationbucketUpdateArgs {\n  name: Scalars['String']\n  input: BucketUpdateInput\n}\n\nexport interface MutationbucketRemoveArgs {\n  name: Scalars['String']\n}\n\nexport interface MutationpolicyCreateManagedArgs {\n  input: ManagedPolicyInput\n}\n\nexport interface MutationpolicyCreateUnmanagedArgs {\n  input: UnmanagedPolicyInput\n}\n\nexport interface MutationpolicyUpdateManagedArgs {\n  id: Scalars['ID']\n  input: ManagedPolicyInput\n}\n\nexport interface MutationpolicyUpdateUnmanagedArgs {\n  id: Scalars['ID']\n  input: UnmanagedPolicyInput\n}\n\nexport interface MutationpolicyDeleteArgs {\n  id: Scalars['ID']\n}\n\nexport interface MutationroleCreateManagedArgs {\n  input: ManagedRoleInput\n}\n\nexport interface MutationroleCreateUnmanagedArgs {\n  input: UnmanagedRoleInput\n}\n\nexport interface MutationroleUpdateManagedArgs {\n  id: Scalars['ID']\n  input: ManagedRoleInput\n}\n\nexport interface MutationroleUpdateUnmanagedArgs {\n  id: Scalars['ID']\n  input: UnmanagedRoleInput\n}\n\nexport interface MutationroleDeleteArgs {\n  id: Scalars['ID']\n}\n\nexport interface MutationroleSetDefaultArgs {\n  id: Scalars['ID']\n}\n\nexport interface NotificationConfigurationError {\n  readonly __typename: 'NotificationConfigurationError'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface NotificationTopicNotFound {\n  readonly __typename: 'NotificationTopicNotFound'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface Ok {\n  readonly __typename: 'Ok'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface OperationError {\n  readonly __typename: 'OperationError'\n  readonly message: Scalars['String']\n  readonly name: Scalars['String']\n  readonly context: Maybe<Scalars['JsonRecord']>\n}\n\nexport interface Package {\n  readonly __typename: 'Package'\n  readonly bucket: Scalars['String']\n  readonly name: Scalars['String']\n  readonly modified: Scalars['Datetime']\n  readonly revisions: PackageRevisionList\n  readonly revision: Maybe<PackageRevision>\n  readonly accessCounts: Maybe<AccessCounts>\n}\n\nexport interface PackagerevisionArgs {\n  hashOrTag?: Maybe<Scalars['String']>\n}\n\nexport interface PackageaccessCountsArgs {\n  window?: Maybe<Scalars['Int']>\n}\n\nexport interface PackageConstructEntry {\n  readonly logicalKey: Scalars['String']\n  readonly physicalKey: Scalars['String']\n  readonly hash: Maybe<Scalars['String']>\n  readonly size: Maybe<Scalars['Float']>\n  readonly meta: Maybe<Scalars['JsonRecord']>\n}\n\nexport type PackageConstructResult = PackagePushSuccess | InvalidInput | OperationError\n\nexport interface PackageConstructSource {\n  readonly entries: ReadonlyArray<PackageConstructEntry>\n}\n\nexport interface PackageDir {\n  readonly __typename: 'PackageDir'\n  readonly path: Scalars['String']\n  readonly metadata: Maybe<Scalars['JsonRecord']>\n  readonly size: Scalars['Float']\n  readonly children: ReadonlyArray<PackageEntry>\n}\n\nexport type PackageEntry = PackageFile | PackageDir\n\nexport interface PackageFile {\n  readonly __typename: 'PackageFile'\n  readonly path: Scalars['String']\n  readonly metadata: Maybe<Scalars['JsonRecord']>\n  readonly size: Scalars['Float']\n  readonly physicalKey: Scalars['String']\n}\n\nexport interface PackageFromFolderEntry {\n  readonly isDir: Scalars['Boolean']\n  readonly logicalKey: Scalars['String']\n  readonly path: Scalars['String']\n}\n\nexport type PackageFromFolderResult = PackagePushSuccess | InvalidInput | OperationError\n\nexport interface PackageFromFolderSource {\n  readonly bucket: Scalars['String']\n  readonly entries: ReadonlyArray<PackageFromFolderEntry>\n}\n\nexport interface PackageList {\n  readonly __typename: 'PackageList'\n  readonly total: Scalars['Int']\n  readonly page: ReadonlyArray<Package>\n}\n\nexport interface PackageListpageArgs {\n  number?: Maybe<Scalars['Int']>\n  perPage?: Maybe<Scalars['Int']>\n  order?: Maybe<PackageListOrder>\n}\n\nexport enum PackageListOrder {\n  NAME = 'NAME',\n  MODIFIED = 'MODIFIED',\n}\n\nexport type PackagePromoteResult = PackagePushSuccess | InvalidInput | OperationError\n\nexport interface PackagePromoteSource {\n  readonly bucket: Scalars['String']\n  readonly name: Scalars['String']\n  readonly hash: Scalars['String']\n}\n\nexport interface PackagePushParams {\n  readonly message: Maybe<Scalars['String']>\n  readonly userMeta: Maybe<Scalars['JsonRecord']>\n  readonly workflow: Maybe<Scalars['String']>\n  readonly bucket: Scalars['String']\n  readonly name: Scalars['String']\n}\n\nexport interface PackagePushSuccess {\n  readonly __typename: 'PackagePushSuccess'\n  readonly package: Package\n  readonly revision: PackageRevision\n}\n\nexport interface PackageRevision {\n  readonly __typename: 'PackageRevision'\n  readonly hash: Scalars['String']\n  readonly modified: Scalars['Datetime']\n  readonly message: Maybe<Scalars['String']>\n  readonly metadata: Scalars['JsonRecord']\n  readonly userMeta: Maybe<Scalars['JsonRecord']>\n  readonly workflow: Maybe<PackageWorkflow>\n  readonly totalEntries: Maybe<Scalars['Int']>\n  readonly totalBytes: Maybe<Scalars['Float']>\n  readonly dir: Maybe<PackageDir>\n  readonly file: Maybe<PackageFile>\n  readonly accessCounts: Maybe<AccessCounts>\n  readonly contentsFlatMap: Maybe<Scalars['PackageContentsFlatMap']>\n}\n\nexport interface PackageRevisiondirArgs {\n  path: Scalars['String']\n}\n\nexport interface PackageRevisionfileArgs {\n  path: Scalars['String']\n}\n\nexport interface PackageRevisionaccessCountsArgs {\n  window?: Maybe<Scalars['Int']>\n}\n\nexport interface PackageRevisioncontentsFlatMapArgs {\n  max?: Maybe<Scalars['Int']>\n}\n\nexport type PackageRevisionDeleteResult = PackageRevisionDeleteSuccess | OperationError\n\nexport interface PackageRevisionDeleteSuccess {\n  readonly __typename: 'PackageRevisionDeleteSuccess'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface PackageRevisionList {\n  readonly __typename: 'PackageRevisionList'\n  readonly total: Scalars['Int']\n  readonly page: ReadonlyArray<PackageRevision>\n}\n\nexport interface PackageRevisionListpageArgs {\n  number?: Maybe<Scalars['Int']>\n  perPage?: Maybe<Scalars['Int']>\n}\n\nexport interface PackageWorkflow {\n  readonly __typename: 'PackageWorkflow'\n  readonly config: Scalars['String']\n  readonly id: Maybe<Scalars['String']>\n}\n\nexport interface PermissionInput {\n  readonly bucket: Scalars['String']\n  readonly level: BucketPermissionLevel\n}\n\nexport interface Policy {\n  readonly __typename: 'Policy'\n  readonly id: Scalars['ID']\n  readonly title: Scalars['String']\n  readonly arn: Scalars['String']\n  readonly managed: Scalars['Boolean']\n  readonly permissions: ReadonlyArray<PolicyBucketPermission>\n  readonly roles: ReadonlyArray<ManagedRole>\n}\n\nexport interface PolicyBucketPermission extends BucketPermission {\n  readonly __typename: 'PolicyBucketPermission'\n  readonly policy: Policy\n  readonly bucket: BucketConfig\n  readonly level: BucketPermissionLevel\n}\n\nexport type PolicyDeleteResult = Ok | InvalidInput | OperationError\n\nexport type PolicyResult = Policy | InvalidInput | OperationError\n\nexport interface Query {\n  readonly __typename: 'Query'\n  readonly config: Config\n  readonly bucketConfigs: ReadonlyArray<BucketConfig>\n  readonly bucketConfig: Maybe<BucketConfig>\n  readonly potentialCollaborators: ReadonlyArray<Collaborator>\n  readonly packages: Maybe<PackageList>\n  readonly package: Maybe<Package>\n  readonly policies: ReadonlyArray<Policy>\n  readonly policy: Maybe<Policy>\n  readonly roles: ReadonlyArray<Role>\n  readonly role: Maybe<Role>\n  readonly defaultRole: Maybe<Role>\n  readonly status: StatusResult\n}\n\nexport interface QuerybucketConfigArgs {\n  name: Scalars['String']\n}\n\nexport interface QuerypackagesArgs {\n  bucket: Scalars['String']\n  filter: Maybe<Scalars['String']>\n}\n\nexport interface QuerypackageArgs {\n  bucket: Scalars['String']\n  name: Scalars['String']\n}\n\nexport interface QuerypolicyArgs {\n  id: Scalars['ID']\n}\n\nexport interface QueryroleArgs {\n  id: Scalars['ID']\n}\n\nexport type Role = UnmanagedRole | ManagedRole\n\nexport interface RoleAssigned {\n  readonly __typename: 'RoleAssigned'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleBucketPermission extends BucketPermission {\n  readonly __typename: 'RoleBucketPermission'\n  readonly role: Role\n  readonly bucket: BucketConfig\n  readonly level: BucketPermissionLevel\n}\n\nexport type RoleCreateResult =\n  | RoleCreateSuccess\n  | RoleNameReserved\n  | RoleNameExists\n  | RoleNameInvalid\n  | RoleHasTooManyPoliciesToAttach\n\nexport interface RoleCreateSuccess {\n  readonly __typename: 'RoleCreateSuccess'\n  readonly role: Role\n}\n\nexport type RoleDeleteResult =\n  | RoleDeleteSuccess\n  | RoleDoesNotExist\n  | RoleNameReserved\n  | RoleAssigned\n\nexport interface RoleDeleteSuccess {\n  readonly __typename: 'RoleDeleteSuccess'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleDoesNotExist {\n  readonly __typename: 'RoleDoesNotExist'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleHasTooManyPoliciesToAttach {\n  readonly __typename: 'RoleHasTooManyPoliciesToAttach'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleIsManaged {\n  readonly __typename: 'RoleIsManaged'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleIsUnmanaged {\n  readonly __typename: 'RoleIsUnmanaged'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleNameExists {\n  readonly __typename: 'RoleNameExists'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleNameInvalid {\n  readonly __typename: 'RoleNameInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface RoleNameReserved {\n  readonly __typename: 'RoleNameReserved'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport type RoleSetDefaultResult = RoleSetDefaultSuccess | RoleDoesNotExist\n\nexport interface RoleSetDefaultSuccess {\n  readonly __typename: 'RoleSetDefaultSuccess'\n  readonly role: Role\n}\n\nexport type RoleUpdateResult =\n  | RoleUpdateSuccess\n  | RoleNameReserved\n  | RoleNameExists\n  | RoleNameInvalid\n  | RoleIsManaged\n  | RoleIsUnmanaged\n  | RoleHasTooManyPoliciesToAttach\n\nexport interface RoleUpdateSuccess {\n  readonly __typename: 'RoleUpdateSuccess'\n  readonly role: Role\n}\n\nexport interface SnsInvalid {\n  readonly __typename: 'SnsInvalid'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface Status {\n  readonly __typename: 'Status'\n  readonly canaries: ReadonlyArray<Canary>\n  readonly latestStats: TestStats\n  readonly stats: TestStatsTimeSeries\n  readonly reports: StatusReportList\n  readonly reportsBucket: Scalars['String']\n}\n\nexport interface StatusstatsArgs {\n  window?: Maybe<Scalars['Int']>\n}\n\nexport interface StatusreportsArgs {\n  filter: Maybe<StatusReportListFilter>\n}\n\nexport interface StatusReport {\n  readonly __typename: 'StatusReport'\n  readonly timestamp: Scalars['Datetime']\n  readonly renderedReportLocation: Scalars['S3ObjectLocation']\n}\n\nexport interface StatusReportList {\n  readonly __typename: 'StatusReportList'\n  readonly total: Scalars['Int']\n  readonly page: ReadonlyArray<StatusReport>\n}\n\nexport interface StatusReportListpageArgs {\n  number?: Scalars['Int']\n  perPage?: Scalars['Int']\n  order?: StatusReportListOrder\n}\n\nexport interface StatusReportListFilter {\n  readonly timestampFrom: Maybe<Scalars['Datetime']>\n  readonly timestampTo: Maybe<Scalars['Datetime']>\n}\n\nexport enum StatusReportListOrder {\n  NEW_FIRST = 'NEW_FIRST',\n  OLD_FIRST = 'OLD_FIRST',\n}\n\nexport type StatusResult = Status | Unavailable\n\nexport interface TestStats {\n  readonly __typename: 'TestStats'\n  readonly passed: Scalars['Int']\n  readonly failed: Scalars['Int']\n  readonly running: Scalars['Int']\n}\n\nexport interface TestStatsTimeSeries {\n  readonly __typename: 'TestStatsTimeSeries'\n  readonly datetimes: ReadonlyArray<Scalars['Datetime']>\n  readonly passed: ReadonlyArray<Scalars['Int']>\n  readonly failed: ReadonlyArray<Scalars['Int']>\n}\n\nexport interface Unavailable {\n  readonly __typename: 'Unavailable'\n  readonly _: Maybe<Scalars['Boolean']>\n}\n\nexport interface UnmanagedPolicyInput {\n  readonly title: Scalars['String']\n  readonly arn: Scalars['String']\n  readonly roles: ReadonlyArray<Scalars['ID']>\n}\n\nexport interface UnmanagedRole {\n  readonly __typename: 'UnmanagedRole'\n  readonly id: Scalars['ID']\n  readonly name: Scalars['String']\n  readonly arn: Scalars['String']\n}\n\nexport interface UnmanagedRoleInput {\n  readonly name: Scalars['String']\n  readonly arn: Scalars['String']\n}\n","import * as IO from 'io-ts'\n\nimport assertNever from 'utils/assertNever'\nimport * as Types from 'utils/types'\n\nimport * as GQLTypes from './graphql/types.generated'\n\nexport * as GQLTypes from './graphql/types.generated'\n\nexport * as S3 from './S3'\n\nexport const BucketPermissionLevel = Types.enum(\n  GQLTypes.BucketPermissionLevel,\n  'BucketPermissionLevel',\n)\n\nexport const BucketPermissionLevelStrings = ['Read', 'ReadWrite'] as const\n\nexport type BucketPermissionLevelString = typeof BucketPermissionLevelStrings[number]\n\nexport const BucketPermissionLevelFromString = new IO.Type<\n  GQLTypes.BucketPermissionLevel,\n  BucketPermissionLevelString\n>(\n  'BucketPermissionLevelFromString',\n  BucketPermissionLevel.is,\n  (u, c) => {\n    if (u === 'Read') return IO.success(GQLTypes.BucketPermissionLevel.READ)\n    if (u === 'ReadWrite') return IO.success(GQLTypes.BucketPermissionLevel.READ_WRITE)\n    return IO.failure(u, c)\n  },\n  (a) => {\n    if (a === GQLTypes.BucketPermissionLevel.READ) return 'Read' as const\n    if (a === GQLTypes.BucketPermissionLevel.READ_WRITE) return 'ReadWrite' as const\n    return assertNever(a)\n  },\n)\n\nexport type PotentialCollaborator = {\n  collaborator: GQLTypes.Collaborator\n  permissionLevel?: undefined\n}\n\nexport type Collaborators = ReadonlyArray<\n  GQLTypes.CollaboratorBucketConnection | PotentialCollaborator\n>\n\nexport interface PackageEntry {\n  physicalKey: string\n  hash: string\n  meta: Types.JsonRecord | null\n  size: number\n}\n\nexport type PackageContentsFlatMap = Record<string, PackageEntry>\n\nexport interface S3File {\n  bucket: string\n  key: string\n  meta?: Types.JsonRecord // TODO: make it the same as in PackageEntry\n  size: number\n  version?: string\n}\n","import * as React from 'react'\nimport { Helmet } from 'react-helmet'\n\nconst BASE = 'Quilt is a versioned data hub for AWS'\n\nconst DIVIDER = ' • '\n\ninterface MetaTitleProps {\n  children?: string | string[]\n  base?: string\n}\n\nfunction getTitleSegments(base: string, children?: string | string[]) {\n  if (!children) return [base]\n\n  if (Array.isArray(children)) return [...children, base]\n\n  return [children, base]\n}\n\nexport function getTitle(base: string, children?: string | string[]) {\n  return getTitleSegments(base, children).join(DIVIDER)\n}\n\nexport default function MetaTitle({ children, base = BASE }: MetaTitleProps) {\n  return (\n    <Helmet>\n      <title>{getTitle(base, children)}</title>\n    </Helmet>\n  )\n}\n","import * as React from 'react'\n\nconst MINUTE = 1000 * 60\nconst HOUR = MINUTE * 60\nconst DAY = HOUR * 24\nconst MONTH = DAY * 30\nconst YEAR = DAY * 365\n\nconst intl = new Intl.RelativeTimeFormat('en', { numeric: 'auto' })\n\nexport function relativify(date: Date, baseDate?: Date) {\n  const delta = date.valueOf() - (baseDate?.valueOf() || Date.now())\n\n  const years = delta / YEAR\n  if (Math.abs(years) >= 1) return intl.format(Math.round(years), 'year')\n\n  const months = delta / MONTH\n  if (Math.abs(months) >= 1) return intl.format(Math.round(months), 'month')\n\n  const days = delta / DAY\n  if (Math.abs(days) >= 1) return intl.format(Math.round(days), 'day')\n\n  const hours = delta / HOUR\n  if (Math.abs(hours) >= 1) return intl.format(Math.round(hours), 'hour')\n\n  const minutes = delta / MINUTE\n  if (Math.abs(minutes) >= 1) return intl.format(Math.round(minutes), 'minute')\n\n  return intl.format(Math.round(delta / 1000), 'second')\n}\n\ninterface RelativeProps {\n  value: Date\n}\n\nexport function Relative({ value }: RelativeProps) {\n  const [t, setT] = React.useState(new Date())\n\n  React.useEffect(() => {\n    const timerId = window.setInterval(() => setT(new Date()), 1000)\n    return () => clearInterval(timerId)\n  }, [value])\n\n  // return a Fragment to overcome a typing limitation:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n  return React.useMemo(() => <>{relativify(value, t)}</>, [value, t])\n}\n\ninterface Rules {\n  zero?: string | ((v: number) => string)\n  one?: string | ((v: number) => string)\n  // NOTE: we don't need it yet and, maybe, never\n  // two?: (v: number) => string\n  // few?: (v: number) => string\n  // many?: (v: number) => string\n  other: string | ((v: number) => string)\n}\n\nfunction numberToRule(value: number) {\n  switch (value) {\n    case 0:\n      return 'zero'\n    case 1:\n      return 'one'\n    // NOTE: we don't need it yet and, maybe, never\n    // 2,3,4,22,23... return 'few'\n    // 5,6,...11,12... return 'many'\n    default:\n      return 'other'\n  }\n}\n\nexport function pluralify(value: number, rules: Rules) {\n  const intlFunc = rules[numberToRule(value)]\n  if (intlFunc) return typeof intlFunc === 'function' ? intlFunc(value) : intlFunc\n  return typeof rules.other === 'function' ? rules.other(value) : rules.other\n}\n\ninterface PluralProps extends Rules {\n  value: number\n}\n\nexport function Plural({ value, zero, one, other }: PluralProps) {\n  // return a Fragment to overcome a typing limitation:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n  return React.useMemo(\n    () => <>{pluralify(value, { zero, one, other })}</>,\n    [value, zero, one, other],\n  )\n}\n","import * as FP from 'fp-ts'\nimport * as IO from 'io-ts'\nimport { formatValidationErrors } from 'io-ts-reporters'\nimport * as R from 'ramda'\n\nimport { BaseError } from 'utils/error'\n\nexport * from 'io-ts-types'\n\nexport class ValidationError extends BaseError {\n  constructor(e: IO.Errors) {\n    const formatted = formatValidationErrors(e).join('\\n')\n    super(`ValidationError\\n${formatted}`)\n  }\n}\n\nexport const decode = <T>(codec: IO.Type<T, any, any>) =>\n  R.pipe(\n    codec.decode,\n    FP.either.fold(\n      (e) => {\n        throw new ValidationError(e)\n      },\n      (a) => a,\n    ),\n  ) as (i: unknown) => T\n\nexport interface NullableC<C extends IO.Mixed>\n  extends IO.Type<IO.TypeOf<C> | null, IO.OutputOf<C> | null, unknown> {}\n\nexport type Nullable<T> = T | null\n\nexport const nullable = <C extends IO.Mixed>(\n  codec: C,\n  name: string = `Nullable<${codec.name}>`,\n) =>\n  new IO.Type(\n    name,\n    (i): i is Nullable<IO.TypeOf<C>> => i === null || codec.is(i),\n    (u, c) => (u == null ? IO.success(null) : codec.validate(u, c)),\n    (a) => a,\n  ) as NullableC<C>\n\n// enum implementation taken from https://github.com/gcanti/io-ts/pull/366\nenum Enum {}\n\nexport class EnumType<E extends typeof Enum> extends IO.Type<E[keyof E]> {\n  readonly _tag: 'EnumType' = 'EnumType'\n\n  private readonly enum: E\n\n  private readonly enumValues: Set<string | number>\n\n  constructor(e: E, name: string) {\n    super(\n      name,\n      (u): u is E[keyof E] => {\n        if (!this.enumValues.has(u as any)) return false\n        // Don't allow key names from number enum reverse mapping\n        if (typeof (this.enum as any)[u as string] === 'number') return false\n        return true\n      },\n      (u, c) => (this.is(u) ? IO.success(u) : IO.failure(u, c)),\n      IO.identity,\n    )\n    this.enum = e\n    this.enumValues = new Set(Object.values(e))\n  }\n}\n\nexport const enumType = <E extends typeof Enum>(e: E, name: string = 'enum') =>\n  new EnumType<E>(e, name)\n\nexport { enumType as enum }\n\nexport type AtLeast<T, K extends keyof T> = Partial<T> & Pick<T, K>\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nconst useStyles = M.makeStyles((t) => ({\n  root: {\n    padding: t.spacing(0.5),\n  },\n}))\n\n// direction: left | right\nfunction Chevron({ direction, ...rest }) {\n  const classes = useStyles()\n  return (\n    <M.IconButton className={classes.root} {...rest}>\n      <M.Icon>{`chevron_${direction}`}</M.Icon>\n    </M.IconButton>\n  )\n}\n\nexport default function Controls({ page, pages, nextPage, prevPage }) {\n  return pages <= 1 ? null : (\n    <M.Box display=\"flex\" alignItems=\"center\">\n      <Chevron direction=\"left\" onClick={prevPage} disabled={page <= 1} />\n      <Chevron direction=\"right\" onClick={nextPage} disabled={page >= pages} />\n      <M.Box ml={1.5}>\n        {page} of {pages}\n      </M.Box>\n    </M.Box>\n  )\n}\n","import * as R from 'ramda'\nimport * as React from 'react'\n\nimport usePrevious from 'utils/usePrevious'\n\nconst PER_PAGE = 10\n\nconst useGetter = (value, get) =>\n  React.useMemo(() => (value == null ? value : get(value)), [value, get])\n\nfunction useHasChanged(value, getKey = R.identity) {\n  const key = useGetter(value, getKey)\n  const oldValue = usePrevious(value)\n  const oldKey = useGetter(oldValue, getKey)\n  if (R.is(Array, key) && R.is(Array, oldKey)) {\n    // if new list == old list + more items (appended), consider it unchanged\n    // to avoid resetting pagination on adding more items to the paginated set\n    return !R.startsWith(oldKey, key)\n  }\n  return !R.equals(key, oldKey)\n}\n\nexport const usePagination = (\n  items,\n  { getItemId = R.identity, perPage: initialPerPage = PER_PAGE, onChange } = {},\n) => {\n  const [page, setPage] = React.useState(1)\n  const [perPage, setPerPage] = React.useState(initialPerPage)\n\n  const pages = Math.max(1, Math.ceil(items.length / perPage))\n\n  const goToPage = React.useMemo(\n    () => R.pipe(R.clamp(1, pages), setPage),\n    [pages, setPage],\n  )\n\n  const nextPage = React.useCallback(() => goToPage(page + 1), [goToPage, page])\n\n  const prevPage = React.useCallback(() => goToPage(page - 1), [goToPage, page])\n\n  const getKey = useGetter(getItemId, R.map)\n  if (useHasChanged(items, getKey) && page !== 1) {\n    // reset to page 1 if items change (but not if appended)\n    goToPage(1)\n  }\n\n  const offset = (page - 1) * perPage\n\n  const paginate = React.useMemo(\n    () => R.slice(offset, offset + perPage),\n    [offset, perPage],\n  )\n  const paginated = useGetter(items, paginate)\n\n  usePrevious(perPage, (prev) => {\n    if (prev && perPage !== prev) {\n      goToPage(Math.floor(((page - 1) * prev) / perPage) + 1)\n    }\n  })\n\n  usePrevious(page, (prev) => {\n    if (page !== prev && onChange) onChange(prev, page)\n  })\n\n  return {\n    paginated,\n    total: items.length,\n    from: offset + 1,\n    to: offset + perPage,\n    perPage,\n    setPerPage,\n    page,\n    pages,\n    nextPage,\n    prevPage,\n    goToPage,\n  }\n}\n\nexport const use = usePagination\n\n// children: ReactNode[], items: any[]\nexport function Pagination({ children, items, ...props }) {\n  return children(use(items, props))\n}\n","import cx from 'classnames'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport { lighten } from '@material-ui/core/styles/colorManipulator'\n\nimport useMemoEq from 'utils/useMemoEq'\n\nconst changeDirection = (d) => (d === 'asc' ? 'desc' : 'asc')\n\nexport function useOrdering({ rows, ...opts }) {\n  const [column, setColumn] = React.useState(opts.column)\n  const [direction, setDirection] = React.useState(opts.direction || 'asc')\n\n  const sortBy = column.sortBy || column.getValue\n  const sort = React.useMemo(\n    () => R.pipe(R.sortBy(sortBy), direction === 'asc' ? R.identity : R.reverse),\n    [sortBy, direction],\n  )\n\n  const ordered = useMemoEq([sort, rows], () => sort(rows))\n\n  const change = React.useCallback(\n    (newCol) => {\n      if (column !== newCol) {\n        setColumn(newCol)\n        setDirection('asc')\n      } else {\n        setDirection(changeDirection)\n      }\n    },\n    [column, setColumn, setDirection],\n  )\n\n  return { column, direction, change, ordered }\n}\n\nexport const renderAction = (a) =>\n  !a ? null : (\n    <M.Tooltip title={a.title} key={a.title}>\n      <M.IconButton\n        aria-label={a.title}\n        onClick={a.fn}\n        href={a.href}\n        component={a.href ? 'a' : undefined}\n        target={a.href ? '_blank' : undefined}\n      >\n        {a.icon}\n      </M.IconButton>\n    </M.Tooltip>\n  )\n\nconst useToolbarStyles = M.makeStyles((t) => ({\n  root: {\n    paddingRight: t.spacing(1),\n  },\n  highlight:\n    t.palette.type === 'light'\n      ? {\n          color: t.palette.secondary.main,\n          backgroundColor: lighten(t.palette.secondary.light, 0.85),\n        }\n      : {\n          color: t.palette.text.primary,\n          backgroundColor: t.palette.secondary.dark,\n        },\n  spacer: {\n    flex: '1 1 100%',\n  },\n  actions: {\n    color: t.palette.text.secondary,\n  },\n  title: {\n    flex: '0 0 auto',\n  },\n}))\n\nexport function Toolbar({ heading, selected = 0, actions = [], selectedActions = [] }) {\n  const classes = useToolbarStyles()\n  return (\n    <M.Toolbar className={cx(classes.root, { [classes.highlight]: selected > 0 })}>\n      <div className={classes.title}>\n        {selected > 0 ? (\n          <M.Typography color=\"inherit\" variant=\"subtitle1\">\n            {selected} selected\n          </M.Typography>\n        ) : (\n          <M.Typography variant=\"h6\">{heading}</M.Typography>\n        )}\n      </div>\n      <div className={classes.spacer} />\n      <div className={classes.actions}>\n        {(selected > 0 ? selectedActions : actions).map(renderAction)}\n      </div>\n    </M.Toolbar>\n  )\n}\n\nexport function Head({\n  columns,\n  selection: sel = undefined,\n  ordering: ord,\n  withInlineActions = false,\n}) {\n  return (\n    <M.TableHead>\n      <M.TableRow>\n        {!!sel && (\n          <M.TableCell padding=\"checkbox\" onClick={sel.toggleAll}>\n            <M.Checkbox\n              indeterminate={sel.selected.size > 0 && sel.selected.size < sel.all.size}\n              checked={sel.selected.equals(sel.all)}\n            />\n          </M.TableCell>\n        )}\n        {columns.map((col) => (\n          <M.TableCell\n            key={col.id}\n            sortDirection={ord.column === col ? ord.direction : false}\n            align={col.align}\n          >\n            {col.sortable === false ? (\n              col.label\n            ) : (\n              <M.Tooltip\n                title={col.hint || 'Sort'}\n                placement=\"bottom-start\"\n                enterDelay={300}\n              >\n                <M.TableSortLabel\n                  active={ord.column === col}\n                  direction={ord.direction}\n                  onClick={() => ord.change(col)}\n                >\n                  {col.label}\n                </M.TableSortLabel>\n              </M.Tooltip>\n            )}\n          </M.TableCell>\n        ))}\n        {withInlineActions && <M.TableCell align=\"right\">Actions</M.TableCell>}\n      </M.TableRow>\n    </M.TableHead>\n  )\n}\n\nconst useWrapperStyles = M.makeStyles({\n  root: {\n    overflowX: 'auto',\n  },\n})\n\nexport function Wrapper({ className = undefined, ...props }) {\n  const classes = useWrapperStyles()\n  return <div className={cx(classes.root, className)} {...props} />\n}\n\nconst useInlineActionsStyles = M.makeStyles((t) => ({\n  root: {\n    opacity: 0.3,\n    paddingRight: t.spacing(1),\n    textAlign: 'right',\n    transition: 'opacity 100ms',\n    whiteSpace: 'nowrap',\n\n    'tr:hover &': {\n      opacity: 1,\n    },\n  },\n}))\n\nexport function InlineActions({ actions = [], children = undefined, ...props }) {\n  const classes = useInlineActionsStyles()\n  return (\n    <div className={classes.root} {...props}>\n      {actions.map(renderAction)}\n      {children}\n    </div>\n  )\n}\n\nconst useProgressStyles = M.makeStyles((t) => ({\n  root: {\n    marginBottom: t.spacing(2),\n    marginLeft: t.spacing(3),\n  },\n}))\n\nexport function Progress(props) {\n  const classes = useProgressStyles()\n  return <M.CircularProgress classes={classes} {...props} />\n}\n\nconst usePaginationStyles = M.makeStyles((t) => ({\n  toolbar: {\n    paddingRight: [t.spacing(1), '!important'],\n  },\n}))\n\nexport function Pagination({ pagination, ...rest }) {\n  const classes = usePaginationStyles()\n  return (\n    <M.TablePagination\n      classes={classes}\n      component=\"div\"\n      count={pagination.total}\n      rowsPerPage={pagination.perPage}\n      page={pagination.page - 1}\n      onChangePage={(e, page) => pagination.goToPage(page + 1)}\n      onChangeRowsPerPage={(e) => pagination.setPerPage(e.target.value)}\n      {...rest}\n    />\n  )\n}\n","import * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\ninterface FieldOwnProps {\n  error?: string\n  errors: Record<string, React.ReactNode>\n  helperText?: React.ReactNode\n  validating?: boolean\n}\n\ntype FieldProps = FieldOwnProps & RF.FieldRenderProps<string> & M.TextFieldProps\n\nexport function Field({ input, meta, errors, helperText, ...rest }: FieldProps) {\n  const error =\n    meta.submitFailed && (meta.error || (!meta.dirtySinceLastSubmit && meta.submitError))\n  const props = {\n    error: !!error,\n    helperText: error ? errors[error] || error : helperText,\n    disabled: meta.submitting || meta.submitSucceeded,\n    ...input,\n    ...rest,\n  }\n  return <M.TextField {...props} />\n}\n\nconst useFormErrorStyles = M.makeStyles((t) => ({\n  root: {\n    marginTop: t.spacing(3),\n\n    '& a': {\n      textDecoration: 'underline',\n    },\n  },\n}))\n\ntype FormErrorProps = M.TypographyProps & {\n  error?: string\n  errors: Record<string, string>\n}\n\nexport function FormError({ error, errors, ...rest }: FormErrorProps) {\n  const classes = useFormErrorStyles()\n  return !error ? null : (\n    <M.Typography color=\"error\" classes={classes} {...rest}>\n      {errors[error] || error}\n    </M.Typography>\n  )\n}\n","// sync with the backend\nexport const MAX_POLICIES_PER_ROLE = 5\n\nconst IAM_HOME = 'https://console.aws.amazon.com/iam/home'\nconst ARN_ROLE_RE = /^arn:aws:iam:[^:]*:[^:]+:role\\/(?:.*\\/)?(.+)$/\nconst ARN_POLICY_RE = /^arn:aws:iam:[^:]*:[^:]+:policy\\/(.+)$/\n\nexport function getArnLink(arn: string) {\n  const [, role] = arn.match(ARN_ROLE_RE) || []\n  if (role) return `${IAM_HOME}#/roles/${role}`\n  const [, policy] = arn.match(ARN_POLICY_RE) || []\n  if (policy) return `${IAM_HOME}#/policies/${arn}`\n  return undefined\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type BucketPermissionSelection_PolicyBucketPermission_Fragment = {\n  readonly __typename: 'PolicyBucketPermission'\n} & Pick<Types.PolicyBucketPermission, 'level'> & {\n    readonly bucket: { readonly __typename: 'BucketConfig' } & Pick<\n      Types.BucketConfig,\n      'name' | 'title' | 'iconUrl'\n    >\n  }\n\nexport type BucketPermissionSelection_RoleBucketPermission_Fragment = {\n  readonly __typename: 'RoleBucketPermission'\n} & Pick<Types.RoleBucketPermission, 'level'> & {\n    readonly bucket: { readonly __typename: 'BucketConfig' } & Pick<\n      Types.BucketConfig,\n      'name' | 'title' | 'iconUrl'\n    >\n  }\n\nexport type BucketPermissionSelectionFragment =\n  | BucketPermissionSelection_PolicyBucketPermission_Fragment\n  | BucketPermissionSelection_RoleBucketPermission_Fragment\n\nexport const BucketPermissionSelectionFragmentDoc = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'BucketPermissionSelection' },\n      typeCondition: {\n        kind: 'NamedType',\n        name: { kind: 'Name', value: 'BucketPermission' },\n      },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'bucket' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'title' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'iconUrl' } },\n              ],\n            },\n          },\n          { kind: 'Field', name: { kind: 'Name', value: 'level' } },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<BucketPermissionSelectionFragment, unknown>\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  BucketPermissionSelection_PolicyBucketPermission_Fragment,\n  BucketPermissionSelection_RoleBucketPermission_Fragment,\n  BucketPermissionSelectionFragmentDoc,\n} from './BucketPermissionSelection.generated'\n\nexport type PolicySelectionFragment = { readonly __typename: 'Policy' } & Pick<\n  Types.Policy,\n  'id' | 'title' | 'arn' | 'managed'\n> & {\n    readonly permissions: ReadonlyArray<\n      {\n        readonly __typename: 'PolicyBucketPermission'\n      } & BucketPermissionSelection_PolicyBucketPermission_Fragment\n    >\n    readonly roles: ReadonlyArray<\n      { readonly __typename: 'ManagedRole' } & Pick<\n        Types.ManagedRole,\n        'id' | 'name' | 'arn'\n      > & {\n          readonly permissions: ReadonlyArray<\n            {\n              readonly __typename: 'RoleBucketPermission'\n            } & BucketPermissionSelection_RoleBucketPermission_Fragment\n          >\n          readonly policies: ReadonlyArray<\n            { readonly __typename: 'Policy' } & Pick<Types.Policy, 'id'>\n          >\n        }\n    >\n  }\n\nexport const PolicySelectionFragmentDoc = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'PolicySelection' },\n      typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Policy' } },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'title' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'arn' } },\n          { kind: 'Field', name: { kind: 'Name', value: 'managed' } },\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'permissions' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'BucketPermissionSelection' },\n                },\n              ],\n            },\n          },\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'roles' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'arn' } },\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'permissions' },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'FragmentSpread',\n                        name: { kind: 'Name', value: 'BucketPermissionSelection' },\n                      },\n                    ],\n                  },\n                },\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'policies' },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...BucketPermissionSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<PolicySelectionFragment, unknown>\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  PolicySelectionFragment,\n  PolicySelectionFragmentDoc,\n} from './PolicySelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_PoliciesQueryVariables = Types.Exact<{\n  [key: string]: never\n}>\n\nexport type containers_Admin_RolesAndPolicies_gql_PoliciesQuery = {\n  readonly __typename: 'Query'\n} & {\n  readonly policies: ReadonlyArray<\n    { readonly __typename: 'Policy' } & PolicySelectionFragment\n  >\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_PoliciesDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'containers_Admin_RolesAndPolicies_gql_Policies' },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'policies' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'PolicySelection' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...PolicySelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_PoliciesQuery,\n  containers_Admin_RolesAndPolicies_gql_PoliciesQueryVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_PoliciesDocument as default }\n","import * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nimport StyledLink from 'utils/StyledLink'\nimport useQuery from 'utils/useQuery'\n\nimport { MAX_POLICIES_PER_ROLE } from './shared'\n\nimport POLICIES_QUERY from './gql/Policies.generated'\nimport { PolicySelectionFragment as Policy } from './gql/PolicySelection.generated'\n\ninterface PolicySelectionDialogProps {\n  open: boolean\n  onClose: () => void\n  policies: Policy[]\n  attachPolicy: (policy: Policy) => void\n}\n\nfunction PolicySelectionDialog({\n  open,\n  onClose,\n  policies,\n  attachPolicy,\n}: PolicySelectionDialogProps) {\n  const [selected, setSelected] = React.useState<Policy | null>(null)\n\n  const handleExited = React.useCallback(() => {\n    if (selected) attachPolicy(selected)\n    setSelected(null)\n  }, [attachPolicy, selected, setSelected])\n\n  const select = React.useCallback(\n    (policy: Policy) => {\n      setSelected(policy)\n      onClose()\n    },\n    [setSelected, onClose],\n  )\n\n  return (\n    <M.Dialog maxWidth=\"xs\" open={open} onClose={onClose} onExited={handleExited}>\n      <M.DialogTitle>Attach a policy</M.DialogTitle>\n      <M.List dense>\n        {policies.length ? (\n          policies.map((policy) => (\n            <M.ListItem button key={policy.id} onClick={() => select(policy)}>\n              <M.ListItemText>\n                {policy.title}\n                <M.Box component=\"span\" color=\"text.secondary\">\n                  {' '}\n                  (\n                  {policy.managed ? (\n                    <>{policy.permissions.length} buckets</>\n                  ) : (\n                    <>unmanaged</>\n                  )}\n                  )\n                </M.Box>\n              </M.ListItemText>\n            </M.ListItem>\n          ))\n        ) : (\n          <M.DialogContent dividers>\n            <M.Typography>No more policies to attach</M.Typography>\n          </M.DialogContent>\n        )}\n      </M.List>\n      <M.DialogActions>\n        <M.Button autoFocus onClick={onClose} color=\"primary\">\n          Cancel\n        </M.Button>\n      </M.DialogActions>\n    </M.Dialog>\n  )\n}\n\ninterface AttachedPoliciesProps extends RF.FieldRenderProps<Policy[]> {\n  className?: string\n  onAdvanced?: () => void\n}\n\nexport default function AttachedPolicies({\n  className,\n  input: { value, onChange },\n  meta,\n  onAdvanced,\n}: AttachedPoliciesProps) {\n  const error =\n    meta.submitFailed && (meta.error || (!meta.dirtySinceLastSubmit && meta.submitError))\n\n  const policiesData = useQuery({ query: POLICIES_QUERY })\n\n  const [policySelectionOpen, setPolicySelectionOpen] = React.useState(false)\n\n  const openPolicySelection = React.useCallback(() => {\n    setPolicySelectionOpen(true)\n  }, [setPolicySelectionOpen])\n\n  const closePolicySelection = React.useCallback(() => {\n    setPolicySelectionOpen(false)\n  }, [setPolicySelectionOpen])\n\n  const attachPolicy = React.useCallback(\n    (policy: Policy) => {\n      onChange(value.concat(policy))\n    },\n    [onChange, value],\n  )\n\n  const detachPolicy = (policy: Policy) => {\n    onChange(value.filter((p) => p.id !== policy.id))\n  }\n\n  const availablePolicies = React.useMemo(\n    () =>\n      policiesData.case({\n        fetching: () => null,\n        error: () => null,\n        data: ({ policies }) => {\n          const ids = value.reduce(\n            (acc, { id }) => ({ ...acc, [id]: true }),\n            {} as Record<string, boolean>,\n          )\n          return policies.filter((p) => !ids[p.id])\n        },\n      }),\n    [policiesData, value],\n  )\n\n  const maxReached = value.length >= MAX_POLICIES_PER_ROLE\n\n  return (\n    <div className={className}>\n      <M.Box display=\"flex\" alignItems=\"center\">\n        <M.Typography variant=\"h6\">Attached policies</M.Typography>\n        {policiesData.case({\n          data: () => null,\n          fetching: () => (\n            <M.Tooltip arrow title=\"Fetching policies\">\n              <M.CircularProgress size={20} style={{ opacity: 0.3, marginLeft: '8px' }} />\n            </M.Tooltip>\n          ),\n          error: (e) => (\n            <M.Tooltip arrow title={<>Error fetching policies: {e.message}</>}>\n              <M.Icon style={{ opacity: 0.3, marginLeft: '8px' }}>error</M.Icon>\n            </M.Tooltip>\n          ),\n        })}\n      </M.Box>\n      <M.FormHelperText>\n        Manage access by combining <strong>up to {MAX_POLICIES_PER_ROLE}</strong> reusable\n        policies\n        {!!onAdvanced && (\n          <>\n            {' '}\n            or <StyledLink onClick={onAdvanced}>set existing role via ARN</StyledLink>\n          </>\n        )}\n      </M.FormHelperText>\n      <M.Collapse in={!!error}>\n        <M.FormHelperText error>{error || ' '}</M.FormHelperText>\n      </M.Collapse>\n\n      <M.List dense disablePadding>\n        {value.map((policy) => (\n          // XXX: sort?\n          // XXX: navigate to policy on click?\n          <M.ListItem key={policy.id} divider disableGutters>\n            <M.ListItemText>\n              {policy.title}\n              <M.Box component=\"span\" color=\"text.secondary\">\n                {' '}\n                (\n                {policy.managed ? (\n                  <>{policy.permissions.length} buckets</>\n                ) : (\n                  <>unmanaged</>\n                )}\n                )\n              </M.Box>\n            </M.ListItemText>\n            <M.ListItemSecondaryAction style={{ right: 0 }}>\n              <M.Tooltip title=\"Detach this policy\">\n                <M.IconButton\n                  onClick={() => detachPolicy(policy)}\n                  edge=\"end\"\n                  size=\"small\"\n                >\n                  <M.Icon fontSize=\"small\">clear</M.Icon>\n                </M.IconButton>\n              </M.Tooltip>\n            </M.ListItemSecondaryAction>\n          </M.ListItem>\n        ))}\n        {!maxReached && !!availablePolicies?.length && (\n          <M.ListItem button disableGutters onClick={openPolicySelection}>\n            <M.ListItemText>\n              {!value.length && <>No policies attached. </>}\n              Attach a policy&hellip;\n            </M.ListItemText>\n          </M.ListItem>\n        )}\n      </M.List>\n      {availablePolicies && (\n        <PolicySelectionDialog\n          policies={availablePolicies}\n          open={policySelectionOpen}\n          onClose={closePolicySelection}\n          attachPolicy={attachPolicy}\n        />\n      )}\n    </div>\n  )\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type RoleSelection_UnmanagedRole_Fragment = {\n  readonly __typename: 'UnmanagedRole'\n} & Pick<Types.UnmanagedRole, 'id' | 'name' | 'arn'>\n\nexport type RoleSelection_ManagedRole_Fragment = {\n  readonly __typename: 'ManagedRole'\n} & Pick<Types.ManagedRole, 'id' | 'name' | 'arn'> & {\n    readonly permissions: ReadonlyArray<\n      { readonly __typename: 'RoleBucketPermission' } & Pick<\n        Types.RoleBucketPermission,\n        'level'\n      > & {\n          readonly bucket: { readonly __typename: 'BucketConfig' } & Pick<\n            Types.BucketConfig,\n            'name'\n          >\n        }\n    >\n    readonly policies: ReadonlyArray<\n      { readonly __typename: 'Policy' } & Pick<\n        Types.Policy,\n        'id' | 'title' | 'managed'\n      > & {\n          readonly permissions: ReadonlyArray<\n            { readonly __typename: 'PolicyBucketPermission' } & Pick<\n              Types.PolicyBucketPermission,\n              'level'\n            > & {\n                readonly bucket: { readonly __typename: 'BucketConfig' } & Pick<\n                  Types.BucketConfig,\n                  'name'\n                >\n              }\n          >\n          readonly roles: ReadonlyArray<\n            { readonly __typename: 'ManagedRole' } & Pick<Types.ManagedRole, 'id'>\n          >\n        }\n    >\n  }\n\nexport type RoleSelectionFragment =\n  | RoleSelection_UnmanagedRole_Fragment\n  | RoleSelection_ManagedRole_Fragment\n\nexport const RoleSelectionFragmentDoc = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'RoleSelection' },\n      typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Role' } },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n          {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'UnmanagedRole' },\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'arn' } },\n              ],\n            },\n          },\n          {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'ManagedRole' },\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'arn' } },\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'permissions' },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'bucket' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                          ],\n                        },\n                      },\n                      { kind: 'Field', name: { kind: 'Name', value: 'level' } },\n                    ],\n                  },\n                },\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'policies' },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },\n                      { kind: 'Field', name: { kind: 'Name', value: 'managed' } },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'permissions' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: 'bucket' },\n                              selectionSet: {\n                                kind: 'SelectionSet',\n                                selections: [\n                                  {\n                                    kind: 'Field',\n                                    name: { kind: 'Name', value: 'name' },\n                                  },\n                                ],\n                              },\n                            },\n                            { kind: 'Field', name: { kind: 'Name', value: 'level' } },\n                          ],\n                        },\n                      },\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'roles' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<RoleSelectionFragment, unknown>\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  RoleSelection_UnmanagedRole_Fragment,\n  RoleSelection_ManagedRole_Fragment,\n  RoleSelectionFragmentDoc,\n} from './RoleSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_RolesQueryVariables = Types.Exact<{\n  [key: string]: never\n}>\n\nexport type containers_Admin_RolesAndPolicies_gql_RolesQuery = {\n  readonly __typename: 'Query'\n} & {\n  readonly roles: ReadonlyArray<\n    | ({ readonly __typename: 'UnmanagedRole' } & RoleSelection_UnmanagedRole_Fragment)\n    | ({ readonly __typename: 'ManagedRole' } & RoleSelection_ManagedRole_Fragment)\n  >\n  readonly defaultRole: Types.Maybe<\n    | ({ readonly __typename: 'UnmanagedRole' } & Pick<Types.UnmanagedRole, 'id'>)\n    | ({ readonly __typename: 'ManagedRole' } & Pick<Types.ManagedRole, 'id'>)\n  >\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_RolesDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'containers_Admin_RolesAndPolicies_gql_Roles' },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'roles' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'RoleSelection' },\n                },\n              ],\n            },\n          },\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'defaultRole' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'UnmanagedRole' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }],\n                  },\n                },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'ManagedRole' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...RoleSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_RolesQuery,\n  containers_Admin_RolesAndPolicies_gql_RolesQueryVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_RolesDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  RoleSelection_UnmanagedRole_Fragment,\n  RoleSelection_ManagedRole_Fragment,\n  RoleSelectionFragmentDoc,\n} from './RoleSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleCreateManagedMutationVariables =\n  Types.Exact<{\n    input: Types.ManagedRoleInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleCreateManagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly roleCreate:\n    | ({ readonly __typename: 'RoleCreateSuccess' } & {\n        readonly role:\n          | ({\n              readonly __typename: 'UnmanagedRole'\n            } & RoleSelection_UnmanagedRole_Fragment)\n          | ({ readonly __typename: 'ManagedRole' } & RoleSelection_ManagedRole_Fragment)\n      })\n    | { readonly __typename: 'RoleNameReserved' }\n    | { readonly __typename: 'RoleNameExists' }\n    | { readonly __typename: 'RoleNameInvalid' }\n    | { readonly __typename: 'RoleHasTooManyPoliciesToAttach' }\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_RoleCreateManagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_RoleCreateManaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'ManagedRoleInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'roleCreate' },\n            name: { kind: 'Name', value: 'roleCreateManaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'RoleCreateSuccess' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'role' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'FragmentSpread',\n                              name: { kind: 'Name', value: 'RoleSelection' },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...RoleSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_RoleCreateManagedMutation,\n  containers_Admin_RolesAndPolicies_gql_RoleCreateManagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_RoleCreateManagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  RoleSelection_UnmanagedRole_Fragment,\n  RoleSelection_ManagedRole_Fragment,\n  RoleSelectionFragmentDoc,\n} from './RoleSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanagedMutationVariables =\n  Types.Exact<{\n    input: Types.UnmanagedRoleInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly roleCreate:\n    | ({ readonly __typename: 'RoleCreateSuccess' } & {\n        readonly role:\n          | ({\n              readonly __typename: 'UnmanagedRole'\n            } & RoleSelection_UnmanagedRole_Fragment)\n          | ({ readonly __typename: 'ManagedRole' } & RoleSelection_ManagedRole_Fragment)\n      })\n    | { readonly __typename: 'RoleNameReserved' }\n    | { readonly __typename: 'RoleNameExists' }\n    | { readonly __typename: 'RoleNameInvalid' }\n    | { readonly __typename: 'RoleHasTooManyPoliciesToAttach' }\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'UnmanagedRoleInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'roleCreate' },\n            name: { kind: 'Name', value: 'roleCreateUnmanaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'RoleCreateSuccess' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'role' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'FragmentSpread',\n                              name: { kind: 'Name', value: 'RoleSelection' },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...RoleSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanagedMutation,\n  containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  RoleSelection_UnmanagedRole_Fragment,\n  RoleSelection_ManagedRole_Fragment,\n  RoleSelectionFragmentDoc,\n} from './RoleSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleUpdateManagedMutationVariables =\n  Types.Exact<{\n    id: Types.Scalars['ID']\n    input: Types.ManagedRoleInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleUpdateManagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly roleUpdate:\n    | ({ readonly __typename: 'RoleUpdateSuccess' } & {\n        readonly role:\n          | ({\n              readonly __typename: 'UnmanagedRole'\n            } & RoleSelection_UnmanagedRole_Fragment)\n          | ({ readonly __typename: 'ManagedRole' } & RoleSelection_ManagedRole_Fragment)\n      })\n    | { readonly __typename: 'RoleNameReserved' }\n    | { readonly __typename: 'RoleNameExists' }\n    | { readonly __typename: 'RoleNameInvalid' }\n    | { readonly __typename: 'RoleIsManaged' }\n    | { readonly __typename: 'RoleIsUnmanaged' }\n    | { readonly __typename: 'RoleHasTooManyPoliciesToAttach' }\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_RoleUpdateManagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_RoleUpdateManaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'ManagedRoleInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'roleUpdate' },\n            name: { kind: 'Name', value: 'roleUpdateManaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'id' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n              },\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'RoleUpdateSuccess' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'role' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'FragmentSpread',\n                              name: { kind: 'Name', value: 'RoleSelection' },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...RoleSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_RoleUpdateManagedMutation,\n  containers_Admin_RolesAndPolicies_gql_RoleUpdateManagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_RoleUpdateManagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  RoleSelection_UnmanagedRole_Fragment,\n  RoleSelection_ManagedRole_Fragment,\n  RoleSelectionFragmentDoc,\n} from './RoleSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanagedMutationVariables =\n  Types.Exact<{\n    id: Types.Scalars['ID']\n    input: Types.UnmanagedRoleInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly roleUpdate:\n    | ({ readonly __typename: 'RoleUpdateSuccess' } & {\n        readonly role:\n          | ({\n              readonly __typename: 'UnmanagedRole'\n            } & RoleSelection_UnmanagedRole_Fragment)\n          | ({ readonly __typename: 'ManagedRole' } & RoleSelection_ManagedRole_Fragment)\n      })\n    | { readonly __typename: 'RoleNameReserved' }\n    | { readonly __typename: 'RoleNameExists' }\n    | { readonly __typename: 'RoleNameInvalid' }\n    | { readonly __typename: 'RoleIsManaged' }\n    | { readonly __typename: 'RoleIsUnmanaged' }\n    | { readonly __typename: 'RoleHasTooManyPoliciesToAttach' }\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'UnmanagedRoleInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'roleUpdate' },\n            name: { kind: 'Name', value: 'roleUpdateUnmanaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'id' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n              },\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'RoleUpdateSuccess' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'role' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'FragmentSpread',\n                              name: { kind: 'Name', value: 'RoleSelection' },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...RoleSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanagedMutation,\n  containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleDeleteMutationVariables =\n  Types.Exact<{\n    id: Types.Scalars['ID']\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleDeleteMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly roleDelete:\n    | { readonly __typename: 'RoleDeleteSuccess' }\n    | { readonly __typename: 'RoleDoesNotExist' }\n    | { readonly __typename: 'RoleNameReserved' }\n    | { readonly __typename: 'RoleAssigned' }\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_RoleDeleteDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: { kind: 'Name', value: 'containers_Admin_RolesAndPolicies_gql_RoleDelete' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'roleDelete' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'id' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_RoleDeleteMutation,\n  containers_Admin_RolesAndPolicies_gql_RoleDeleteMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_RoleDeleteDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleSetDefaultMutationVariables =\n  Types.Exact<{\n    id: Types.Scalars['ID']\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_RoleSetDefaultMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly roleSetDefault:\n    | ({ readonly __typename: 'RoleSetDefaultSuccess' } & {\n        readonly role:\n          | ({ readonly __typename: 'UnmanagedRole' } & Pick<Types.UnmanagedRole, 'id'>)\n          | ({ readonly __typename: 'ManagedRole' } & Pick<Types.ManagedRole, 'id'>)\n      })\n    | { readonly __typename: 'RoleDoesNotExist' }\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_RoleSetDefaultDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_RoleSetDefault',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'roleSetDefault' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'id' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'RoleSetDefaultSuccess' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'role' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            {\n                              kind: 'Field',\n                              name: { kind: 'Name', value: '__typename' },\n                            },\n                            {\n                              kind: 'InlineFragment',\n                              typeCondition: {\n                                kind: 'NamedType',\n                                name: { kind: 'Name', value: 'UnmanagedRole' },\n                              },\n                              selectionSet: {\n                                kind: 'SelectionSet',\n                                selections: [\n                                  { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                                ],\n                              },\n                            },\n                            {\n                              kind: 'InlineFragment',\n                              typeCondition: {\n                                kind: 'NamedType',\n                                name: { kind: 'Name', value: 'ManagedRole' },\n                              },\n                              selectionSet: {\n                                kind: 'SelectionSet',\n                                selections: [\n                                  { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                                ],\n                              },\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_RoleSetDefaultMutation,\n  containers_Admin_RolesAndPolicies_gql_RoleSetDefaultMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_RoleSetDefaultDocument as default }\n","import * as FF from 'final-form'\nimport * as IO from 'io-ts'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as urql from 'urql'\nimport * as M from '@material-ui/core'\n\nimport * as Notifications from 'containers/Notifications'\nimport * as Model from 'model'\nimport * as Dialogs from 'utils/Dialogs'\nimport type FormSpec from 'utils/FormSpec'\nimport assertNever from 'utils/assertNever'\nimport * as Types from 'utils/types'\nimport * as validators from 'utils/validators'\n\nimport * as Form from '../RFForm'\nimport * as Table from '../Table'\n\nimport AttachedPolicies from './AttachedPolicies'\nimport { MAX_POLICIES_PER_ROLE, getArnLink } from './shared'\n\nimport ROLES_QUERY from './gql/Roles.generated'\nimport ROLE_CREATE_MANAGED_MUTATION from './gql/RoleCreateManaged.generated'\nimport ROLE_CREATE_UNMANAGED_MUTATION from './gql/RoleCreateUnmanaged.generated'\nimport ROLE_UPDATE_MANAGED_MUTATION from './gql/RoleUpdateManaged.generated'\nimport ROLE_UPDATE_UNMANAGED_MUTATION from './gql/RoleUpdateUnmanaged.generated'\nimport ROLE_DELETE_MUTATION from './gql/RoleDelete.generated'\nimport ROLE_SET_DEFAULT_MUTATION from './gql/RoleSetDefault.generated'\nimport { RoleSelectionFragment as Role } from './gql/RoleSelection.generated'\n\nconst columns = [\n  {\n    id: 'name',\n    label: 'Name',\n    getValue: R.prop('name'),\n    props: { component: 'th', scope: 'row' },\n    getDisplay: (\n      value: string,\n      r: Role,\n      { defaultRoleId }: { defaultRoleId: string | null },\n    ) =>\n      r.id === defaultRoleId ? (\n        <M.Tooltip title=\"Automatically assigned to new users.\">\n          <strong>{value}*</strong>\n        </M.Tooltip>\n      ) : (\n        value\n      ),\n  },\n  {\n    id: 'source',\n    label: 'Source',\n    getValue: (r: Role) => r.__typename === 'ManagedRole',\n    getDisplay: (value: boolean) =>\n      value ? (\n        <abbr title=\"This IAM role is created and managed by Quilt\">Quilt</abbr>\n      ) : (\n        <abbr title=\"This IAM role is provided and managed by you or another administrator\">\n          Custom\n        </abbr>\n      ),\n  },\n  {\n    id: 'policies',\n    label: 'Associated policies',\n    getValue: (r: Role) => (r.__typename === 'ManagedRole' ? r.policies.length : null),\n    getDisplay: (_policies: any, r: Role) =>\n      r.__typename === 'ManagedRole' ? (\n        <M.Tooltip\n          arrow\n          title={\n            r.policies.length ? (\n              <M.Box component=\"ul\" pl={1} m={0.5}>\n                {r.policies.map((p) => (\n                  <li key={p.id}>{p.title}</li>\n                ))}\n              </M.Box>\n            ) : (\n              ''\n            )\n          }\n        >\n          <span>\n            {r.policies.length} / {MAX_POLICIES_PER_ROLE}\n          </span>\n        </M.Tooltip>\n      ) : (\n        'N/A'\n      ),\n  },\n  {\n    id: 'buckets',\n    label: 'Buckets',\n    getValue: (r: Role) => (r.__typename === 'ManagedRole' ? r.permissions.length : null),\n    getDisplay: (_buckets: any, r: Role) =>\n      r.__typename === 'ManagedRole' ? (\n        <M.Tooltip\n          arrow\n          title={\n            r.permissions.length ? (\n              <M.Box component=\"ul\" pl={1} m={0.5}>\n                {r.permissions.map((p) => (\n                  <li key={p.bucket.name}>\n                    {p.bucket.name} ({p.level})\n                  </li>\n                ))}\n              </M.Box>\n            ) : (\n              ''\n            )\n          }\n        >\n          <span>{r.permissions.length}</span>\n        </M.Tooltip>\n      ) : (\n        'N/A'\n      ),\n  },\n]\n\nconst useStyles = M.makeStyles((t) => ({\n  lock: {\n    alignItems: 'center',\n    background: 'rgba(255,255,255,0.9)',\n    bottom: 52,\n    cursor: 'not-allowed',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 64,\n    zIndex: 3, // above Select, Checkbox and sticky table header\n  },\n  title: {\n    '&>*': {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    },\n  },\n  panel: {\n    marginTop: t.spacing(2),\n  },\n}))\n\ninterface CreateProps {\n  close: (reason?: string) => void\n}\n\nfunction Create({ close }: CreateProps) {\n  const classes = useStyles()\n\n  const [, createManaged] = urql.useMutation(ROLE_CREATE_MANAGED_MUTATION)\n  const [, createUnmanaged] = urql.useMutation(ROLE_CREATE_UNMANAGED_MUTATION)\n\n  const { push } = Notifications.use()\n\n  const [managed, setManaged] = React.useState(true)\n\n  const onSubmit = React.useCallback(\n    async (values) => {\n      try {\n        let res\n        if (managed) {\n          const input = R.applySpec(managedRoleFormSpec)(values)\n          res = await createManaged({ input })\n        } else {\n          const input = R.applySpec(unmanagedRoleFormSpec)(values)\n          res = await createUnmanaged({ input })\n        }\n        if (res.error) throw res.error\n        if (!res.data) throw new Error('No data')\n        const r = res.data.roleCreate\n        switch (r.__typename) {\n          case 'RoleCreateSuccess':\n            push(`Role \"${r.role.name}\" created`)\n            close()\n            return undefined\n          case 'RoleNameReserved':\n            return { name: 'reserved' }\n          case 'RoleNameExists':\n            return { name: 'taken' }\n          case 'RoleNameInvalid':\n            return { name: 'invalid' }\n          case 'RoleHasTooManyPoliciesToAttach':\n            return { policies: 'Too many policies to attach' }\n          default:\n            return assertNever(r)\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Error creating role')\n        // eslint-disable-next-line no-console\n        console.error(e)\n        return { [FF.FORM_ERROR]: 'unexpected' }\n      }\n    },\n    [managed, createManaged, createUnmanaged, push, close],\n  )\n\n  return (\n    <RF.Form onSubmit={onSubmit} initialValues={INITIAL_VALUES}>\n      {({\n        handleSubmit,\n        submitting,\n        submitFailed,\n        error,\n        hasValidationErrors,\n        submitError,\n      }) => (\n        <>\n          <M.DialogTitle disableTypography>\n            <M.Typography variant=\"h5\">Create a role</M.Typography>\n          </M.DialogTitle>\n          <M.DialogContent>\n            <form onSubmit={handleSubmit}>\n              <RF.Field\n                component={Form.Field}\n                name=\"name\"\n                validate={validators.required as FF.FieldValidator<any>}\n                placeholder=\"Enter role name\"\n                label=\"Name\"\n                fullWidth\n                margin=\"normal\"\n                errors={{\n                  required: 'Enter a role name',\n                  reserved: 'This is a reserved name, please use another',\n                  taken: 'Role with this name already exists',\n                  invalid: (\n                    <>\n                      Enter a{' '}\n                      <abbr title=\"Must start with a letter and contain only alphanumeric characters and underscores thereafter\">\n                        valid\n                      </abbr>{' '}\n                      role name\n                    </>\n                  ),\n                }}\n              />\n\n              <M.FormControlLabel\n                label=\"Manually set ARN instead of configuring policies\"\n                control={<M.Checkbox checked={!managed} />}\n                onChange={() => setManaged(!managed)}\n              />\n\n              <M.Collapse in={!managed}>\n                <RF.Field\n                  component={Form.Field}\n                  name=\"arn\"\n                  validate={\n                    managed ? undefined : (validators.required as FF.FieldValidator<any>)\n                  }\n                  // to re-trigger validation when \"managed\" state changes\n                  key={`${managed}`}\n                  placeholder=\"Enter role ARN\"\n                  label=\"ARN\"\n                  fullWidth\n                  margin=\"normal\"\n                  disabled={managed}\n                  errors={{\n                    required: 'Enter an ARN',\n                  }}\n                />\n              </M.Collapse>\n\n              <M.Collapse in={managed}>\n                <RF.Field\n                  className={classes.panel}\n                  component={AttachedPolicies}\n                  name=\"policies\"\n                  fullWidth\n                  margin=\"normal\"\n                  onAdvanced={() => setManaged(false)}\n                />\n              </M.Collapse>\n\n              {submitFailed && (\n                <Form.FormError\n                  error={error || submitError}\n                  errors={{\n                    unexpected: 'Something went wrong',\n                  }}\n                />\n              )}\n              <input type=\"submit\" style={{ display: 'none' }} />\n            </form>\n          </M.DialogContent>\n          <M.DialogActions>\n            <M.Button\n              onClick={() => close('cancel')}\n              color=\"primary\"\n              disabled={submitting}\n            >\n              Cancel\n            </M.Button>\n            <M.Button\n              onClick={handleSubmit}\n              color=\"primary\"\n              disabled={submitting || (submitFailed && hasValidationErrors)}\n            >\n              Create\n            </M.Button>\n          </M.DialogActions>\n          {submitting && (\n            <div className={classes.lock}>\n              <M.CircularProgress size={80} />\n            </div>\n          )}\n        </>\n      )}\n    </RF.Form>\n  )\n}\n\ninterface DeleteProps {\n  role: Role\n  close: (reason?: string) => void\n}\n\nfunction Delete({ role, close }: DeleteProps) {\n  const { push } = Notifications.use()\n  const [, deleteRole] = urql.useMutation(ROLE_DELETE_MUTATION)\n\n  const doDelete = React.useCallback(async () => {\n    close()\n    try {\n      const res = await deleteRole({ id: role.id })\n      if (res.error) throw res.error\n      if (!res.data) throw new Error('No data')\n      const r = res.data.roleDelete\n      switch (r.__typename) {\n        case 'RoleDeleteSuccess':\n        case 'RoleDoesNotExist': // ignore if role was not found\n          return\n        case 'RoleNameReserved':\n          push(`Unable to delete reserved role \"${role.name}\"`)\n          return\n        case 'RoleAssigned':\n          push(\n            `Unable to delete role \"${role.name}\" assigned to some user(s). Unassign this role from everyone and try again.`,\n          )\n          return\n        default:\n          assertNever(r)\n      }\n    } catch (e) {\n      push(`Error deleting role \"${role.name}\"`)\n      // eslint-disable-next-line no-console\n      console.error('Error deleting role')\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }, [close, push, deleteRole, role.id, role.name])\n\n  return (\n    <>\n      <M.DialogTitle>Delete a role</M.DialogTitle>\n      <M.DialogContent>\n        You are about to delete the &quot;{role.name}&quot; role. This operation is\n        irreversible.\n      </M.DialogContent>\n      <M.DialogActions>\n        <M.Button onClick={() => close('cancel')} color=\"primary\">\n          Cancel\n        </M.Button>\n        <M.Button onClick={doDelete} color=\"primary\">\n          Delete\n        </M.Button>\n      </M.DialogActions>\n    </>\n  )\n}\n\ninterface SetDefaultProps {\n  role: Role\n  close: (reason?: string) => void\n}\n\nfunction SetDefault({ role, close }: SetDefaultProps) {\n  const { push } = Notifications.use()\n  const [, setDefault] = urql.useMutation(ROLE_SET_DEFAULT_MUTATION)\n\n  const doSetDefault = React.useCallback(async () => {\n    close()\n    try {\n      const res = await setDefault({ id: role.id })\n      if (res.error) throw res.error\n      if (!res.data) throw new Error('No data')\n      const r = res.data.roleSetDefault\n      switch (r.__typename) {\n        case 'RoleDoesNotExist':\n          throw new Error(r.__typename)\n        case 'RoleSetDefaultSuccess':\n          return\n        default:\n          assertNever(r)\n      }\n    } catch (e) {\n      push(`Error setting default role \"${role.name}\"`)\n      // eslint-disable-next-line no-console\n      console.error('Error setting default role')\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }, [close, push, setDefault, role.id, role.name])\n\n  return (\n    <>\n      <M.DialogTitle>Set default role</M.DialogTitle>\n      <M.DialogContent>\n        You are about to make &quot;{role.name}&quot; the default role for all new users.\n        Are you sure you want to do this?\n      </M.DialogContent>\n      <M.DialogActions>\n        <M.Button onClick={() => close('cancel')} color=\"primary\">\n          Cancel\n        </M.Button>\n        <M.Button onClick={doSetDefault} color=\"primary\">\n          Set default\n        </M.Button>\n      </M.DialogActions>\n    </>\n  )\n}\n\nconst unmanagedRoleFormSpec: FormSpec<Model.GQLTypes.UnmanagedRoleInput> = {\n  name: R.pipe(\n    R.prop('name'),\n    Types.decode(IO.string),\n    R.trim,\n    Types.decode(Types.NonEmptyString),\n  ),\n  arn: R.pipe(\n    R.prop('arn'),\n    Types.decode(IO.string),\n    R.trim,\n    Types.decode(Types.NonEmptyString),\n  ),\n}\n\nconst managedRoleFormSpec: FormSpec<Model.GQLTypes.ManagedRoleInput> = {\n  name: R.pipe(\n    R.prop('name'),\n    Types.decode(IO.string),\n    R.trim,\n    Types.decode(Types.NonEmptyString),\n  ),\n  policies: R.pipe(\n    R.prop('policies'),\n    Types.decode(IO.array(IO.type({ id: IO.string }))),\n    R.pluck('id'),\n    Types.decode(IO.readonlyArray(Types.NonEmptyString)),\n  ),\n}\n\nconst INITIAL_VALUES = { managed: true, policies: [] }\n\ninterface EditProps {\n  role: Role\n  close: (reason?: string) => void\n}\n\nfunction Edit({ role, close }: EditProps) {\n  const [, updateManaged] = urql.useMutation(ROLE_UPDATE_MANAGED_MUTATION)\n  const [, updateUnmanaged] = urql.useMutation(ROLE_UPDATE_UNMANAGED_MUTATION)\n\n  const managed = role.__typename === 'ManagedRole'\n\n  const onSubmit = React.useCallback(\n    async (values) => {\n      try {\n        let res\n        if (managed) {\n          const input = R.applySpec(managedRoleFormSpec)(values)\n          res = await updateManaged({ input, id: role.id })\n        } else {\n          const input = R.applySpec(unmanagedRoleFormSpec)(values)\n          res = await updateUnmanaged({ input, id: role.id })\n        }\n        if (res.error) throw res.error\n        if (!res.data) throw new Error('No data')\n        const r = res.data.roleUpdate\n        switch (r.__typename) {\n          case 'RoleUpdateSuccess':\n            close()\n            return undefined\n          case 'RoleNameReserved':\n            return { name: 'reserved' }\n          case 'RoleNameExists':\n            return { name: 'taken' }\n          case 'RoleNameInvalid':\n            return { name: 'invalid' }\n          case 'RoleHasTooManyPoliciesToAttach':\n            return { policies: 'Too many policies to attach' }\n          case 'RoleIsManaged':\n          case 'RoleIsUnmanaged':\n            throw new Error(r.__typename)\n          default:\n            return assertNever(r)\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Error updating role')\n        // eslint-disable-next-line no-console\n        console.error(e)\n        return { [FF.FORM_ERROR]: 'unexpected' }\n      }\n    },\n    [managed, role.id, updateManaged, updateUnmanaged, close],\n  )\n\n  const classes = useStyles()\n\n  const initialValues = React.useMemo(\n    () => ({\n      name: role.name,\n      policies: role.__typename === 'ManagedRole' ? role.policies : [],\n      arn: role.__typename === 'UnmanagedRole' ? role.arn : null,\n    }),\n    [role],\n  )\n\n  const title = (\n    <>\n      Edit{' '}\n      {managed ? (\n        <abbr title=\"This IAM role is created and managed by Quilt\">Quilt</abbr>\n      ) : (\n        <abbr title=\"This IAM role is provided and managed by you or another administrator\">\n          custom\n        </abbr>\n      )}{' '}\n      role &quot;{role.name}&quot;\n    </>\n  )\n\n  const titleStr = `Edit ${managed ? 'Quilt' : 'custom'} role \"${role.name}\"`\n\n  return (\n    <RF.Form onSubmit={onSubmit} initialValues={initialValues}>\n      {({\n        handleSubmit,\n        submitting,\n        submitFailed,\n        error,\n        pristine,\n        hasValidationErrors,\n        submitError,\n      }) => (\n        <>\n          <M.DialogTitle className={classes.title} title={titleStr}>\n            {title}\n          </M.DialogTitle>\n          <M.DialogContent>\n            <form onSubmit={handleSubmit}>\n              <RF.Field\n                component={Form.Field}\n                name=\"name\"\n                validate={validators.required as FF.FieldValidator<any>}\n                placeholder=\"Enter role name\"\n                label=\"Name\"\n                fullWidth\n                margin=\"normal\"\n                errors={{\n                  required: 'Enter a role name',\n                  reserved: 'This is a reserved name, please use another',\n                  taken: 'Role with this name already exists',\n                  invalid: 'Invalid name for role',\n                }}\n              />\n              {managed ? (\n                <>\n                  <M.TextField\n                    value={role.arn}\n                    label=\"ARN\"\n                    fullWidth\n                    margin=\"normal\"\n                    disabled\n                  />\n                  <RF.Field\n                    className={classes.panel}\n                    component={AttachedPolicies}\n                    name=\"policies\"\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                </>\n              ) : (\n                <RF.Field\n                  component={Form.Field}\n                  name=\"arn\"\n                  validate={validators.required as FF.FieldValidator<any>}\n                  placeholder=\"Enter role ARN\"\n                  label=\"ARN\"\n                  fullWidth\n                  margin=\"normal\"\n                  errors={{\n                    required: 'Enter an ARN',\n                  }}\n                />\n              )}\n\n              {submitFailed && (\n                <Form.FormError\n                  error={error || submitError}\n                  errors={{\n                    unexpected: 'Something went wrong',\n                  }}\n                />\n              )}\n              <input type=\"submit\" style={{ display: 'none' }} />\n            </form>\n          </M.DialogContent>\n          <M.DialogActions>\n            <M.Button\n              onClick={() => close('cancel')}\n              color=\"primary\"\n              disabled={submitting}\n            >\n              Cancel\n            </M.Button>\n            <M.Button\n              onClick={handleSubmit}\n              color=\"primary\"\n              disabled={pristine || submitting || (submitFailed && hasValidationErrors)}\n            >\n              Save\n            </M.Button>\n          </M.DialogActions>\n          {submitting && (\n            <div className={classes.lock}>\n              <M.CircularProgress size={80} />\n            </div>\n          )}\n        </>\n      )}\n    </RF.Form>\n  )\n}\n\ninterface SettingsMenuProps {\n  role: Role\n  openDialog: (render: (props: DialogsOpenProps) => JSX.Element, props?: $TSFixMe) => void\n}\n\nfunction SettingsMenu({ role, openDialog }: SettingsMenuProps) {\n  const openDeleteDialog = React.useCallback(() => {\n    openDialog(({ close }) => <Delete {...{ role, close }} />)\n  }, [openDialog, role])\n\n  const openSetDefaultDialog = React.useCallback(() => {\n    openDialog(({ close }) => <SetDefault {...{ role, close }} />)\n  }, [openDialog, role])\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      setAnchorEl(event.currentTarget)\n    },\n    [setAnchorEl],\n  )\n\n  const handleClose = React.useCallback(() => {\n    setAnchorEl(null)\n  }, [setAnchorEl])\n\n  const handleMakeDefault = React.useCallback(() => {\n    handleClose()\n    openSetDefaultDialog()\n  }, [handleClose, openSetDefaultDialog])\n\n  const handleDelete = React.useCallback(() => {\n    handleClose()\n    openDeleteDialog()\n  }, [handleClose, openDeleteDialog])\n\n  return (\n    <>\n      <M.Tooltip title=\"Settings\">\n        <M.IconButton aria-label=\"Settings\" onClick={handleClick}>\n          <M.Icon>more_vert</M.Icon>\n        </M.IconButton>\n      </M.Tooltip>\n      <M.Menu anchorEl={anchorEl} keepMounted open={!!anchorEl} onClose={handleClose}>\n        <M.MenuItem onClick={handleMakeDefault}>Set as default</M.MenuItem>\n        <M.MenuItem onClick={handleDelete}>Delete</M.MenuItem>\n      </M.Menu>\n    </>\n  )\n}\n\n// XXX: move to dialogs module\ninterface DialogsOpenProps {\n  close: (reason?: string) => void\n}\n\nexport default function Roles() {\n  const [{ data }] = urql.useQuery({ query: ROLES_QUERY })\n  const rows = data!.roles\n  const defaultRoleId = data!.defaultRole?.id\n\n  const ordering = Table.useOrdering({ rows, column: columns[0] })\n  const dialogs = Dialogs.use()\n\n  const toolbarActions = [\n    {\n      title: 'Create',\n      icon: <M.Icon>add</M.Icon>,\n      fn: React.useCallback(() => {\n        dialogs.open(({ close }: DialogsOpenProps) => <Create {...{ close }} />)\n      }, [dialogs.open]), // eslint-disable-line react-hooks/exhaustive-deps\n    },\n  ]\n\n  const inlineActions = (role: Role) => [\n    role.arn\n      ? {\n          title: 'Open AWS Console',\n          icon: <M.Icon>launch</M.Icon>,\n          href: getArnLink(role.arn),\n        }\n      : null,\n    {\n      title: 'Edit',\n      icon: <M.Icon>edit</M.Icon>,\n      fn: () => {\n        dialogs.open(({ close }: DialogsOpenProps) => (\n          <Edit\n            {...{\n              role,\n              close,\n            }}\n          />\n        ))\n      },\n    },\n  ]\n\n  return (\n    <React.Suspense\n      fallback={\n        <M.Paper>\n          <Table.Toolbar heading=\"Roles\" />\n          <Table.Progress />\n        </M.Paper>\n      }\n    >\n      <M.Paper>\n        {dialogs.render({ fullWidth: true, maxWidth: 'sm' })}\n        <Table.Toolbar heading=\"Roles\" actions={toolbarActions} />\n        <Table.Wrapper>\n          <M.Table>\n            <Table.Head columns={columns} ordering={ordering} withInlineActions />\n            <M.TableBody>\n              {ordering.ordered.map((i: Role) => (\n                <M.TableRow hover key={i.id}>\n                  {columns.map((col) => (\n                    // @ts-expect-error\n                    <M.TableCell key={col.id} {...col.props}>\n                      {/* @ts-expect-error */}\n                      {(col.getDisplay || R.identity)(col.getValue(i), i, {\n                        defaultRoleId,\n                      })}\n                    </M.TableCell>\n                  ))}\n                  <M.TableCell align=\"right\" padding=\"none\">\n                    <Table.InlineActions actions={inlineActions(i)}>\n                      {/* @ts-expect-error */}\n                      <SettingsMenu role={i} openDialog={dialogs.open} />\n                    </Table.InlineActions>\n                  </M.TableCell>\n                </M.TableRow>\n              ))}\n            </M.TableBody>\n          </M.Table>\n        </Table.Wrapper>\n      </M.Paper>\n    </React.Suspense>\n  )\n}\n","import * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nimport useQuery from 'utils/useQuery'\n\nimport { MAX_POLICIES_PER_ROLE } from './shared'\n\nimport ROLES_QUERY from './gql/Roles.generated'\nimport { RoleSelection_ManagedRole_Fragment as ManagedRole } from './gql/RoleSelection.generated'\n\ninterface RoleSelectionDialogProps {\n  open: boolean\n  onClose: () => void\n  roles: ManagedRole[]\n  attachRoles: (roles: ManagedRole[]) => void\n}\n\nfunction RoleSelectionDialog({\n  open,\n  onClose,\n  roles,\n  attachRoles,\n}: RoleSelectionDialogProps) {\n  const [selected, setSelected] = React.useState<ManagedRole[]>([])\n  const [committed, setCommitted] = React.useState(false)\n\n  const handleExited = React.useCallback(() => {\n    if (committed) attachRoles(selected)\n    setCommitted(false)\n    setSelected([])\n  }, [attachRoles, committed, selected, setCommitted, setSelected])\n\n  const handleAttach = React.useCallback(() => {\n    setCommitted(true)\n    onClose()\n  }, [onClose, setCommitted])\n\n  const toggle = React.useCallback(\n    (role: ManagedRole) => {\n      setSelected((value) =>\n        value.includes(role) ? value.filter((r) => r.id !== role.id) : value.concat(role),\n      )\n    },\n    [setSelected],\n  )\n\n  return (\n    <M.Dialog maxWidth=\"xs\" open={open} onClose={onClose} onExited={handleExited}>\n      <M.DialogTitle>Attach policy to roles</M.DialogTitle>\n      <M.DialogContent dividers>\n        {roles.length ? (\n          roles.map((role) => (\n            <M.FormControlLabel\n              key={role.id}\n              style={{ display: 'flex', marginRight: 0 }}\n              disabled={role.policies.length >= MAX_POLICIES_PER_ROLE}\n              control={\n                <M.Checkbox\n                  checked={selected.includes(role)}\n                  onChange={() => toggle(role)}\n                  color=\"primary\"\n                />\n              }\n              label={\n                <>\n                  {role.name}{' '}\n                  <M.Box component=\"span\" color=\"text.secondary\">\n                    ({role.policies.length} / {MAX_POLICIES_PER_ROLE} policies)\n                  </M.Box>\n                </>\n              }\n            />\n          ))\n        ) : (\n          <M.Typography>No more roles to attach this policy to</M.Typography>\n        )}\n      </M.DialogContent>\n      <M.DialogActions>\n        <M.Button autoFocus onClick={onClose} color=\"primary\">\n          Cancel\n        </M.Button>\n        <M.Button onClick={handleAttach} disabled={!selected.length} color=\"primary\">\n          Attach\n        </M.Button>\n      </M.DialogActions>\n    </M.Dialog>\n  )\n}\n\ninterface AssociatedRolesProps extends RF.FieldRenderProps<ManagedRole[]> {\n  className?: string\n}\n\nexport default function AssociatedRoles({\n  className,\n  input: { value, onChange },\n  meta,\n}: AssociatedRolesProps) {\n  const error =\n    meta.submitFailed && (meta.error || (!meta.dirtySinceLastSubmit && meta.submitError))\n\n  const rolesData = useQuery({ query: ROLES_QUERY })\n\n  const [roleSelectionOpen, setRoleSelectionOpen] = React.useState(false)\n\n  const openRoleSelection = React.useCallback(() => {\n    setRoleSelectionOpen(true)\n  }, [setRoleSelectionOpen])\n\n  const closeRoleSelection = React.useCallback(() => {\n    setRoleSelectionOpen(false)\n  }, [setRoleSelectionOpen])\n\n  const attachRoles = React.useCallback(\n    (roles: ManagedRole[]) => {\n      onChange(value.concat(roles))\n    },\n    [onChange, value],\n  )\n\n  const detachRole = (role: ManagedRole) => {\n    onChange(value.filter((r) => r.id !== role.id))\n  }\n\n  const availableRoles = React.useMemo(\n    () =>\n      rolesData.case({\n        fetching: () => null,\n        error: () => null,\n        data: ({ roles }) => {\n          const ids = value.reduce(\n            (acc, { id }) => ({ ...acc, [id]: true }),\n            {} as Record<string, boolean>,\n          )\n          return roles.filter(\n            (r) => r.__typename === 'ManagedRole' && !ids[r.id],\n          ) as ManagedRole[]\n        },\n      }),\n    [rolesData, value],\n  )\n\n  return (\n    <div className={className}>\n      <M.Box display=\"flex\" alignItems=\"center\">\n        <M.Typography variant=\"h6\">Associated roles</M.Typography>\n        {rolesData.case({\n          data: () => null,\n          fetching: () => (\n            <M.Tooltip arrow title=\"Fetching roles\">\n              <M.CircularProgress size={20} style={{ opacity: 0.3, marginLeft: '8px' }} />\n            </M.Tooltip>\n          ),\n          error: (e) => (\n            <M.Tooltip arrow title={<>Error fetching roles: {e.message}</>}>\n              <M.Icon style={{ opacity: 0.3, marginLeft: '8px' }}>error</M.Icon>\n            </M.Tooltip>\n          ),\n        })}\n      </M.Box>\n      <M.Collapse in={!!error}>\n        <M.FormHelperText error>{error || ' '}</M.FormHelperText>\n      </M.Collapse>\n\n      <M.List dense disablePadding>\n        {value.map((role) => (\n          // XXX: sort?\n          // XXX: navigate to role on click?\n          <M.ListItem key={role.id} divider disableGutters>\n            <M.ListItemText>{role.name}</M.ListItemText>\n            <M.ListItemSecondaryAction style={{ right: 0 }}>\n              <M.Tooltip title=\"Detach current policy from this role\">\n                <M.IconButton onClick={() => detachRole(role)} edge=\"end\" size=\"small\">\n                  <M.Icon fontSize=\"small\">clear</M.Icon>\n                </M.IconButton>\n              </M.Tooltip>\n            </M.ListItemSecondaryAction>\n          </M.ListItem>\n        ))}\n        {!!availableRoles?.length && (\n          <M.ListItem button disableGutters onClick={openRoleSelection}>\n            <M.ListItemText>\n              {!value.length && <>No associated roles. </>}\n              Attach current policy to roles&hellip;\n            </M.ListItemText>\n          </M.ListItem>\n        )}\n      </M.List>\n      {availableRoles && (\n        <RoleSelectionDialog\n          roles={availableRoles}\n          open={roleSelectionOpen}\n          onClose={closeRoleSelection}\n          attachRoles={attachRoles}\n        />\n      )}\n    </div>\n  )\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component – normally `Avatar`.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_BucketsQueryVariables = Types.Exact<{\n  [key: string]: never\n}>\n\nexport type containers_Admin_RolesAndPolicies_gql_BucketsQuery = {\n  readonly __typename: 'Query'\n} & {\n  readonly buckets: ReadonlyArray<\n    { readonly __typename: 'BucketConfig' } & Pick<\n      Types.BucketConfig,\n      'name' | 'title' | 'iconUrl'\n    >\n  >\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_BucketsDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'containers_Admin_RolesAndPolicies_gql_Buckets' },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'buckets' },\n            name: { kind: 'Name', value: 'bucketConfigs' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'title' } },\n                { kind: 'Field', name: { kind: 'Name', value: 'iconUrl' } },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_BucketsQuery,\n  containers_Admin_RolesAndPolicies_gql_BucketsQueryVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_BucketsDocument as default }\n","import * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nimport defaultBucketIcon from 'components/BucketIcon/bucket.svg'\nimport * as Model from 'model'\nimport StyledLink from 'utils/StyledLink'\nimport useQuery from 'utils/useQuery'\n\nimport BUCKETS_QUERY from './gql/Buckets.generated'\nimport { BucketPermissionSelectionFragment as BucketPermission } from './gql/BucketPermissionSelection.generated'\n\nconst Level = Model.GQLTypes.BucketPermissionLevel\n// eslint-disable-next-line @typescript-eslint/no-redeclare\ntype Level = Model.GQLTypes.BucketPermissionLevel\n\ntype Bucket = BucketPermission['bucket']\n\ninterface BucketAddDialogProps {\n  open: boolean\n  onClose: () => void\n  buckets: Bucket[]\n  addBucket: (bucket: Bucket) => void\n}\n\nfunction BucketAddDialog({ open, onClose, buckets, addBucket }: BucketAddDialogProps) {\n  const [selected, select] = React.useState<Bucket | null>(null)\n\n  const handleExited = React.useCallback(() => {\n    if (selected) addBucket(selected)\n    select(null)\n  }, [addBucket, selected, select])\n\n  const handleAdd = React.useCallback(\n    (bucket: Bucket) => {\n      select(bucket)\n      onClose()\n    },\n    [onClose, select],\n  )\n\n  return (\n    <M.Dialog maxWidth=\"xs\" open={open} onClose={onClose} onExited={handleExited}>\n      <M.DialogTitle>Add a bucket</M.DialogTitle>\n      {buckets.length ? (\n        <M.List>\n          {buckets.map((bucket) => (\n            <M.ListItem key={bucket.name} button onClick={() => handleAdd(bucket)}>\n              <M.ListItemAvatar style={{ minWidth: 44 }}>\n                <M.Avatar\n                  style={{ width: 32, height: 32 }}\n                  src={bucket.iconUrl || defaultBucketIcon}\n                />\n              </M.ListItemAvatar>\n              <M.ListItemText>\n                s3://{bucket.name}{' '}\n                <M.Box component=\"span\" color=\"text.secondary\" ml={0.5}>\n                  {bucket.title}\n                </M.Box>\n              </M.ListItemText>\n            </M.ListItem>\n          ))}\n        </M.List>\n      ) : (\n        <M.DialogContent>\n          <M.Typography>No more buckets to add</M.Typography>\n        </M.DialogContent>\n      )}\n      <M.DialogActions>\n        <M.Button autoFocus onClick={onClose} color=\"primary\">\n          Cancel\n        </M.Button>\n      </M.DialogActions>\n    </M.Dialog>\n  )\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  heading: {\n    alignItems: 'center',\n    display: 'flex',\n  },\n  icon: {\n    marginLeft: t.spacing(0.5),\n  },\n}))\n\ninterface BucketPermissionsProps extends RF.FieldRenderProps<BucketPermission[]> {\n  className?: string\n  errors: Record<string, string>\n  onAdvanced?: () => void\n}\n\nexport default function BucketsPermissions({\n  className,\n  input: { value, onChange },\n  meta,\n  errors,\n  onAdvanced,\n}: BucketPermissionsProps) {\n  const classes = useStyles()\n\n  const error =\n    meta.submitFailed && (meta.error || (!meta.dirtySinceLastSubmit && meta.submitError))\n\n  const bucketsData = useQuery({ query: BUCKETS_QUERY })\n\n  const [permissionMenuState, setPermissionMenuState] = React.useState<{\n    anchorEl: HTMLElement\n    perm: BucketPermission\n  } | null>(null)\n\n  const openPermissionMenu = (\n    event: React.MouseEvent<HTMLElement>,\n    perm: BucketPermission,\n  ) => {\n    setPermissionMenuState({ anchorEl: event.currentTarget, perm })\n  }\n\n  const closePermissionMenu = () => {\n    setPermissionMenuState(null)\n  }\n\n  const setBucketPermission = (level: Level | null) => () => {\n    const { bucket } = permissionMenuState?.perm ?? {}\n    if (bucket) {\n      onChange(\n        level\n          ? value.map((perm) =>\n              perm.bucket.name === bucket.name ? { ...perm, bucket, level } : perm,\n            )\n          : value.filter((perm) => perm.bucket.name !== bucket.name),\n      )\n    }\n    closePermissionMenu()\n  }\n\n  const [bucketAdditionOpen, setBucketAdditionOpen] = React.useState(false)\n\n  const openBucketAddition = React.useCallback(() => {\n    setBucketAdditionOpen(true)\n  }, [setBucketAdditionOpen])\n\n  const closeBucketAddition = React.useCallback(() => {\n    setBucketAdditionOpen(false)\n  }, [setBucketAdditionOpen])\n\n  const addBucket = React.useCallback(\n    (bucket: Bucket) => {\n      onChange(\n        value.concat({ __typename: 'PolicyBucketPermission', bucket, level: Level.READ }),\n      )\n    },\n    [onChange, value],\n  )\n\n  const availableBuckets = React.useMemo(\n    () =>\n      bucketsData.case({\n        fetching: () => null,\n        error: () => null,\n        data: ({ buckets }) => {\n          const names = value.reduce(\n            (acc, { bucket: { name } }) => ({ ...acc, [name]: true }),\n            {} as Record<string, boolean>,\n          )\n          return buckets.filter((b) => !names[b.name])\n        },\n      }),\n    [bucketsData, value],\n  )\n\n  return (\n    <div className={className}>\n      <div className={classes.heading}>\n        <M.Typography variant=\"h6\">Bucket access</M.Typography>\n        <M.Tooltip\n          arrow\n          title={\n            <>\n              Admin users can see all the buckets, but can only access the contents of the\n              buckets according to their assigned role (policies). Regular users can only\n              see the buckets configured in their assigned role (policies).\n            </>\n          }\n        >\n          <M.Icon fontSize=\"small\" color=\"disabled\" className={classes.icon}>\n            info_outlined\n          </M.Icon>\n        </M.Tooltip>\n        {bucketsData.case({\n          data: () => null,\n          fetching: () => (\n            <M.Tooltip arrow title=\"Fetching buckets\">\n              <M.CircularProgress\n                size={20}\n                style={{ opacity: 0.3 }}\n                className={classes.icon}\n              />\n            </M.Tooltip>\n          ),\n          error: (e) => (\n            <M.Tooltip arrow title={<>Error fetching buckets: {e.message}</>}>\n              <M.Icon fontSize=\"small\" color=\"disabled\" className={classes.icon}>\n                error\n              </M.Icon>\n            </M.Tooltip>\n          ),\n        })}\n      </div>\n      {!!onAdvanced && (\n        <M.FormHelperText>\n          Manage access using per-bucket permissions or{' '}\n          <StyledLink onClick={onAdvanced}>set existing policy via ARN</StyledLink>\n        </M.FormHelperText>\n      )}\n      <M.Collapse in={!!error}>\n        <M.FormHelperText error>{error ? errors[error] || error : ' '}</M.FormHelperText>\n      </M.Collapse>\n\n      <M.List dense disablePadding>\n        {value.map((perm) => (\n          // XXX: navigate to bucket on click?\n          <M.ListItem\n            key={perm.bucket.name}\n            disableGutters\n            button\n            onClick={(event) => openPermissionMenu(event, perm)}\n          >\n            <M.ListItemAvatar style={{ minWidth: 44 }}>\n              <M.Avatar\n                style={{ width: 32, height: 32 }}\n                src={perm.bucket.iconUrl || defaultBucketIcon}\n              />\n            </M.ListItemAvatar>\n            <M.ListItemText\n              primary={\n                <>\n                  s3://{perm.bucket.name}{' '}\n                  <M.Box component=\"span\" color=\"text.secondary\" ml={0.5}>\n                    {perm.bucket.title}\n                  </M.Box>\n                </>\n              }\n            />\n            <M.ListItemSecondaryAction style={{ right: 0 }}>\n              <M.Tooltip\n                title={`Read-${perm.level === Level.READ ? 'only' : 'write'} access`}\n              >\n                <M.IconButton\n                  onClick={(event) => openPermissionMenu(event, perm)}\n                  edge=\"end\"\n                  size=\"small\"\n                >\n                  <M.Icon>{perm.level === Level.READ ? 'visibility' : 'edit'}</M.Icon>\n                </M.IconButton>\n              </M.Tooltip>\n            </M.ListItemSecondaryAction>\n          </M.ListItem>\n        ))}\n        {!!availableBuckets?.length && (\n          <M.ListItem button disableGutters onClick={openBucketAddition}>\n            <M.ListItemAvatar style={{ minWidth: 44 }}>\n              <M.Avatar style={{ width: 32, height: 32 }}>\n                <M.Icon>add</M.Icon>\n              </M.Avatar>\n            </M.ListItemAvatar>\n            <M.ListItemText>\n              {!value.length && <>No buckets selected. </>}\n              Add a bucket&hellip;\n            </M.ListItemText>\n          </M.ListItem>\n        )}\n      </M.List>\n\n      {availableBuckets && (\n        <BucketAddDialog\n          buckets={availableBuckets}\n          open={bucketAdditionOpen}\n          onClose={closeBucketAddition}\n          addBucket={addBucket}\n        />\n      )}\n\n      <M.Menu\n        anchorEl={permissionMenuState?.anchorEl}\n        keepMounted\n        open={!!permissionMenuState?.anchorEl}\n        onClose={closePermissionMenu}\n      >\n        <M.MenuItem\n          onClick={setBucketPermission(Level.READ)}\n          selected={permissionMenuState?.perm.level === Level.READ}\n        >\n          <M.Icon>visibility</M.Icon>&nbsp;&nbsp;Read-only access\n        </M.MenuItem>\n        <M.MenuItem\n          onClick={setBucketPermission(Level.READ_WRITE)}\n          selected={permissionMenuState?.perm.level === Level.READ_WRITE}\n        >\n          <M.Icon>edit</M.Icon>&nbsp;&nbsp;Read-write access\n        </M.MenuItem>\n        <M.MenuItem onClick={setBucketPermission(null)}>\n          <M.Icon>clear</M.Icon>&nbsp;&nbsp;No access\n        </M.MenuItem>\n      </M.Menu>\n    </div>\n  )\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  PolicySelectionFragment,\n  PolicySelectionFragmentDoc,\n} from './PolicySelection.generated'\n\nexport type PolicyResultSelection_Policy_Fragment = {\n  readonly __typename: 'Policy'\n} & PolicySelectionFragment\n\nexport type PolicyResultSelection_InvalidInput_Fragment = {\n  readonly __typename: 'InvalidInput'\n} & {\n  readonly errors: ReadonlyArray<\n    { readonly __typename: 'InputError' } & Pick<Types.InputError, 'path' | 'message'>\n  >\n}\n\nexport type PolicyResultSelection_OperationError_Fragment = {\n  readonly __typename: 'OperationError'\n} & Pick<Types.OperationError, 'message'>\n\nexport type PolicyResultSelectionFragment =\n  | PolicyResultSelection_Policy_Fragment\n  | PolicyResultSelection_InvalidInput_Fragment\n  | PolicyResultSelection_OperationError_Fragment\n\nexport const PolicyResultSelectionFragmentDoc = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'FragmentDefinition',\n      name: { kind: 'Name', value: 'PolicyResultSelection' },\n      typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'PolicyResult' } },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n          {\n            kind: 'InlineFragment',\n            typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Policy' } },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'PolicySelection' },\n                },\n              ],\n            },\n          },\n          {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'InvalidInput' },\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'Field',\n                  name: { kind: 'Name', value: 'errors' },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'path' } },\n                      { kind: 'Field', name: { kind: 'Name', value: 'message' } },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n          {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'OperationError' },\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [{ kind: 'Field', name: { kind: 'Name', value: 'message' } }],\n            },\n          },\n        ],\n      },\n    },\n    ...PolicySelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<PolicyResultSelectionFragment, unknown>\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  PolicyResultSelection_Policy_Fragment,\n  PolicyResultSelection_InvalidInput_Fragment,\n  PolicyResultSelection_OperationError_Fragment,\n  PolicyResultSelectionFragmentDoc,\n} from './PolicyResultSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyCreateManagedMutationVariables =\n  Types.Exact<{\n    input: Types.ManagedPolicyInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyCreateManagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly policyCreate:\n    | ({ readonly __typename: 'Policy' } & PolicyResultSelection_Policy_Fragment)\n    | ({\n        readonly __typename: 'InvalidInput'\n      } & PolicyResultSelection_InvalidInput_Fragment)\n    | ({\n        readonly __typename: 'OperationError'\n      } & PolicyResultSelection_OperationError_Fragment)\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_PolicyCreateManagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_PolicyCreateManaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'ManagedPolicyInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'policyCreate' },\n            name: { kind: 'Name', value: 'policyCreateManaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'PolicyResultSelection' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...PolicyResultSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_PolicyCreateManagedMutation,\n  containers_Admin_RolesAndPolicies_gql_PolicyCreateManagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_PolicyCreateManagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  PolicyResultSelection_Policy_Fragment,\n  PolicyResultSelection_InvalidInput_Fragment,\n  PolicyResultSelection_OperationError_Fragment,\n  PolicyResultSelectionFragmentDoc,\n} from './PolicyResultSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanagedMutationVariables =\n  Types.Exact<{\n    input: Types.UnmanagedPolicyInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly policyCreate:\n    | ({ readonly __typename: 'Policy' } & PolicyResultSelection_Policy_Fragment)\n    | ({\n        readonly __typename: 'InvalidInput'\n      } & PolicyResultSelection_InvalidInput_Fragment)\n    | ({\n        readonly __typename: 'OperationError'\n      } & PolicyResultSelection_OperationError_Fragment)\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'UnmanagedPolicyInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'policyCreate' },\n            name: { kind: 'Name', value: 'policyCreateUnmanaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'PolicyResultSelection' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...PolicyResultSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanagedMutation,\n  containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  PolicyResultSelection_Policy_Fragment,\n  PolicyResultSelection_InvalidInput_Fragment,\n  PolicyResultSelection_OperationError_Fragment,\n  PolicyResultSelectionFragmentDoc,\n} from './PolicyResultSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyUpdateManagedMutationVariables =\n  Types.Exact<{\n    id: Types.Scalars['ID']\n    input: Types.ManagedPolicyInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyUpdateManagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly policyUpdate:\n    | ({ readonly __typename: 'Policy' } & PolicyResultSelection_Policy_Fragment)\n    | ({\n        readonly __typename: 'InvalidInput'\n      } & PolicyResultSelection_InvalidInput_Fragment)\n    | ({\n        readonly __typename: 'OperationError'\n      } & PolicyResultSelection_OperationError_Fragment)\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_PolicyUpdateManagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_PolicyUpdateManaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'ManagedPolicyInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'policyUpdate' },\n            name: { kind: 'Name', value: 'policyUpdateManaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'id' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n              },\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'PolicyResultSelection' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...PolicyResultSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_PolicyUpdateManagedMutation,\n  containers_Admin_RolesAndPolicies_gql_PolicyUpdateManagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_PolicyUpdateManagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nimport {\n  PolicyResultSelection_Policy_Fragment,\n  PolicyResultSelection_InvalidInput_Fragment,\n  PolicyResultSelection_OperationError_Fragment,\n  PolicyResultSelectionFragmentDoc,\n} from './PolicyResultSelection.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanagedMutationVariables =\n  Types.Exact<{\n    id: Types.Scalars['ID']\n    input: Types.UnmanagedPolicyInput\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanagedMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly policyUpdate:\n    | ({ readonly __typename: 'Policy' } & PolicyResultSelection_Policy_Fragment)\n    | ({\n        readonly __typename: 'InvalidInput'\n      } & PolicyResultSelection_InvalidInput_Fragment)\n    | ({\n        readonly __typename: 'OperationError'\n      } & PolicyResultSelection_OperationError_Fragment)\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanagedDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: {\n        kind: 'Name',\n        value: 'containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanaged',\n      },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },\n          },\n        },\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n          type: {\n            kind: 'NonNullType',\n            type: {\n              kind: 'NamedType',\n              name: { kind: 'Name', value: 'UnmanagedPolicyInput' },\n            },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: { kind: 'Name', value: 'policyUpdate' },\n            name: { kind: 'Name', value: 'policyUpdateUnmanaged' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'id' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n              },\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'input' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'input' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'FragmentSpread',\n                  name: { kind: 'Name', value: 'PolicyResultSelection' },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n    ...PolicyResultSelectionFragmentDoc.definitions,\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanagedMutation,\n  containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanagedMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanagedDocument as default }\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyDeleteMutationVariables =\n  Types.Exact<{\n    id: Types.Scalars['ID']\n  }>\n\nexport type containers_Admin_RolesAndPolicies_gql_PolicyDeleteMutation = {\n  readonly __typename: 'Mutation'\n} & {\n  readonly policyDelete:\n    | { readonly __typename: 'Ok' }\n    | ({ readonly __typename: 'InvalidInput' } & {\n        readonly errors: ReadonlyArray<\n          { readonly __typename: 'InputError' } & Pick<\n            Types.InputError,\n            'path' | 'message'\n          >\n        >\n      })\n    | ({ readonly __typename: 'OperationError' } & Pick<Types.OperationError, 'message'>)\n}\n\nexport const containers_Admin_RolesAndPolicies_gql_PolicyDeleteDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'mutation',\n      name: { kind: 'Name', value: 'containers_Admin_RolesAndPolicies_gql_PolicyDelete' },\n      variableDefinitions: [\n        {\n          kind: 'VariableDefinition',\n          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n          type: {\n            kind: 'NonNullType',\n            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },\n          },\n        },\n      ],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'policyDelete' },\n            arguments: [\n              {\n                kind: 'Argument',\n                name: { kind: 'Name', value: 'id' },\n                value: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n              },\n            ],\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'InvalidInput' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      {\n                        kind: 'Field',\n                        name: { kind: 'Name', value: 'errors' },\n                        selectionSet: {\n                          kind: 'SelectionSet',\n                          selections: [\n                            { kind: 'Field', name: { kind: 'Name', value: 'path' } },\n                            { kind: 'Field', name: { kind: 'Name', value: 'message' } },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'OperationError' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'message' } },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_RolesAndPolicies_gql_PolicyDeleteMutation,\n  containers_Admin_RolesAndPolicies_gql_PolicyDeleteMutationVariables\n>\n\nexport { containers_Admin_RolesAndPolicies_gql_PolicyDeleteDocument as default }\n","import * as FF from 'final-form'\nimport * as IO from 'io-ts'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as urql from 'urql'\nimport * as M from '@material-ui/core'\n\nimport * as Notifications from 'containers/Notifications'\nimport * as Model from 'model'\nimport * as Dialogs from 'utils/Dialogs'\nimport type FormSpec from 'utils/FormSpec'\nimport assertNever from 'utils/assertNever'\nimport { mkFormError, mapInputErrors } from 'utils/formTools'\nimport * as Types from 'utils/types'\nimport validate, * as validators from 'utils/validators'\n\nimport * as Form from '../RFForm'\nimport * as Table from '../Table'\n\nimport AssociatedRoles from './AssociatedRoles'\nimport BucketsPermissions from './BucketsPermissions'\nimport { getArnLink } from './shared'\n\nimport POLICIES_QUERY from './gql/Policies.generated'\nimport POLICY_CREATE_MANAGED_MUTATION from './gql/PolicyCreateManaged.generated'\nimport POLICY_CREATE_UNMANAGED_MUTATION from './gql/PolicyCreateUnmanaged.generated'\nimport POLICY_UPDATE_MANAGED_MUTATION from './gql/PolicyUpdateManaged.generated'\nimport POLICY_UPDATE_UNMANAGED_MUTATION from './gql/PolicyUpdateUnmanaged.generated'\nimport POLICY_DELETE_MUTATION from './gql/PolicyDelete.generated'\nimport { BucketPermissionSelectionFragment as BucketPermission } from './gql/BucketPermissionSelection.generated'\nimport { PolicySelectionFragment as Policy } from './gql/PolicySelection.generated'\n\nconst validateNonEmptyString: FF.FieldValidator<any> = validate(\n  'nonEmptyString',\n  validators.matches(/\\S/),\n)\n\nconst columns = [\n  {\n    id: 'title',\n    label: 'Title',\n    getValue: R.prop('title'),\n    props: { component: 'th', scope: 'row' },\n  },\n  {\n    id: 'source',\n    label: 'Source',\n    getValue: (p: Policy) => p.managed,\n    getDisplay: (value: boolean) =>\n      value ? (\n        <abbr title=\"This IAM policy is created and managed by Quilt\">Quilt</abbr>\n      ) : (\n        <abbr title=\"This IAM policy is provided and managed by you or another administrator\">\n          Custom\n        </abbr>\n      ),\n  },\n  {\n    id: 'buckets',\n    label: 'Buckets',\n    getValue: (p: Policy) => (p.managed ? p.permissions.length : null),\n    getDisplay: (_buckets: any, p: Policy) =>\n      p.managed ? (\n        <M.Tooltip\n          arrow\n          title={\n            p.permissions.length ? (\n              <M.Box component=\"ul\" pl={1} m={0.5}>\n                {p.permissions.map((pp) => (\n                  <li key={pp.bucket.name}>\n                    {pp.bucket.name} ({pp.level})\n                  </li>\n                ))}\n              </M.Box>\n            ) : (\n              ''\n            )\n          }\n        >\n          <span>{p.permissions.length}</span>\n        </M.Tooltip>\n      ) : (\n        'N/A'\n      ),\n  },\n  {\n    id: 'roles',\n    label: 'Associated roles',\n    getValue: (p: Policy) => (p.managed ? p.roles.length : null),\n    getDisplay: (_roles: any, p: Policy) => (\n      <M.Tooltip\n        arrow\n        title={\n          p.roles.length ? (\n            <M.Box component=\"ul\" pl={1} m={0.5}>\n              {p.roles.map((r) => (\n                <li key={r.id}>{r.name}</li>\n              ))}\n            </M.Box>\n          ) : (\n            ''\n          )\n        }\n      >\n        <span>{p.roles.length}</span>\n      </M.Tooltip>\n    ),\n  },\n]\n\nconst INITIAL_VALUES = { permissions: [], roles: [] }\n\nconst useStyles = M.makeStyles((t) => ({\n  lock: {\n    alignItems: 'center',\n    background: 'rgba(255,255,255,0.9)',\n    bottom: 52,\n    cursor: 'not-allowed',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 64,\n    zIndex: 3, // above Select, Checkbox and sticky table header\n  },\n  title: {\n    '&>*': {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    },\n  },\n  panel: {\n    marginTop: t.spacing(2),\n  },\n}))\n\ninterface CreateProps {\n  close: (reason?: string) => void\n}\n\nfunction Create({ close }: CreateProps) {\n  const classes = useStyles()\n\n  const [, createManaged] = urql.useMutation(POLICY_CREATE_MANAGED_MUTATION)\n  const [, createUnmanaged] = urql.useMutation(POLICY_CREATE_UNMANAGED_MUTATION)\n\n  const { push } = Notifications.use()\n\n  const [managed, setManaged] = React.useState(true)\n\n  const onSubmit = React.useCallback(\n    async (values) => {\n      try {\n        let res\n        if (managed) {\n          const input = R.applySpec(managedPolicyFormSpec)(values)\n          res = await createManaged({ input })\n        } else {\n          const input = R.applySpec(unmanagedPolicyFormSpec)(values)\n          res = await createUnmanaged({ input })\n        }\n        if (res.error) throw res.error\n        if (!res.data) throw new Error('No data')\n        const r = res.data.policyCreate\n        switch (r.__typename) {\n          case 'Policy':\n            push(`Policy \"${r.title}\" created`)\n            close()\n            return undefined\n          case 'InvalidInput':\n            return mapInputErrors(r.errors, {\n              'input.arn': 'arn',\n              'input.roles': 'roles',\n              'input.title': 'title',\n            })\n          case 'OperationError':\n            return mkFormError(r.message)\n          default:\n            return assertNever(r)\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Error creating policy')\n        // eslint-disable-next-line no-console\n        console.error(e)\n        return mkFormError('unexpected')\n      }\n    },\n    [managed, createManaged, createUnmanaged, push, close],\n  )\n\n  return (\n    <RF.Form onSubmit={onSubmit} initialValues={INITIAL_VALUES}>\n      {({\n        handleSubmit,\n        submitting,\n        submitFailed,\n        error,\n        hasValidationErrors,\n        submitError,\n      }) => (\n        <>\n          <M.DialogTitle disableTypography>\n            <M.Typography variant=\"h5\">Create a policy</M.Typography>\n          </M.DialogTitle>\n          <M.DialogContent>\n            <form onSubmit={handleSubmit}>\n              <RF.Field\n                component={Form.Field}\n                name=\"title\"\n                validate={validators.composeAnd(\n                  validators.required,\n                  validateNonEmptyString,\n                )}\n                placeholder=\"Enter policy title\"\n                label=\"Title\"\n                fullWidth\n                margin=\"normal\"\n                errors={{\n                  required: 'Enter a policy title',\n                  nonEmptyString: 'Enter a non-empty policy title',\n                }}\n              />\n\n              <M.FormControlLabel\n                label=\"Manually set ARN instead of configuring per-bucket permissions\"\n                control={<M.Checkbox checked={!managed} />}\n                onChange={() => setManaged(!managed)}\n              />\n\n              <M.Collapse in={!managed}>\n                <RF.Field\n                  component={Form.Field}\n                  name=\"arn\"\n                  validate={\n                    managed ? undefined : (validators.required as FF.FieldValidator<any>)\n                  }\n                  // to re-trigger validation when \"managed\" state changes\n                  key={`${managed}`}\n                  placeholder=\"Enter policy ARN\"\n                  label=\"ARN\"\n                  fullWidth\n                  margin=\"normal\"\n                  errors={{\n                    required: 'Enter an ARN',\n                  }}\n                />\n              </M.Collapse>\n\n              <M.Collapse in={managed}>\n                <RF.Field\n                  className={classes.panel}\n                  component={BucketsPermissions}\n                  name=\"permissions\"\n                  fullWidth\n                  margin=\"normal\"\n                  onAdvanced={() => setManaged(false)}\n                />\n              </M.Collapse>\n\n              <RF.Field\n                className={classes.panel}\n                component={AssociatedRoles}\n                name=\"roles\"\n                fullWidth\n                margin=\"normal\"\n              />\n\n              {submitFailed && (\n                <Form.FormError\n                  error={error || submitError}\n                  errors={{\n                    unexpected: 'Something went wrong',\n                  }}\n                />\n              )}\n              <input type=\"submit\" style={{ display: 'none' }} />\n            </form>\n          </M.DialogContent>\n          <M.DialogActions>\n            <M.Button\n              onClick={() => close('cancel')}\n              color=\"primary\"\n              disabled={submitting}\n            >\n              Cancel\n            </M.Button>\n            <M.Button\n              onClick={handleSubmit}\n              color=\"primary\"\n              disabled={submitting || (submitFailed && hasValidationErrors)}\n            >\n              Create\n            </M.Button>\n          </M.DialogActions>\n          {submitting && (\n            <div className={classes.lock}>\n              <M.CircularProgress size={80} />\n            </div>\n          )}\n        </>\n      )}\n    </RF.Form>\n  )\n}\n\ninterface DeleteProps {\n  policy: Policy\n  close: (reason?: string) => void\n}\n\nfunction Delete({ policy, close }: DeleteProps) {\n  const { push } = Notifications.use()\n  const [, deletePolicy] = urql.useMutation(POLICY_DELETE_MUTATION)\n\n  const doDelete = React.useCallback(async () => {\n    close()\n    try {\n      const res = await deletePolicy({ id: policy.id })\n      if (res.error) throw res.error\n      if (!res.data) throw new Error('No data')\n      const r = res.data.policyDelete\n      switch (r.__typename) {\n        case 'Ok':\n          return\n        case 'InvalidInput':\n          // shouldnt happen\n          push(`Unable to delete policy \"${policy.title}\"`)\n          return\n        case 'OperationError':\n          push(`Unable to delete policy \"${policy.title}\": ${r.message}`)\n          return\n        default:\n          assertNever(r)\n      }\n    } catch (e) {\n      push(`Error deleting policy \"${policy.title}\"`)\n      // eslint-disable-next-line no-console\n      console.error('Error deleting policy')\n      // eslint-disable-next-line no-console\n      console.error(e)\n    }\n  }, [close, push, deletePolicy, policy.id, policy.title])\n\n  return (\n    <>\n      <M.DialogTitle>Delete a policy</M.DialogTitle>\n      <M.DialogContent>\n        You are about to delete the &quot;{policy.title}&quot; policy. This operation is\n        irreversible.\n      </M.DialogContent>\n      <M.DialogActions>\n        <M.Button onClick={() => close('cancel')} color=\"primary\">\n          Cancel\n        </M.Button>\n        <M.Button onClick={doDelete} color=\"primary\">\n          Delete\n        </M.Button>\n      </M.DialogActions>\n    </>\n  )\n}\n\nconst unmanagedPolicyFormSpec: FormSpec<Model.GQLTypes.UnmanagedPolicyInput> = {\n  title: R.pipe(\n    R.prop('title'),\n    Types.decode(IO.string),\n    R.trim,\n    Types.decode(Types.NonEmptyString),\n  ),\n  arn: R.pipe(\n    R.prop('arn'),\n    Types.decode(IO.string),\n    R.trim,\n    Types.decode(Types.NonEmptyString),\n  ),\n  roles: R.pipe(\n    R.prop('roles'),\n    Types.decode(IO.array(IO.type({ id: IO.string }))),\n    R.pluck('id'),\n    Types.decode(IO.readonlyArray(Types.NonEmptyString)),\n  ),\n}\n\n// XXX: can we use gql PermissionInput type?\nconst PermissionInput = IO.type(\n  {\n    bucket: IO.string,\n    level: Model.BucketPermissionLevel,\n  },\n  'PermissionInput',\n)\n\nconst managedPolicyFormSpec: FormSpec<Model.GQLTypes.ManagedPolicyInput> = {\n  title: R.pipe(\n    R.prop('title'),\n    Types.decode(IO.string),\n    R.trim,\n    Types.decode(Types.NonEmptyString),\n  ),\n  roles: R.pipe(\n    R.prop('roles'),\n    Types.decode(IO.array(IO.type({ id: IO.string }))),\n    R.pluck('id'),\n    Types.decode(IO.readonlyArray(Types.NonEmptyString)),\n  ),\n  permissions: R.pipe(\n    (values: Record<string, unknown>) =>\n      ((values.permissions || []) as BucketPermission[]).map((p) => ({\n        bucket: p.bucket.name,\n        level: p.level,\n      })),\n    Types.decode(IO.readonlyArray(PermissionInput)),\n  ),\n}\n\ninterface EditProps {\n  policy: Policy\n  close: (reason?: string) => void\n}\n\nfunction Edit({ policy, close }: EditProps) {\n  const [, updateManaged] = urql.useMutation(POLICY_UPDATE_MANAGED_MUTATION)\n  const [, updateUnmanaged] = urql.useMutation(POLICY_UPDATE_UNMANAGED_MUTATION)\n\n  const onSubmit = React.useCallback(\n    async (values) => {\n      try {\n        let res\n        if (policy.managed) {\n          const input = R.applySpec(managedPolicyFormSpec)(values)\n          res = await updateManaged({ input, id: policy.id })\n        } else {\n          const input = R.applySpec(unmanagedPolicyFormSpec)(values)\n          res = await updateUnmanaged({ input, id: policy.id })\n        }\n        if (res.error) throw res.error\n        if (!res.data) throw new Error('No data')\n        const r = res.data.policyUpdate\n        switch (r.__typename) {\n          case 'Policy':\n            close()\n            return undefined\n          case 'InvalidInput':\n            return mapInputErrors(r.errors, {\n              'input.arn': 'arn',\n              'input.roles': 'roles',\n              'input.title': 'title',\n            })\n          case 'OperationError':\n            return mkFormError(r.message)\n          default:\n            return assertNever(r)\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Error updating policy')\n        // eslint-disable-next-line no-console\n        console.error(e)\n        return mkFormError('unexpected')\n      }\n    },\n    [policy.id, policy.managed, updateManaged, updateUnmanaged, close],\n  )\n\n  const classes = useStyles()\n\n  const initialValues = React.useMemo(\n    () => ({\n      title: policy.title,\n      permissions: policy.permissions,\n      roles: policy.roles,\n      arn: policy.managed ? null : policy.arn,\n    }),\n    [policy],\n  )\n\n  const title = (\n    <>\n      Edit{' '}\n      {policy.managed ? (\n        <abbr title=\"This IAM policy is created and managed by Quilt\">Quilt</abbr>\n      ) : (\n        <abbr title=\"This IAM policy is provided and managed by you or another administrator\">\n          custom\n        </abbr>\n      )}{' '}\n      policy &quot;{policy.title}&quot;\n    </>\n  )\n\n  const titleStr = `Edit ${policy.managed ? 'Quilt' : 'custom'} policy \"${policy.title}\"`\n\n  return (\n    <RF.Form onSubmit={onSubmit} initialValues={initialValues}>\n      {({\n        handleSubmit,\n        submitting,\n        submitFailed,\n        error,\n        pristine,\n        hasValidationErrors,\n        submitError,\n      }) => (\n        <>\n          <M.DialogTitle className={classes.title} title={titleStr}>\n            {title}\n          </M.DialogTitle>\n          <M.DialogContent>\n            <form onSubmit={handleSubmit}>\n              <RF.Field\n                component={Form.Field}\n                name=\"title\"\n                validate={validators.composeAnd(\n                  validators.required,\n                  validateNonEmptyString,\n                )}\n                placeholder=\"Enter policy title\"\n                label=\"Title\"\n                fullWidth\n                margin=\"normal\"\n                errors={{\n                  required: 'Enter a policy title',\n                  nonEmptyString: 'Enter a non-empty policy title',\n                }}\n              />\n              {policy.managed ? (\n                <>\n                  <M.TextField\n                    value={policy.arn}\n                    label=\"ARN\"\n                    fullWidth\n                    margin=\"normal\"\n                    disabled\n                  />\n                  <RF.Field\n                    className={classes.panel}\n                    component={BucketsPermissions}\n                    name=\"permissions\"\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                </>\n              ) : (\n                <RF.Field\n                  component={Form.Field}\n                  name=\"arn\"\n                  validate={validators.required as FF.FieldValidator<any>}\n                  placeholder=\"Enter policy ARN\"\n                  label=\"ARN\"\n                  fullWidth\n                  margin=\"normal\"\n                  errors={{\n                    required: 'Enter an ARN',\n                  }}\n                />\n              )}\n\n              <RF.Field\n                className={classes.panel}\n                component={AssociatedRoles}\n                name=\"roles\"\n                fullWidth\n                margin=\"normal\"\n              />\n\n              {submitFailed && (\n                <Form.FormError\n                  error={error || submitError}\n                  errors={{\n                    unexpected: 'Something went wrong',\n                  }}\n                />\n              )}\n              <input type=\"submit\" style={{ display: 'none' }} />\n            </form>\n          </M.DialogContent>\n          <M.DialogActions>\n            <M.Button\n              onClick={() => close('cancel')}\n              color=\"primary\"\n              disabled={submitting}\n            >\n              Cancel\n            </M.Button>\n            <M.Button\n              onClick={handleSubmit}\n              color=\"primary\"\n              disabled={pristine || submitting || (submitFailed && hasValidationErrors)}\n            >\n              Save\n            </M.Button>\n          </M.DialogActions>\n          {submitting && (\n            <div className={classes.lock}>\n              <M.CircularProgress size={80} />\n            </div>\n          )}\n        </>\n      )}\n    </RF.Form>\n  )\n}\n\ninterface SettingsMenuProps {\n  policy: Policy\n  openDialog: (render: (props: DialogsOpenProps) => JSX.Element, props?: $TSFixMe) => void\n}\n\nfunction SettingsMenu({ policy, openDialog }: SettingsMenuProps) {\n  const openDeleteDialog = React.useCallback(() => {\n    openDialog(({ close }) => <Delete {...{ policy, close }} />)\n  }, [openDialog, policy])\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      setAnchorEl(event.currentTarget)\n    },\n    [setAnchorEl],\n  )\n\n  const handleClose = React.useCallback(() => {\n    setAnchorEl(null)\n  }, [setAnchorEl])\n\n  const handleDelete = React.useCallback(() => {\n    handleClose()\n    openDeleteDialog()\n  }, [handleClose, openDeleteDialog])\n\n  return (\n    <>\n      <M.Tooltip title=\"Settings\">\n        <M.IconButton aria-label=\"Settings\" onClick={handleClick}>\n          <M.Icon>more_vert</M.Icon>\n        </M.IconButton>\n      </M.Tooltip>\n      <M.Menu anchorEl={anchorEl} keepMounted open={!!anchorEl} onClose={handleClose}>\n        <M.MenuItem onClick={handleDelete}>Delete</M.MenuItem>\n      </M.Menu>\n    </>\n  )\n}\n\n// XXX: move to dialogs module\ninterface DialogsOpenProps {\n  close: (reason?: string) => void\n}\n\nexport default function Policies() {\n  const [{ data }] = urql.useQuery({ query: POLICIES_QUERY })\n  const rows = data!.policies\n\n  const ordering = Table.useOrdering({ rows, column: columns[0] })\n  const dialogs = Dialogs.use()\n\n  const toolbarActions = [\n    {\n      title: 'Create',\n      icon: <M.Icon>add</M.Icon>,\n      fn: React.useCallback(() => {\n        dialogs.open(({ close }: DialogsOpenProps) => <Create {...{ close }} />)\n      }, [dialogs.open]), // eslint-disable-line react-hooks/exhaustive-deps\n    },\n  ]\n\n  const inlineActions = (policy: Policy) => [\n    policy.arn\n      ? {\n          title: 'Open AWS Console',\n          icon: <M.Icon>launch</M.Icon>,\n          href: getArnLink(policy.arn),\n        }\n      : null,\n    {\n      title: 'Edit',\n      icon: <M.Icon>edit</M.Icon>,\n      fn: () => {\n        dialogs.open(({ close }: DialogsOpenProps) => (\n          <Edit\n            {...{\n              policy,\n              close,\n            }}\n          />\n        ))\n      },\n    },\n  ]\n\n  return (\n    <React.Suspense\n      fallback={\n        <M.Paper>\n          <Table.Toolbar heading=\"Policies\" />\n          <Table.Progress />\n        </M.Paper>\n      }\n    >\n      <M.Paper>\n        {dialogs.render({ fullWidth: true, maxWidth: 'sm' })}\n        <Table.Toolbar heading=\"Policies\" actions={toolbarActions} />\n        <Table.Wrapper>\n          <M.Table>\n            <Table.Head columns={columns} ordering={ordering} withInlineActions />\n            <M.TableBody>\n              {ordering.ordered.map((i: Policy) => (\n                <M.TableRow hover key={i.id}>\n                  {columns.map((col) => (\n                    // @ts-expect-error\n                    <M.TableCell key={col.id} {...col.props}>\n                      {(col.getDisplay || R.identity)(col.getValue(i), i)}\n                    </M.TableCell>\n                  ))}\n                  <M.TableCell align=\"right\" padding=\"none\">\n                    <Table.InlineActions actions={inlineActions(i)}>\n                      {/* @ts-expect-error */}\n                      <SettingsMenu policy={i} openDialog={dialogs.open} />\n                    </Table.InlineActions>\n                  </M.TableCell>\n                </M.TableRow>\n              ))}\n            </M.TableBody>\n          </M.Table>\n        </Table.Wrapper>\n      </M.Paper>\n    </React.Suspense>\n  )\n}\n","import * as R from 'ramda'\n\nimport * as Cache from 'utils/ResourceCache'\n\n// TODO: remove after migrating this data to gql\nexport const UsersResource = Cache.createResource({\n  name: 'Admin.data.users',\n  fetch: ({ req }) =>\n    req({ endpoint: `/users/list?_cachebust=${Math.random()}` }).then(\n      R.pipe(\n        R.prop('results'),\n        R.map((u) => ({\n          dateJoined: new Date(u.date_joined),\n          email: u.email,\n          isActive: u.is_active,\n          isAdmin: u.is_superuser,\n          lastLogin: new Date(u.last_login),\n          username: u.username,\n          roleId: u.role_id,\n        })),\n      ),\n    ),\n  key: () => null,\n})\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'\nimport * as Types from '../../../../model/graphql/types.generated'\n\nexport type containers_Admin_Users_gql_RolesQueryVariables = Types.Exact<{\n  [key: string]: never\n}>\n\nexport type containers_Admin_Users_gql_RolesQuery = { readonly __typename: 'Query' } & {\n  readonly roles: ReadonlyArray<\n    | ({ readonly __typename: 'UnmanagedRole' } & Pick<\n        Types.UnmanagedRole,\n        'id' | 'name'\n      >)\n    | ({ readonly __typename: 'ManagedRole' } & Pick<Types.ManagedRole, 'id' | 'name'>)\n  >\n  readonly defaultRole: Types.Maybe<\n    | ({ readonly __typename: 'UnmanagedRole' } & Pick<Types.UnmanagedRole, 'id'>)\n    | ({ readonly __typename: 'ManagedRole' } & Pick<Types.ManagedRole, 'id'>)\n  >\n}\n\nexport const containers_Admin_Users_gql_RolesDocument = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: { kind: 'Name', value: 'containers_Admin_Users_gql_Roles' },\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'roles' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'UnmanagedRole' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                    ],\n                  },\n                },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'ManagedRole' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },\n                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n          {\n            kind: 'Field',\n            name: { kind: 'Name', value: 'defaultRole' },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: [\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'UnmanagedRole' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }],\n                  },\n                },\n                {\n                  kind: 'InlineFragment',\n                  typeCondition: {\n                    kind: 'NamedType',\n                    name: { kind: 'Name', value: 'ManagedRole' },\n                  },\n                  selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<\n  containers_Admin_Users_gql_RolesQuery,\n  containers_Admin_Users_gql_RolesQueryVariables\n>\n\nexport { containers_Admin_Users_gql_RolesDocument as default }\n","import cx from 'classnames'\nimport * as FF from 'final-form'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as urql from 'urql'\nimport * as M from '@material-ui/core'\n\nimport * as Pagination from 'components/Pagination'\nimport * as Notifications from 'containers/Notifications'\nimport * as APIConnector from 'utils/APIConnector'\nimport * as Dialogs from 'utils/Dialogs'\nimport * as Cache from 'utils/ResourceCache'\nimport * as Format from 'utils/format'\nimport * as validators from 'utils/validators'\n\nimport * as Form from '../Form'\nimport * as Table from '../Table'\nimport * as data from '../data'\n\nimport ROLES_QUERY from './gql/Roles.generated'\n\nconst useMonoStyles = M.makeStyles((t) => ({\n  root: {\n    fontFamily: t.typography.monospace.fontFamily,\n  },\n}))\n\nfunction Mono({ className, children }) {\n  const classes = useMonoStyles()\n  return <span className={cx(className, classes.root)}>{children}</span>\n}\n\nconst useInviteStyles = M.makeStyles({\n  infoIcon: {\n    fontSize: '1.25em',\n    verticalAlign: '-3px',\n  },\n})\n\n// close: PT.func.isRequired,\n// roles: PT.array.isRequired,\nfunction Invite({ close, roles, defaultRoleId }) {\n  const classes = useInviteStyles()\n  const req = APIConnector.use()\n  const cache = Cache.use()\n  const { push } = Notifications.use()\n  const onSubmit = React.useCallback(\n    async ({ username, email, roleId }) => {\n      const role = roles.find((r) => r.id === roleId)\n\n      try {\n        await req({\n          endpoint: '/users/create',\n          method: 'POST',\n          body: JSON.stringify({ username, email }),\n        })\n\n        const user = {\n          dateJoined: new Date(),\n          email,\n          isActive: true,\n          isAdmin: false,\n          lastLogin: new Date(),\n          username,\n        }\n\n        try {\n          await req({\n            method: 'POST',\n            endpoint: '/users/set_role',\n            body: JSON.stringify({ username, role: role.name }),\n          })\n          user.roleId = role.id\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.error('Error setting role', { username, role })\n          // eslint-disable-next-line no-console\n          console.dir(e)\n        }\n\n        cache.patchOk(data.UsersResource, null, R.append(user))\n        push('User invited')\n        close()\n      } catch (e) {\n        if (APIConnector.HTTPError.is(e, 400, /Username is not valid/)) {\n          return {\n            username: 'invalid',\n          }\n        }\n        if (APIConnector.HTTPError.is(e, 409, /Username already taken/)) {\n          return {\n            username: 'taken',\n          }\n        }\n        if (APIConnector.HTTPError.is(e, 400, /Invalid email/)) {\n          return {\n            email: 'invalid',\n          }\n        }\n        if (APIConnector.HTTPError.is(e, 409, /Email already taken/)) {\n          return {\n            email: 'taken',\n          }\n        }\n        if (APIConnector.HTTPError.is(e, 500, /SMTP.*invalid/)) {\n          return {\n            [FF.FORM_ERROR]: 'smtp',\n          }\n        }\n        // eslint-disable-next-line no-console\n        console.error('Error creating user')\n        // eslint-disable-next-line no-console\n        console.dir(e)\n        return {\n          [FF.FORM_ERROR]: 'unexpected',\n        }\n      }\n    },\n    [req, cache, push, close, roles],\n  )\n\n  return (\n    <RF.Form onSubmit={onSubmit} initialValues={{ roleId: defaultRoleId || roles[0].id }}>\n      {({\n        handleSubmit,\n        submitting,\n        submitFailed,\n        error,\n        hasSubmitErrors,\n        hasValidationErrors,\n        modifiedSinceLastSubmit,\n      }) => (\n        <>\n          <M.DialogTitle>Invite a user</M.DialogTitle>\n          <M.DialogContent>\n            <form onSubmit={handleSubmit}>\n              <RF.Field\n                component={Form.Field}\n                name=\"username\"\n                validate={validators.required}\n                label=\"Username\"\n                fullWidth\n                margin=\"normal\"\n                errors={{\n                  required: 'Enter a username',\n                  taken: 'Username already taken',\n                  invalid: (\n                    <>\n                      Enter a valid username{' '}\n                      <M.Tooltip\n                        arrow\n                        title=\"Must start with a letter or underscore, and contain only alphanumeric characters and underscores thereafter\"\n                      >\n                        <M.Icon className={classes.infoIcon}>info</M.Icon>\n                      </M.Tooltip>\n                    </>\n                  ),\n                }}\n                autoComplete=\"off\"\n              />\n              <RF.Field\n                component={Form.Field}\n                name=\"email\"\n                validate={validators.required}\n                label=\"Email\"\n                fullWidth\n                margin=\"normal\"\n                errors={{\n                  required: 'Enter an email',\n                  taken: 'Email already taken',\n                  invalid: 'Enter a valid email',\n                }}\n                autoComplete=\"off\"\n              />\n              <RF.Field\n                component={Form.Field}\n                name=\"roleId\"\n                label=\"Role\"\n                select\n                fullWidth\n                margin=\"normal\"\n              >\n                {roles.map((r) => (\n                  <M.MenuItem value={r.id} key={r.id}>\n                    {r.name}\n                  </M.MenuItem>\n                ))}\n              </RF.Field>\n              {submitFailed && (\n                <Form.FormError\n                  error={error}\n                  errors={{\n                    unexpected: 'Something went wrong',\n                    smtp: 'SMTP error: contact your administrator',\n                  }}\n                />\n              )}\n              <input type=\"submit\" style={{ display: 'none' }} />\n            </form>\n          </M.DialogContent>\n          <M.DialogActions>\n            <M.Button\n              onClick={() => close('cancel')}\n              color=\"primary\"\n              disabled={submitting}\n            >\n              Cancel\n            </M.Button>\n            <M.Button\n              onClick={handleSubmit}\n              color=\"primary\"\n              disabled={\n                submitting ||\n                (hasValidationErrors && submitFailed) ||\n                (hasSubmitErrors && !modifiedSinceLastSubmit)\n              }\n            >\n              Invite\n            </M.Button>\n          </M.DialogActions>\n        </>\n      )}\n    </RF.Form>\n  )\n}\n\n// close: PT.func.isRequired,\n// user: PT.object.isRequired,\nfunction Edit({ close, user: { email: oldEmail, username } }) {\n  const req = APIConnector.use()\n  const cache = Cache.use()\n  const { push } = Notifications.use()\n\n  const onSubmit = React.useCallback(\n    async ({ email }) => {\n      if (email === oldEmail) {\n        close()\n        return\n      }\n\n      try {\n        await req({\n          endpoint: '/users/edit_email',\n          method: 'POST',\n          body: JSON.stringify({ username, email }),\n        })\n\n        cache.patchOk(\n          data.UsersResource,\n          null,\n          R.map((u) => (u.username === username ? { ...u, email } : u)),\n        )\n        push('Changes saved')\n        close()\n      } catch (e) {\n        if (APIConnector.HTTPError.is(e, 400, /Another user already has that email/)) {\n          return {\n            email: 'taken',\n          }\n        }\n        if (APIConnector.HTTPError.is(e, 400, /Invalid email/)) {\n          return {\n            email: 'invalid',\n          }\n        }\n        // eslint-disable-next-line no-console\n        console.error('Error changing email')\n        // eslint-disable-next-line no-console\n        console.dir(e)\n        return {\n          [FF.FORM_ERROR]: 'unexpected',\n        }\n      }\n    },\n    [close, username, oldEmail, req, cache, push],\n  )\n\n  return (\n    <RF.Form onSubmit={onSubmit} initialValues={{ email: oldEmail }}>\n      {({\n        handleSubmit,\n        submitting,\n        submitFailed,\n        error,\n        hasSubmitErrors,\n        hasValidationErrors,\n        modifiedSinceLastSubmit,\n      }) => (\n        <>\n          <M.DialogTitle>Edit user: &quot;{username}&quot;</M.DialogTitle>\n          <M.DialogContent>\n            <form onSubmit={handleSubmit}>\n              <RF.Field\n                component={Form.Field}\n                name=\"email\"\n                validate={validators.required}\n                label=\"Email\"\n                fullWidth\n                margin=\"normal\"\n                errors={{\n                  required: 'Enter an email',\n                  taken: 'Email already taken',\n                  invalid: 'Enter a valid email',\n                }}\n                autoComplete=\"off\"\n              />\n              {submitFailed && (\n                <Form.FormError\n                  error={error}\n                  errors={{\n                    unexpected: 'Something went wrong',\n                  }}\n                />\n              )}\n              <input type=\"submit\" style={{ display: 'none' }} />\n            </form>\n          </M.DialogContent>\n          <M.DialogActions>\n            <M.Button\n              onClick={() => close('cancel')}\n              color=\"primary\"\n              disabled={submitting}\n            >\n              Cancel\n            </M.Button>\n            <M.Button\n              onClick={handleSubmit}\n              color=\"primary\"\n              disabled={\n                submitting ||\n                (hasValidationErrors && submitFailed) ||\n                (hasSubmitErrors && !modifiedSinceLastSubmit)\n              }\n            >\n              Save\n            </M.Button>\n          </M.DialogActions>\n        </>\n      )}\n    </RF.Form>\n  )\n}\n\n// user: PT.object.isRequired,\n// close: PT.func.isRequired,\nfunction Delete({ user, close }) {\n  const req = APIConnector.use()\n  const cache = Cache.use()\n  const { push } = Notifications.use()\n  const doDelete = React.useCallback(() => {\n    close()\n    req({\n      endpoint: '/users/delete',\n      method: 'POST',\n      body: JSON.stringify({ username: user.username }),\n    })\n      .then(() => {\n        push(`User \"${user.username}\" deleted`)\n      })\n      .catch((e) => {\n        // TODO: handle errors once the endpoint is working\n        cache.patchOk(data.UsersResource, null, R.append(user))\n        push(`Error deleting user \"${user.username}\"`)\n        // eslint-disable-next-line no-console\n        console.error('Error deleting user')\n        // eslint-disable-next-line no-console\n        console.dir(e)\n      })\n    // optimistically remove the user from cache\n    cache.patchOk(data.UsersResource, null, R.reject(R.propEq('username', user.username)))\n  }, [user, close, req, cache, push])\n\n  return (\n    <>\n      <M.DialogTitle>Delete a user</M.DialogTitle>\n      <M.DialogContent>\n        You are about to delete user &quot;{user.username}&quot;. This operation is\n        irreversible.\n      </M.DialogContent>\n      <M.DialogActions>\n        <M.Button onClick={() => close('cancel')} color=\"primary\">\n          Cancel\n        </M.Button>\n        <M.Button onClick={doDelete} color=\"primary\">\n          Delete\n        </M.Button>\n      </M.DialogActions>\n    </>\n  )\n}\n\n// admin: PT.bool.isRequired,\n// username: PT.string.isRequired,\n// close: PT.func.isRequired,\nfunction AdminRights({ username, admin, close }) {\n  const req = APIConnector.use()\n  const cache = Cache.use()\n  const { push } = Notifications.use()\n  const doChange = React.useCallback(\n    () =>\n      close(\n        req({\n          method: 'POST',\n          endpoint: `/users/${admin ? 'grant' : 'revoke'}_admin`,\n          body: JSON.stringify({ username }),\n        })\n          .then(() => {\n            cache.patchOk(\n              data.UsersResource,\n              null,\n              R.map((u) => (u.username === username ? { ...u, isAdmin: admin } : u)),\n            )\n            return 'ok'\n          })\n          .catch((e) => {\n            push(\n              `Error ${admin ? 'granting' : 'revoking'} admin status for \"${username}\"`,\n            )\n            // eslint-disable-next-line no-console\n            console.error('Error changing user admin status', { username, admin })\n            // eslint-disable-next-line no-console\n            console.dir(e)\n            throw e\n          }),\n      ),\n    [admin, close, username, req, cache, push],\n  )\n\n  return (\n    <>\n      <M.DialogTitle>{admin ? 'Grant' : 'Revoke'} admin rights</M.DialogTitle>\n      <M.DialogContent>\n        You are about to {admin ? 'grant admin rights to' : 'revoke admin rights from'}{' '}\n        &quot;{username}&quot;.\n      </M.DialogContent>\n      <M.DialogActions>\n        <M.Button onClick={() => close('cancel')} color=\"primary\">\n          Cancel\n        </M.Button>\n        <M.Button onClick={doChange} color=\"primary\">\n          {admin ? 'Grant' : 'Revoke'}\n        </M.Button>\n      </M.DialogActions>\n    </>\n  )\n}\n\nconst useUsernameStyles = M.makeStyles((t) => ({\n  root: {\n    alignItems: 'center',\n    display: 'flex',\n  },\n  admin: {\n    fontWeight: 600,\n  },\n  icon: {\n    fontSize: '1em',\n    marginLeft: `calc(-1em - ${t.spacing(0.5)}px)`,\n    marginRight: t.spacing(0.5),\n  },\n}))\n\n// admin: PT.bool,\nfunction Username({ className, admin = false, children, ...props }) {\n  const classes = useUsernameStyles()\n  return (\n    <span className={cx(className, classes.root)} {...props}>\n      {admin && <M.Icon className={classes.icon}>security</M.Icon>}\n      <Mono className={cx({ [classes.admin]: admin })}>{children}</Mono>\n    </span>\n  )\n}\n\nfunction Editable({ value, onChange, children }) {\n  const [busy, setBusy] = React.useState(false)\n  const [savedValue, saveValue] = React.useState(value)\n  const change = React.useCallback(\n    (newValue) => {\n      if (savedValue === newValue) return\n      if (busy) return\n      setBusy(true)\n      saveValue(newValue)\n      Promise.resolve(onChange(newValue))\n        .then(() => {\n          setBusy(false)\n        })\n        .catch((e) => {\n          saveValue(savedValue)\n          setBusy(false)\n          throw e\n        })\n    },\n    [onChange, busy, setBusy, savedValue, saveValue],\n  )\n\n  return children({ change, busy, value: savedValue })\n}\n\n// not a valid role name\nconst emptyRole = '<None>'\n\nfunction UsersSkeleton() {\n  return (\n    <M.Paper>\n      <Table.Toolbar heading=\"Users\" />\n      <Table.Progress />\n    </M.Paper>\n  )\n}\n\n// users: PT.object.isRequired,\nexport default function Users({ users }) {\n  const rows = Cache.suspend(users)\n  const [\n    {\n      data: { roles, defaultRole },\n    },\n  ] = urql.useQuery({ query: ROLES_QUERY })\n  const defaultRoleId = defaultRole?.id\n\n  const req = APIConnector.use()\n  const cache = Cache.use()\n  const { push } = Notifications.use()\n  const dialogs = Dialogs.use()\n  const { open: openDialog } = dialogs\n\n  const setRole = React.useCallback(\n    (username, role) =>\n      req({\n        method: 'POST',\n        endpoint: '/users/set_role',\n        body: JSON.stringify({ username, role }),\n      })\n        .then(() => {\n          cache.patchOk(\n            data.UsersResource,\n            null,\n            R.map((u) => (u.username === username ? { ...u, role } : u)),\n          )\n        })\n        .catch((e) => {\n          push(`Error changing role for \"${username}\"`)\n          // eslint-disable-next-line no-console\n          console.error('Error chaging role', { username, role })\n          // eslint-disable-next-line no-console\n          console.dir(e)\n          throw e\n        }),\n    [req, cache, push],\n  )\n\n  const setIsActive = React.useCallback(\n    (username, active) =>\n      req({\n        method: 'POST',\n        endpoint: `/users/${active ? 'enable' : 'disable'}`,\n        body: JSON.stringify({ username }),\n      })\n        .then(() => {\n          cache.patchOk(\n            data.UsersResource,\n            null,\n            R.map((u) => (u.username === username ? { ...u, isActive: active } : u)),\n          )\n        })\n        .catch((e) => {\n          push(`Error ${active ? 'enabling' : 'disabling'} \"${username}\"`)\n          // eslint-disable-next-line no-console\n          console.error('Error (de)activating user', { username, active })\n          // eslint-disable-next-line no-console\n          console.dir(e)\n          throw e\n        }),\n    [req, cache, push],\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        id: 'isActive',\n        label: 'Enabled',\n        getValue: R.prop('isActive'),\n        getDisplay: (v, u) => (\n          <Editable value={v} onChange={(active) => setIsActive(u.username, active)}>\n            {({ change, busy, value }) => (\n              <M.Switch\n                checked={value}\n                onChange={(e) => change(e.target.checked)}\n                disabled={busy}\n                color=\"default\"\n              />\n            )}\n          </Editable>\n        ),\n      },\n      {\n        id: 'username',\n        label: 'Username',\n        getValue: R.prop('username'),\n        getDisplay: (v, u) => <Username admin={u.isAdmin}>{v}</Username>,\n        props: { component: 'th', scope: 'row' },\n      },\n      {\n        id: 'email',\n        label: 'Email',\n        getValue: R.prop('email'),\n      },\n      {\n        id: 'role',\n        label: 'Role',\n        getValue: (u) => u.roleId && (roles.find((r) => r.id === u.roleId) || {}).name,\n        getDisplay: (v, u) => (\n          <Editable value={v} onChange={(role) => setRole(u.username, role)}>\n            {({ change, busy, value }) => (\n              <M.Select\n                value={value || emptyRole}\n                onChange={(e) => change(e.target.value)}\n                disabled={busy}\n                renderValue={R.identity}\n              >\n                {roles.map((r) => (\n                  <M.MenuItem value={r.name} key={r.id}>\n                    {r.name}\n                  </M.MenuItem>\n                ))}\n              </M.Select>\n            )}\n          </Editable>\n        ),\n      },\n      {\n        id: 'dateJoined',\n        label: 'Date joined',\n        getValue: R.prop('dateJoined'),\n        getDisplay: (v) => (\n          <span title={v.toString()}>\n            <Format.Relative value={v} />\n          </span>\n        ),\n      },\n      {\n        id: 'lastLogin',\n        label: 'Last login',\n        getValue: R.prop('lastLogin'),\n        getDisplay: (v) => (\n          <span title={v.toString()}>\n            <Format.Relative value={v} />\n          </span>\n        ),\n      },\n      {\n        id: 'isAdmin',\n        label: 'Admin',\n        hint: 'Admins can see this page, add/remove users, and make/remove admins',\n        getValue: R.prop('isAdmin'),\n        getDisplay: (v, u) => (\n          <Editable\n            value={v}\n            onChange={async (admin) => {\n              const res = await openDialog(({ close }) => (\n                <AdminRights {...{ close, admin, username: u.username }} />\n              ))\n              if (res !== 'ok') throw new Error('cancelled')\n            }}\n          >\n            {({ change, busy, value }) => (\n              <M.Switch\n                checked={value}\n                onChange={(e) => change(e.target.checked)}\n                disabled={busy}\n                color=\"default\"\n              />\n            )}\n          </Editable>\n        ),\n      },\n    ],\n    [roles, openDialog, setIsActive, setRole],\n  )\n\n  const ordering = Table.useOrdering({ rows, column: columns[0] })\n  const pagination = Pagination.use(ordering.ordered, {\n    getItemId: R.prop('username'),\n  })\n\n  const toolbarActions = [\n    {\n      title: 'Invite',\n      icon: <M.Icon>add</M.Icon>,\n      fn: React.useCallback(() => {\n        openDialog(({ close }) => <Invite {...{ close, roles, defaultRoleId }} />)\n      }, [roles, defaultRoleId, openDialog]),\n    },\n  ]\n\n  const inlineActions = (user) => [\n    {\n      title: 'Delete',\n      icon: <M.Icon>delete</M.Icon>,\n      fn: () => {\n        dialogs.open(({ close }) => <Delete {...{ user, close }} />)\n      },\n    },\n    {\n      title: 'Edit',\n      icon: <M.Icon>edit</M.Icon>,\n      fn: () => {\n        dialogs.open(({ close }) => <Edit {...{ user, close }} />)\n      },\n    },\n  ]\n\n  return (\n    <React.Suspense fallback={<UsersSkeleton />}>\n      <M.Paper>\n        {dialogs.render({ maxWidth: 'xs', fullWidth: true })}\n        <Table.Toolbar heading=\"Users\" actions={toolbarActions} />\n        <Table.Wrapper>\n          <M.Table size=\"small\">\n            <Table.Head columns={columns} ordering={ordering} withInlineActions />\n            <M.TableBody>\n              {pagination.paginated.map((i) => (\n                <M.TableRow hover key={i.username}>\n                  {columns.map((col) => (\n                    <M.TableCell key={col.id} {...col.props}>\n                      {(col.getDisplay || R.identity)(col.getValue(i), i)}\n                    </M.TableCell>\n                  ))}\n                  <M.TableCell align=\"right\" padding=\"none\">\n                    <Table.InlineActions actions={inlineActions(i)} />\n                  </M.TableCell>\n                </M.TableRow>\n              ))}\n            </M.TableBody>\n          </M.Table>\n        </Table.Wrapper>\n        <Table.Pagination pagination={pagination} />\n      </M.Paper>\n    </React.Suspense>\n  )\n}\n","import * as React from 'react'\nimport * as M from '@material-ui/core'\n\nimport * as APIConnector from 'utils/APIConnector'\nimport MetaTitle from 'utils/MetaTitle'\nimport * as Cache from 'utils/ResourceCache'\n\nimport { Roles, Policies } from './RolesAndPolicies'\nimport Users from './Users'\nimport * as data from './data'\n\nexport default function UsersAndRoles() {\n  const req = APIConnector.use()\n  // TODO: use gql for querying users when implemented\n  const users = Cache.useData(data.UsersResource, { req })\n  return (\n    <>\n      <MetaTitle>{['Users, Roles and Policies', 'Admin']}</MetaTitle>\n      <M.Box mt={2}>\n        <Users users={users} />\n      </M.Box>\n      <M.Box mt={2} mb={2}>\n        <Roles />\n      </M.Box>\n      <M.Box mt={2} mb={2}>\n        <Policies />\n      </M.Box>\n    </>\n  )\n}\n"],"names":["Field","input","meta","errors","helperText","InputLabelProps","rest","error","submitFailed","submitError","props","disabled","submitting","submitSucceeded","shrink","useCheckboxStyles","root","marginBottom","marginTop","Checkbox","label","undefined","FormControlLabelProps","classes","control","useFormErrorStyles","t","spacing","textDecoration","FormError","color","BucketPermissionLevel","PackageListOrder","StatusReportListOrder","is","u","c","a","assertNever","getTitle","base","children","Array","isArray","getTitleSegments","join","MetaTitle","HOUR","MINUTE","DAY","intl","Intl","RelativeTimeFormat","numeric","Relative","value","Date","setT","timerId","window","setInterval","clearInterval","date","baseDate","delta","valueOf","now","years","Math","abs","format","round","months","days","hours","minutes","relativify","Plural","zero","one","other","rules","intlFunc","numberToRule","pluralify","Enum","e","formatted","formatValidationErrors","decode","codec","ValidationError","nullable","name","i","validate","enumValues","has","enum","_tag","Set","Object","values","enumType","EnumType","useStyles","padding","Chevron","direction","className","Controls","page","pages","nextPage","prevPage","display","alignItems","onClick","ml","useGetter","get","use","items","getItemId","perPage","initialPerPage","onChange","setPage","setPerPage","max","ceil","length","goToPage","getKey","key","oldValue","usePrevious","oldKey","useHasChanged","offset","paginate","paginated","prev","floor","total","from","to","changeDirection","d","useOrdering","rows","opts","column","setColumn","setDirection","sortBy","getValue","sort","ordered","change","newCol","renderAction","title","fn","href","component","target","icon","useToolbarStyles","paddingRight","highlight","palette","type","secondary","main","backgroundColor","light","text","primary","dark","spacer","flex","actions","Toolbar","heading","selected","selectedActions","variant","map","Head","columns","selection","sel","ord","withInlineActions","toggleAll","indeterminate","size","all","checked","equals","col","id","sortDirection","align","sortable","hint","placement","enterDelay","active","useWrapperStyles","overflowX","Wrapper","useInlineActionsStyles","opacity","textAlign","transition","whiteSpace","InlineActions","useProgressStyles","marginLeft","Progress","usePaginationStyles","toolbar","Pagination","pagination","count","rowsPerPage","onChangePage","onChangeRowsPerPage","dirtySinceLastSubmit","IAM_HOME","ARN_ROLE_RE","ARN_POLICY_RE","getArnLink","arn","role","match","PolicySelectionFragmentDoc","kind","definitions","typeCondition","selectionSet","selections","containers_Admin_RolesAndPolicies_gql_PoliciesDocument","operation","PolicySelectionDialog","open","onClose","policies","attachPolicy","setSelected","handleExited","select","policy","maxWidth","onExited","dense","button","managed","permissions","dividers","autoFocus","AttachedPolicies","onAdvanced","policiesData","useQuery","query","policySelectionOpen","setPolicySelectionOpen","openPolicySelection","closePolicySelection","concat","availablePolicies","case","fetching","data","ids","reduce","acc","filter","p","maxReached","arrow","style","message","StyledLink","in","disablePadding","divider","disableGutters","right","detachPolicy","edge","fontSize","RoleSelectionFragmentDoc","containers_Admin_RolesAndPolicies_gql_RolesDocument","containers_Admin_RolesAndPolicies_gql_RoleCreateManagedDocument","variableDefinitions","variable","alias","arguments","containers_Admin_RolesAndPolicies_gql_RoleCreateUnmanagedDocument","containers_Admin_RolesAndPolicies_gql_RoleUpdateManagedDocument","containers_Admin_RolesAndPolicies_gql_RoleUpdateUnmanagedDocument","containers_Admin_RolesAndPolicies_gql_RoleDeleteDocument","containers_Admin_RolesAndPolicies_gql_RoleSetDefaultDocument","scope","getDisplay","r","defaultRoleId","__typename","_policies","pl","m","_buckets","bucket","level","lock","background","bottom","cursor","flexDirection","justifyContent","left","position","top","zIndex","overflow","textOverflow","panel","Create","close","createManaged","createUnmanaged","push","Notifications","setManaged","onSubmit","res","managedRoleFormSpec","unmanagedRoleFormSpec","Error","roleCreate","console","initialValues","INITIAL_VALUES","handleSubmit","hasValidationErrors","disableTypography","validators","placeholder","fullWidth","margin","required","reserved","taken","invalid","unexpected","Delete","deleteRole","doDelete","roleDelete","SetDefault","setDefault","doSetDefault","roleSetDefault","Edit","updateManaged","updateUnmanaged","roleUpdate","titleStr","pristine","SettingsMenu","openDialog","openDeleteDialog","openSetDefaultDialog","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","handleMakeDefault","handleDelete","keepMounted","Roles","roles","defaultRole","ordering","dialogs","Dialogs","D","toolbarActions","fallback","render","hover","RoleSelectionDialog","attachRoles","committed","setCommitted","handleAttach","toggle","includes","marginRight","AssociatedRoles","rolesData","roleSelectionOpen","setRoleSelectionOpen","openRoleSelection","closeRoleSelection","availableRoles","detachRole","ListItemAvatar","ref","context","ListContext","alignItemsFlexStart","withStyles","minWidth","flexShrink","containers_Admin_RolesAndPolicies_gql_BucketsDocument","Level","BucketAddDialog","buckets","addBucket","handleAdd","width","height","src","iconUrl","BucketsPermissions","bucketsData","permissionMenuState","setPermissionMenuState","openPermissionMenu","perm","closePermissionMenu","setBucketPermission","bucketAdditionOpen","setBucketAdditionOpen","openBucketAddition","closeBucketAddition","READ","availableBuckets","names","b","READ_WRITE","PolicyResultSelectionFragmentDoc","containers_Admin_RolesAndPolicies_gql_PolicyCreateManagedDocument","containers_Admin_RolesAndPolicies_gql_PolicyCreateUnmanagedDocument","containers_Admin_RolesAndPolicies_gql_PolicyUpdateManagedDocument","containers_Admin_RolesAndPolicies_gql_PolicyUpdateUnmanagedDocument","containers_Admin_RolesAndPolicies_gql_PolicyDeleteDocument","validateNonEmptyString","pp","_roles","managedPolicyFormSpec","unmanagedPolicyFormSpec","policyCreate","nonEmptyString","deletePolicy","policyDelete","PermissionInput","policyUpdate","Policies","UsersResource","fetch","req","endpoint","random","then","dateJoined","date_joined","email","isActive","is_active","isAdmin","is_superuser","lastLogin","last_login","username","roleId","role_id","containers_Admin_Users_gql_RolesDocument","useMonoStyles","fontFamily","typography","monospace","Mono","useInviteStyles","infoIcon","verticalAlign","Invite","APIConnector","cache","find","method","body","JSON","stringify","user","dir","patchOk","hasSubmitErrors","modifiedSinceLastSubmit","Form","autoComplete","smtp","oldEmail","catch","AdminRights","admin","doChange","useUsernameStyles","fontWeight","Username","Editable","busy","setBusy","savedValue","saveValue","newValue","Promise","resolve","UsersSkeleton","Users","users","setRole","setIsActive","v","renderValue","toString","UsersAndRoles","mt","mb"],"sourceRoot":""}